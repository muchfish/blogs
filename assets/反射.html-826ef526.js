import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as r,c,d as o,f as l}from"./app-7caa1bd7.js";const n={},t=l('<h2 id="什么是反射" tabindex="-1"><a class="header-anchor" href="#什么是反射" aria-hidden="true">#</a> 什么是反射？</h2><ul><li>new 对象 <ul><li>创建对象实例的方式</li><li>在编译时候就确定了类型信息</li></ul></li><li>反射 <ul><li>在运行时动态地获取类信息、创建类实例、调用类方法这时候就要用到反射</li><li>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性</li></ul></li><li>反射相关类 <ul><li>Class</li><li>Method</li><li>Field</li><li>Constructor</li></ul></li></ul>',2),s=l('<h2 id="反射的应用场景" tabindex="-1"><a class="header-anchor" href="#反射的应用场景" aria-hidden="true">#</a> 反射的应用场景？</h2><ul><li>Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制</li><li>Spring里的很多注解 ，它真正的功能实现就是利用反射 <ul><li>@Component</li><li>@Value</li></ul></li></ul><h2 id="反射的实现原理" tabindex="-1"><a class="header-anchor" href="#反射的实现原理" aria-hidden="true">#</a> 反射的实现原理</h2><ul><li>基于Java虚拟机（JVM）的类加载机制和类对象模型</li><li>在Java中，每个类都有一个对应的Class对象，该对象包含了类的名称、字段、方法等信息</li><li>通过反射，我们可以获取到Class对象信息，并在运行时动态地操作类和对象</li></ul>',4);function h(d,u){const i=e("Mermaid");return r(),c("div",null,[t,o(i,{id:"mermaid-66",code:"eJy1VMtKw0AU3fcrsoxYcS/uFMGFD9SduIh1qNGalElaERWKFhR8IlpFoShuRLC2iNpSW3+mk9S/cDKTx500rYviLEpmmnPm3nPPSSKlGMa4qiSxshGT6GIH0hj73WYnzhpkB/KAtw+t4WHJKuZ/cvfkoGFdlQNYEpnTygaSB0akeROrWjIMa59+krOCXamT8xMBNp9JI8yKccC8ng7Y4QdFCrBxRDEYrUwhc1VfYVj+uLgEgOSxbN2c2rd5q1Cz3q5oyXY9H8kzoaIUp2FPDksUD3m5tkrvPXjGdM0wcSZh6pg3FOy7VAb0jODlTckaFdeTNi6lFTpFZCK8sJVGhqva4pKvAR/Ufc06KfHGqejk4pic7Tk30BkUj3gV/F/hQta+cJ+nCWDlMlBWtxm2FWhA33L3csFbkL2zzkjTaWhzkuIVLcGMN7O8hhImMA8pFVvNI3JcaFVzreozea21Kw8MvhsDGXA1AyFwRe+Sgn5D4I9EQM4KIvlZoKYJPAN0ibDKHDIzWHPg4ST5DO3vS3JX5AwBVtWy+jqS9eU1T8S4pOAknRTfsVF56jpc5X378gl4R5CTewWoyR31X58U34oCMkqFSGBYC4qFQoi2Cl+a+wqAhgiMS1kllaEZ8nmyusoj1C417YYXIZdCUBCmAn6aQaQ61OwlY5/WgjHrZQsY3j+jxwczujM05OYvfMpcEz4EEsRiv6gHnVc="}),s])}const S=a(n,[["render",h],["__file","反射.html.vue"]]);export{S as default};
