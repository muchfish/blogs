const e=JSON.parse('{"key":"v-e28e0b1c","path":"/Java/concurrent/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html","title":"Java内存模型","lang":"zh-CN","frontmatter":{"title":"Java内存模型","order":3,"isTimeLine":true,"date":"2024-05-14T00:00:00.000Z","description":"说一下你对Java内存模型（JMM）的理解 ？ Java内存模型（Java Memory Model，JMM），是一种抽象的模型，被定义出来屏蔽各种硬件和操作系统的内存访问差异 JMM定义了线程和主内存之间的抽象关系 线程之间的共享变量存储在 主内存（Main Memory）中，每个线程都有一个私有的 本地内存 （Local Memory），本地内存中存储了该线程以读/写共享变量的副本 Java内存模型的抽象图 本地内存是JMM的 一个抽象概念，并不真实存在，实际的线程工作模型如下图所示，其中每个线程都有自己的控制器和运算器，以及一级缓存。有些架构还有一个共享的二级缓存。这些硬件组件对应着JMM中的工作内存 Java内存模型通过定义内存间的交互操作规则，例如读取、写入和同步操作，来确保多线程程序的可见性、有序性和原子性。","head":[["meta",{"property":"og:url","content":"https://muchfish.github.io/blogs/blogs/Java/concurrent/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"鱼塘"}],["meta",{"property":"og:title","content":"Java内存模型"}],["meta",{"property":"og:description","content":"说一下你对Java内存模型（JMM）的理解 ？ Java内存模型（Java Memory Model，JMM），是一种抽象的模型，被定义出来屏蔽各种硬件和操作系统的内存访问差异 JMM定义了线程和主内存之间的抽象关系 线程之间的共享变量存储在 主内存（Main Memory）中，每个线程都有一个私有的 本地内存 （Local Memory），本地内存中存储了该线程以读/写共享变量的副本 Java内存模型的抽象图 本地内存是JMM的 一个抽象概念，并不真实存在，实际的线程工作模型如下图所示，其中每个线程都有自己的控制器和运算器，以及一级缓存。有些架构还有一个共享的二级缓存。这些硬件组件对应着JMM中的工作内存 Java内存模型通过定义内存间的交互操作规则，例如读取、写入和同步操作，来确保多线程程序的可见性、有序性和原子性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-26T12:33:22.000Z"}],["meta",{"property":"article:author","content":"摸鱼散人"}],["meta",{"property":"article:published_time","content":"2024-05-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-26T12:33:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java内存模型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-26T12:33:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"摸鱼散人\\",\\"url\\":\\"https://github.com/muchfish\\"}]}"]]},"headers":[{"level":2,"title":"说一下你对Java内存模型（JMM）的理解 ？","slug":"说一下你对java内存模型-jmm-的理解","link":"#说一下你对java内存模型-jmm-的理解","children":[]},{"level":2,"title":"说说你对原子性、可见性、有序性的理解？","slug":"说说你对原子性、可见性、有序性的理解","link":"#说说你对原子性、可见性、有序性的理解","children":[{"level":3,"title":"分析下面几行代码的原子性？","slug":"分析下面几行代码的原子性","link":"#分析下面几行代码的原子性","children":[]},{"level":3,"title":"原子性、可见性、有序性都应该怎么保证呢？","slug":"原子性、可见性、有序性都应该怎么保证呢","link":"#原子性、可见性、有序性都应该怎么保证呢","children":[]}]},{"level":2,"title":"那说说什么是指令重排？","slug":"那说说什么是指令重排","link":"#那说说什么是指令重排","children":[]},{"level":2,"title":"指令重排有限制吗？happens-before了解吗？","slug":"指令重排有限制吗-happens-before了解吗","link":"#指令重排有限制吗-happens-before了解吗","children":[]},{"level":2,"title":"as-if-serial又是什么？单线程的程序一定是顺序的吗？","slug":"as-if-serial又是什么-单线程的程序一定是顺序的吗","link":"#as-if-serial又是什么-单线程的程序一定是顺序的吗","children":[]},{"level":2,"title":"volatile实现原理了解吗？","slug":"volatile实现原理了解吗","link":"#volatile实现原理了解吗","children":[{"level":3,"title":"volatile怎么保证可见性的呢？","slug":"volatile怎么保证可见性的呢","link":"#volatile怎么保证可见性的呢","children":[]},{"level":3,"title":"volatile怎么保证有序性的呢？","slug":"volatile怎么保证有序性的呢","link":"#volatile怎么保证有序性的呢","children":[]}]}],"git":{"createdTime":1719405202000,"updatedTime":1719405202000,"contributors":[{"name":"daiwencheng","email":"1319105206@qq.com","commits":1}]},"readingTime":{"minutes":8.04,"words":2413},"filePathRelative":"Java/concurrent/Java内存模型.md","localizedDate":"2024年5月14日","excerpt":"<h2> 说一下你对Java内存模型（JMM）的理解 ？</h2>\\n<ul>\\n<li>\\n<p>Java内存模型（Java Memory Model，JMM），是一种抽象的模型，被定义出来屏蔽各种硬件和操作系统的内存访问差异</p>\\n</li>\\n<li>\\n<p>JMM定义了线程和主内存之间的抽象关系</p>\\n<ul>\\n<li>线程之间的共享变量存储在 主内存（Main Memory）中，每个线程都有一个私有的 本地内存 （Local Memory），本地内存中存储了该线程以读/写共享变量的副本\\n<ul>\\n<li>Java内存模型的抽象图</li>\\n</ul>\\n</li>\\n</ul>\\n<figure><figcaption></figcaption></figure>\\n<ul>\\n<li>\\n<p>本地内存是JMM的 一个抽象概念，并不真实存在，实际的线程工作模型如下图所示，其中每个线程都有自己的控制器和运算器，以及一级缓存。有些架构还有一个共享的二级缓存。这些硬件组件对应着JMM中的工作内存</p>\\n<figure><figcaption></figcaption></figure>\\n</li>\\n<li>\\n<p>Java内存模型通过定义内存间的交互操作规则，例如读取、写入和同步操作，来确保多线程程序的可见性、有序性和原子性。</p>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
