import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,f as r}from"./app-1e7b1b52.js";const h={},d=r('<h2 id="面向对象和面向过程的区别" tabindex="-1"><a class="header-anchor" href="#面向对象和面向过程的区别" aria-hidden="true">#</a> ⾯向对象和⾯向过程的区别?</h2><ul><li>⾯向过程 ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。</li><li>⾯向对象 ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。 目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。</li></ul><h2 id="面向对象有哪些特性" tabindex="-1"><a class="header-anchor" href="#面向对象有哪些特性" aria-hidden="true">#</a> 面向对象有哪些特性?</h2><ul><li>封装 <ul><li>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法</li></ul></li><li>继承 <ul><li>继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用</li></ul></li><li>多态 <ul><li>所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定</li><li>即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定</li><li>在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）</li></ul></li></ul><h2 id="重载-overload-和重写-override-的区别" tabindex="-1"><a class="header-anchor" href="#重载-overload-和重写-override-的区别" aria-hidden="true">#</a> 重载（overload）和重写（override）的区别？</h2><h2 id="访问修饰符public、private、protected、以及不写-默认-时的-区别" tabindex="-1"><a class="header-anchor" href="#访问修饰符public、private、protected、以及不写-默认-时的-区别" aria-hidden="true">#</a> 访问修饰符public、private、protected、以及不写（默认）时的 区别?</h2><h2 id="this关键字有什么作用" tabindex="-1"><a class="header-anchor" href="#this关键字有什么作用" aria-hidden="true">#</a> this关键字有什么作用？</h2><h2 id="抽象类-abstract-class-和接口-interface-有什么区别" tabindex="-1"><a class="header-anchor" href="#抽象类-abstract-class-和接口-interface-有什么区别" aria-hidden="true">#</a> 抽象类(abstract class)和接口(interface)有什么区别？</h2><h2 id="成员变量与局部变量的区别有哪些" tabindex="-1"><a class="header-anchor" href="#成员变量与局部变量的区别有哪些" aria-hidden="true">#</a> 成员变量与局部变量的区别有哪些？</h2><h2 id="静态变量和实例变量的区别-静态方法、实例方法呢" tabindex="-1"><a class="header-anchor" href="#静态变量和实例变量的区别-静态方法、实例方法呢" aria-hidden="true">#</a> 静态变量和实例变量的区别？静态方法、实例方法呢？</h2><h2 id="final关键字有什么作用" tabindex="-1"><a class="header-anchor" href="#final关键字有什么作用" aria-hidden="true">#</a> final关键字有什么作用？</h2><h2 id="final、finally、finalize的区别" tabindex="-1"><a class="header-anchor" href="#final、finally、finalize的区别" aria-hidden="true">#</a> final、finally、finalize的区别？</h2><h2 id="和-equals-的区别" tabindex="-1"><a class="header-anchor" href="#和-equals-的区别" aria-hidden="true">#</a> ==和 equals 的区别？</h2><h2 id="hashcode与-equals" tabindex="-1"><a class="header-anchor" href="#hashcode与-equals" aria-hidden="true">#</a> hashCode与 equals?</h2><h2 id="java是值传递-还是引用传递" tabindex="-1"><a class="header-anchor" href="#java是值传递-还是引用传递" aria-hidden="true">#</a> Java是值传递，还是引用传递？</h2><h2 id="什么是深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#什么是深拷贝和浅拷贝" aria-hidden="true">#</a> 什么是深拷贝和浅拷贝?</h2><h2 id="java-创建对象有哪几种方式" tabindex="-1"><a class="header-anchor" href="#java-创建对象有哪几种方式" aria-hidden="true">#</a> Java 创建对象有哪几种方式？</h2>',17),l=[d];function n(t,s){return e(),i("div",null,l)}const f=a(h,[["render",n],["__file","面向对象.html.vue"]]);export{f as default};
