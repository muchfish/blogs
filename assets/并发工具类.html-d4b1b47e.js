const n=JSON.parse('{"key":"v-4cbedf23","path":"/Java/Java%E5%B9%B6%E5%8F%91/%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB.html","title":"并发工具类","lang":"zh-CN","frontmatter":{"title":"并发工具类","order":5,"isTimeLine":true,"date":"2024-05-20T00:00:00.000Z","description":"CountDownLatch（倒计数器）了解吗？ CountDownLatch，倒计数器，有两个常见的应用场景 场景1：协调子线程结束动作：等待所有子线程运行结束 public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(5); Thread 大乔 = new Thread(countDownLatch::countDown); Thread 兰陵王 = new Thread(countDownLatch::countDown); Thread 安其拉 = new Thread(countDownLatch::countDown); Thread 哪吒 = new Thread(countDownLatch::countDown); Thread 铠 = new Thread(() -&gt; { try { // 稍等，上个卫生间，马上到... Thread.sleep(1500); countDownLatch.countDown(); } catch (InterruptedException ignored) { } }); 大乔.start(); 兰陵王.start(); 安其拉.start(); 哪吒.start(); 铠.start(); countDownLatch.await(); System.out.println(\\"所有玩家已经就位！\\"); } 子线程使用countDownLatch.countDown()进行倒数计数 主线程使用countDownLatch.await()进行阻塞，等待子线程完成 场景2：协调子线程开始动作：统一各线程动作开始的时机 public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(1); Thread 大乔 = new Thread(() -&gt; waitToFight(countDownLatch)); Thread 兰陵王 = new Thread(() -&gt; waitToFight(countDownLatch)); Thread 安其拉 = new Thread(() -&gt; waitToFight(countDownLatch)); Thread 哪吒 = new Thread(() -&gt; waitToFight(countDownLatch)); Thread 铠 = new Thread(() -&gt; waitToFight(countDownLatch)); 大乔.start(); 兰陵王.start(); 安其拉.start(); 哪吒.start(); 铠.start(); Thread.sleep(1000); countDownLatch.countDown(); System.out.println(\\"敌方还有5秒达到战场，全军出击！\\"); } private static void waitToFight(CountDownLatch countDownLatch) { try { countDownLatch.await(); // 在此等待信号再继续 System.out.println(\\"收到，发起进攻！\\"); } catch (InterruptedException e) { e.printStackTrace(); } } 子线程使用countDownLatch.await()进行阻塞，等待主线程完成 主线程使用countDownLatch.countDown()进行倒数计数 CountDownLatch的核心方法 await() ：等待latch降为0 boolean await(long timeout, TimeUnit unit) ：等待latch降为0，但是可以设置超时时间。比如有玩家超时未确认，那就重新匹配，总不能为了某个玩家等到天荒地老 countDown() ：latch数量减1 getCount() ：获取当前的latch数量","head":[["meta",{"property":"og:url","content":"https://muchfish.github.io/blogs/blogs/Java/Java%E5%B9%B6%E5%8F%91/%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"鱼塘"}],["meta",{"property":"og:title","content":"并发工具类"}],["meta",{"property":"og:description","content":"CountDownLatch（倒计数器）了解吗？ CountDownLatch，倒计数器，有两个常见的应用场景 场景1：协调子线程结束动作：等待所有子线程运行结束 public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(5); Thread 大乔 = new Thread(countDownLatch::countDown); Thread 兰陵王 = new Thread(countDownLatch::countDown); Thread 安其拉 = new Thread(countDownLatch::countDown); Thread 哪吒 = new Thread(countDownLatch::countDown); Thread 铠 = new Thread(() -&gt; { try { // 稍等，上个卫生间，马上到... Thread.sleep(1500); countDownLatch.countDown(); } catch (InterruptedException ignored) { } }); 大乔.start(); 兰陵王.start(); 安其拉.start(); 哪吒.start(); 铠.start(); countDownLatch.await(); System.out.println(\\"所有玩家已经就位！\\"); } 子线程使用countDownLatch.countDown()进行倒数计数 主线程使用countDownLatch.await()进行阻塞，等待子线程完成 场景2：协调子线程开始动作：统一各线程动作开始的时机 public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(1); Thread 大乔 = new Thread(() -&gt; waitToFight(countDownLatch)); Thread 兰陵王 = new Thread(() -&gt; waitToFight(countDownLatch)); Thread 安其拉 = new Thread(() -&gt; waitToFight(countDownLatch)); Thread 哪吒 = new Thread(() -&gt; waitToFight(countDownLatch)); Thread 铠 = new Thread(() -&gt; waitToFight(countDownLatch)); 大乔.start(); 兰陵王.start(); 安其拉.start(); 哪吒.start(); 铠.start(); Thread.sleep(1000); countDownLatch.countDown(); System.out.println(\\"敌方还有5秒达到战场，全军出击！\\"); } private static void waitToFight(CountDownLatch countDownLatch) { try { countDownLatch.await(); // 在此等待信号再继续 System.out.println(\\"收到，发起进攻！\\"); } catch (InterruptedException e) { e.printStackTrace(); } } 子线程使用countDownLatch.await()进行阻塞，等待主线程完成 主线程使用countDownLatch.countDown()进行倒数计数 CountDownLatch的核心方法 await() ：等待latch降为0 boolean await(long timeout, TimeUnit unit) ：等待latch降为0，但是可以设置超时时间。比如有玩家超时未确认，那就重新匹配，总不能为了某个玩家等到天荒地老 countDown() ：latch数量减1 getCount() ：获取当前的latch数量"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-20T02:41:47.000Z"}],["meta",{"property":"article:author","content":"摸鱼散人"}],["meta",{"property":"article:published_time","content":"2024-05-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-20T02:41:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发工具类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-20T02:41:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"摸鱼散人\\",\\"url\\":\\"https://github.com/muchfish\\"}]}"]]},"headers":[{"level":2,"title":"CountDownLatch（倒计数器）了解吗？","slug":"countdownlatch-倒计数器-了解吗","link":"#countdownlatch-倒计数器-了解吗","children":[]},{"level":2,"title":"CyclicBarrier（同步屏障）了解吗？","slug":"cyclicbarrier-同步屏障-了解吗","link":"#cyclicbarrier-同步屏障-了解吗","children":[]},{"level":2,"title":"CyclicBarrier和CountDownLatch有什么区别？","slug":"cyclicbarrier和countdownlatch有什么区别","link":"#cyclicbarrier和countdownlatch有什么区别","children":[]},{"level":2,"title":"Semaphore（信号量）了解吗？","slug":"semaphore-信号量-了解吗","link":"#semaphore-信号量-了解吗","children":[]},{"level":2,"title":"Exchanger 了解吗？","slug":"exchanger-了解吗","link":"#exchanger-了解吗","children":[{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":3,"title":"解释","slug":"解释-1","link":"#解释-1","children":[]},{"level":3,"title":"重要注意事项","slug":"重要注意事项-2","link":"#重要注意事项-2","children":[]}]},{"level":2,"title":"说说你对CompletableFuture的理解？","slug":"说说你对completablefuture的理解","link":"#说说你对completablefuture的理解","children":[{"level":3,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":3,"title":"2. 基本概念","slug":"_2-基本概念","link":"#_2-基本概念","children":[]},{"level":3,"title":"3. 任务完成后的回调","slug":"_3-任务完成后的回调","link":"#_3-任务完成后的回调","children":[]},{"level":3,"title":"4. 组合多个 CompletableFuture","slug":"_4-组合多个-completablefuture","link":"#_4-组合多个-completablefuture","children":[]},{"level":3,"title":"5. 处理异常","slug":"_5-处理异常","link":"#_5-处理异常","children":[]},{"level":3,"title":"6. 超时控制","slug":"_6-超时控制","link":"#_6-超时控制","children":[]},{"level":3,"title":"7. 并行执行多个任务","slug":"_7-并行执行多个任务","link":"#_7-并行执行多个任务","children":[]},{"level":3,"title":"8. 真实场景应用","slug":"_8-真实场景应用","link":"#_8-真实场景应用","children":[]},{"level":3,"title":"9. 总结","slug":"_9-总结","link":"#_9-总结","children":[]}]},{"level":2,"title":"CompletableFuture的线程池设置？","slug":"completablefuture的线程池设置","link":"#completablefuture的线程池设置","children":[]}],"git":{"createdTime":1716089655000,"updatedTime":1716172907000,"contributors":[{"name":"daiwencheng","email":"1319105206@qq.com","commits":2}]},"readingTime":{"minutes":14.78,"words":4433},"filePathRelative":"Java/Java并发/并发工具类.md","localizedDate":"2024年5月20日","excerpt":"<h2> CountDownLatch（倒计数器）了解吗？</h2>\\n<ul>\\n<li>\\n<p>CountDownLatch，倒计数器，有两个常见的应用场景</p>\\n<ul>\\n<li>\\n<p>场景1：协调子线程结束动作：等待所有子线程运行结束</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">CountDownLatch</span> countDownLatch <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span>\\n            <span class=\\"token class-name\\">CountDownLatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Thread</span> 大乔 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span>countDownLatch<span class=\\"token operator\\">::</span><span class=\\"token function\\">countDown</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Thread</span> 兰陵王 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span>countDownLatch<span class=\\"token operator\\">::</span><span class=\\"token function\\">countDown</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Thread</span> 安其拉 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span>countDownLatch<span class=\\"token operator\\">::</span><span class=\\"token function\\">countDown</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Thread</span> 哪吒 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span>countDownLatch<span class=\\"token operator\\">::</span><span class=\\"token function\\">countDown</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">Thread</span> 铠 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 稍等，上个卫生间，马上到...</span>\\n            <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1500</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            countDownLatch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">countDown</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterruptedException</span> ignored<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    大乔<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    兰陵王<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    安其拉<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    哪吒<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    铠<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    countDownLatch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">await</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"所有玩家已经就位！\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><ul>\\n<li>子线程使用countDownLatch.countDown()进行倒数计数</li>\\n<li>主线程使用countDownLatch.await()进行阻塞，等待子线程完成</li>\\n</ul>\\n</li>\\n<li>\\n<p>场景2：协调子线程开始动作：统一各线程动作开始的时机</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">CountDownLatch</span> countDownLatch <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span>\\n                <span class=\\"token class-name\\">CountDownLatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Thread</span> 大乔 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span>\\n                <span class=\\"token function\\">waitToFight</span><span class=\\"token punctuation\\">(</span>countDownLatch<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Thread</span> 兰陵王 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span>\\n                <span class=\\"token function\\">waitToFight</span><span class=\\"token punctuation\\">(</span>countDownLatch<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Thread</span> 安其拉 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span>\\n                <span class=\\"token function\\">waitToFight</span><span class=\\"token punctuation\\">(</span>countDownLatch<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Thread</span> 哪吒 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span>\\n                <span class=\\"token function\\">waitToFight</span><span class=\\"token punctuation\\">(</span>countDownLatch<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Thread</span> 铠 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span>\\n                <span class=\\"token function\\">waitToFight</span><span class=\\"token punctuation\\">(</span>countDownLatch<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        大乔<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        兰陵王<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        安其拉<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        哪吒<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        铠<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        countDownLatch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">countDown</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"敌方还有5秒达到战场，全军出击！\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">waitToFight</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">CountDownLatch</span>\\n                                            countDownLatch<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            countDownLatch<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">await</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 在此等待信号再继续</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"收到，发起进攻！\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterruptedException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><ul>\\n<li>子线程使用countDownLatch.await()进行阻塞，等待主线程完成</li>\\n<li>主线程使用countDownLatch.countDown()进行倒数计数</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>CountDownLatch的核心方法</p>\\n<ul>\\n<li>await() ：等待latch降为0</li>\\n<li>boolean await(long timeout, TimeUnit unit) ：等待latch降为0，但是可以设置超时时间。比如有玩家超时未确认，那就重新匹配，总不能为了某个玩家等到天荒地老</li>\\n<li>countDown() ：latch数量减1</li>\\n<li>getCount() ：获取当前的latch数量</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
