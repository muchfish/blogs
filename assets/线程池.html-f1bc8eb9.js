const e=JSON.parse('{"key":"v-d64e3d96","path":"/Java/concurrent/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html","title":"线程池","lang":"zh-CN","frontmatter":{"title":"线程池","order":6,"isTimeLine":true,"date":"2024-05-20T00:00:00.000Z","description":"什么是线程池？ 线程池是一种管理和控制多个线程并发执行的机制，旨在提高性能并优化资源使用。线程池通过预先创建一组线程，避免了频繁创建和销毁线程的开销，从而提高了系统效率。 1. 线程池的基本概念 线程复用：线程池在初始化时创建一定数量的线程，这些线程在处理完一个任务后不会被销毁，而是被重用来处理下一个任务。 任务队列：当所有线程都在忙碌时，新的任务会被放入一个队列中等待执行。 线程管理：线程池会自动管理线程的生命周期，如创建新线程、回收空闲线程等。","head":[["meta",{"property":"og:url","content":"https://muchfish.github.io/blogs/blogs/Java/concurrent/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"}],["meta",{"property":"og:site_name","content":"鱼塘"}],["meta",{"property":"og:title","content":"线程池"}],["meta",{"property":"og:description","content":"什么是线程池？ 线程池是一种管理和控制多个线程并发执行的机制，旨在提高性能并优化资源使用。线程池通过预先创建一组线程，避免了频繁创建和销毁线程的开销，从而提高了系统效率。 1. 线程池的基本概念 线程复用：线程池在初始化时创建一定数量的线程，这些线程在处理完一个任务后不会被销毁，而是被重用来处理下一个任务。 任务队列：当所有线程都在忙碌时，新的任务会被放入一个队列中等待执行。 线程管理：线程池会自动管理线程的生命周期，如创建新线程、回收空闲线程等。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-26T12:33:22.000Z"}],["meta",{"property":"article:author","content":"摸鱼散人"}],["meta",{"property":"article:published_time","content":"2024-05-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-26T12:33:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-26T12:33:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"摸鱼散人\\",\\"url\\":\\"https://github.com/muchfish\\"}]}"]]},"headers":[{"level":2,"title":"什么是线程池？","slug":"什么是线程池","link":"#什么是线程池","children":[{"level":3,"title":"1. 线程池的基本概念","slug":"_1-线程池的基本概念","link":"#_1-线程池的基本概念","children":[]},{"level":3,"title":"2. 线程池的优势","slug":"_2-线程池的优势","link":"#_2-线程池的优势","children":[]},{"level":3,"title":"3. Java中的线程池实现","slug":"_3-java中的线程池实现","link":"#_3-java中的线程池实现","children":[]},{"level":3,"title":"4. 线程池的使用示例","slug":"_4-线程池的使用示例","link":"#_4-线程池的使用示例","children":[]},{"level":3,"title":"5. 线程池的配置参数","slug":"_5-线程池的配置参数","link":"#_5-线程池的配置参数","children":[]},{"level":3,"title":"6. 自定义线程池","slug":"_6-自定义线程池","link":"#_6-自定义线程池","children":[]}]},{"level":2,"title":"为什么说频繁创建和销毁线程的开销大？","slug":"为什么说频繁创建和销毁线程的开销大","link":"#为什么说频繁创建和销毁线程的开销大","children":[{"level":3,"title":"1. 系统资源消耗","slug":"_1-系统资源消耗","link":"#_1-系统资源消耗","children":[]},{"level":3,"title":"2. CPU消耗","slug":"_2-cpu消耗","link":"#_2-cpu消耗","children":[]},{"level":3,"title":"3. JVM的开销","slug":"_3-jvm的开销","link":"#_3-jvm的开销","children":[]}]},{"level":2,"title":"能说说工作中线程池的应用吗？","slug":"能说说工作中线程池的应用吗","link":"#能说说工作中线程池的应用吗","children":[{"level":3,"title":"1. Web服务器","slug":"_1-web服务器","link":"#_1-web服务器","children":[]},{"level":3,"title":"2. 数据库连接池","slug":"_2-数据库连接池","link":"#_2-数据库连接池","children":[]},{"level":3,"title":"3. 并行数据处理","slug":"_3-并行数据处理","link":"#_3-并行数据处理","children":[]},{"level":3,"title":"4. 异步任务执行","slug":"_4-异步任务执行","link":"#_4-异步任务执行","children":[]},{"level":3,"title":"5. 定时任务","slug":"_5-定时任务","link":"#_5-定时任务","children":[]}]},{"level":2,"title":"能简单说一下线程池的工作流程吗？","slug":"能简单说一下线程池的工作流程吗","link":"#能简单说一下线程池的工作流程吗","children":[{"level":3,"title":"1. 线程池初始化","slug":"_1-线程池初始化","link":"#_1-线程池初始化","children":[]},{"level":3,"title":"2. 任务提交","slug":"_2-任务提交","link":"#_2-任务提交","children":[]},{"level":3,"title":"3. 任务执行","slug":"_3-任务执行","link":"#_3-任务执行","children":[]},{"level":3,"title":"4. 任务执行完成","slug":"_4-任务执行完成","link":"#_4-任务执行完成","children":[]},{"level":3,"title":"5. 线程池关闭","slug":"_5-线程池关闭","link":"#_5-线程池关闭","children":[]},{"level":3,"title":"线程池的完整工作流程","slug":"线程池的完整工作流程","link":"#线程池的完整工作流程","children":[]}]},{"level":2,"title":"线程池主要参数有哪些？","slug":"线程池主要参数有哪些","link":"#线程池主要参数有哪些","children":[]},{"level":2,"title":"线程池的拒绝策略有哪些？","slug":"线程池的拒绝策略有哪些","link":"#线程池的拒绝策略有哪些","children":[]},{"level":2,"title":"线程池有哪几种工作队列？","slug":"线程池有哪几种工作队列","link":"#线程池有哪几种工作队列","children":[]},{"level":2,"title":"线程池提交execute和submit有什么区别？","slug":"线程池提交execute和submit有什么区别","link":"#线程池提交execute和submit有什么区别","children":[]},{"level":2,"title":"线程池怎么关闭知道吗？","slug":"线程池怎么关闭知道吗","link":"#线程池怎么关闭知道吗","children":[]},{"level":2,"title":"线程池的线程数应该怎么配置？","slug":"线程池的线程数应该怎么配置","link":"#线程池的线程数应该怎么配置","children":[]},{"level":2,"title":"线程池是怎么实现线程复用的？","slug":"线程池是怎么实现线程复用的","link":"#线程池是怎么实现线程复用的","children":[]},{"level":2,"title":"有哪几种常见的线程池？","slug":"有哪几种常见的线程池","link":"#有哪几种常见的线程池","children":[]},{"level":2,"title":"能说一下四种常见线程池的原理吗？","slug":"能说一下四种常见线程池的原理吗","link":"#能说一下四种常见线程池的原理吗","children":[{"level":3,"title":"1.FixedThreadPool（固定大小线程池）","slug":"_1-fixedthreadpool-固定大小线程池","link":"#_1-fixedthreadpool-固定大小线程池","children":[]},{"level":3,"title":"2.CachedThreadPool（缓存线程池）","slug":"_2-cachedthreadpool-缓存线程池","link":"#_2-cachedthreadpool-缓存线程池","children":[]},{"level":3,"title":"3.SingleThreadExecutor（单线程线程池）","slug":"_3-singlethreadexecutor-单线程线程池","link":"#_3-singlethreadexecutor-单线程线程池","children":[]},{"level":3,"title":"4.ScheduledThreadPool（定时任务线程池）","slug":"_4-scheduledthreadpool-定时任务线程池","link":"#_4-scheduledthreadpool-定时任务线程池","children":[]}]},{"level":2,"title":"线程池异常怎么处理知道吗？","slug":"线程池异常怎么处理知道吗","link":"#线程池异常怎么处理知道吗","children":[{"level":3,"title":"1. 捕获并处理异常","slug":"_1-捕获并处理异常","link":"#_1-捕获并处理异常","children":[]},{"level":3,"title":"2. 自定义线程池","slug":"_2-自定义线程池","link":"#_2-自定义线程池","children":[]},{"level":3,"title":"3. 使用 UncaughtExceptionHandler","slug":"_3-使用-uncaughtexceptionhandler","link":"#_3-使用-uncaughtexceptionhandler","children":[]},{"level":3,"title":"4. 使用自定义 RejectedExecutionHandler","slug":"_4-使用自定义-rejectedexecutionhandler","link":"#_4-使用自定义-rejectedexecutionhandler","children":[]},{"level":3,"title":"5. 使用 CompletableFuture 处理异步任务","slug":"_5-使用-completablefuture-处理异步任务","link":"#_5-使用-completablefuture-处理异步任务","children":[]},{"level":3,"title":"6. 使用 Callable 和 Future","slug":"_6-使用-callable-和-future","link":"#_6-使用-callable-和-future","children":[]}]},{"level":2,"title":"能说一下线程池有几种状态吗？","slug":"能说一下线程池有几种状态吗","link":"#能说一下线程池有几种状态吗","children":[{"level":3,"title":"1. RUNNING","slug":"_1-running","link":"#_1-running","children":[]},{"level":3,"title":"2. SHUTDOWN","slug":"_2-shutdown","link":"#_2-shutdown","children":[]},{"level":3,"title":"3. STOP","slug":"_3-stop","link":"#_3-stop","children":[]},{"level":3,"title":"4. TIDYING","slug":"_4-tidying","link":"#_4-tidying","children":[]},{"level":3,"title":"5. TERMINATED","slug":"_5-terminated","link":"#_5-terminated","children":[]},{"level":3,"title":"状态转换图","slug":"状态转换图","link":"#状态转换图","children":[]}]},{"level":2,"title":"线程池如何实现参数的动态修改？","slug":"线程池如何实现参数的动态修改","link":"#线程池如何实现参数的动态修改","children":[]},{"level":2,"title":"线程池调优了解吗？","slug":"线程池调优了解吗","link":"#线程池调优了解吗","children":[]},{"level":2,"title":"你能设计实现一个线程池吗？","slug":"你能设计实现一个线程池吗","link":"#你能设计实现一个线程池吗","children":[]},{"level":2,"title":"单机线程池执行断电了应该怎么处理？","slug":"单机线程池执行断电了应该怎么处理","link":"#单机线程池执行断电了应该怎么处理","children":[]},{"level":2,"title":"线程池并发调用api，有个调用特别耗时，怎么优化？","slug":"线程池并发调用api-有个调用特别耗时-怎么优化","link":"#线程池并发调用api-有个调用特别耗时-怎么优化","children":[]},{"level":2,"title":"Fork/Join框架了解吗？","slug":"fork-join框架了解吗","link":"#fork-join框架了解吗","children":[]}],"git":{"createdTime":1719405202000,"updatedTime":1719405202000,"contributors":[{"name":"daiwencheng","email":"1319105206@qq.com","commits":1}]},"readingTime":{"minutes":41.94,"words":12581},"filePathRelative":"Java/concurrent/线程池.md","localizedDate":"2024年5月20日","excerpt":"<h2> 什么是线程池？</h2>\\n<p>线程池是一种管理和控制多个线程并发执行的机制，旨在提高性能并优化资源使用。线程池通过预先创建一组线程，避免了频繁创建和销毁线程的开销，从而提高了系统效率。</p>\\n<h3> 1. 线程池的基本概念</h3>\\n<ul>\\n<li><strong>线程复用</strong>：线程池在初始化时创建一定数量的线程，这些线程在处理完一个任务后不会被销毁，而是被重用来处理下一个任务。</li>\\n<li><strong>任务队列</strong>：当所有线程都在忙碌时，新的任务会被放入一个队列中等待执行。</li>\\n<li><strong>线程管理</strong>：线程池会自动管理线程的生命周期，如创建新线程、回收空闲线程等。</li>\\n</ul>","autoDesc":true}');export{e as data};
