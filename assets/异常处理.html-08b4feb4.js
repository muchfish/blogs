import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as l,c as i,d as s,a,b as c,f as t}from"./app-1f5e0f9e.js";const o={},u=a("h2",{id:"java-中异常层级结构",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java-中异常层级结构","aria-hidden":"true"},"#"),c(" Java 中异常层级结构?")],-1),r=t('<ul><li>Throwable <ul><li>Error <ul><li>内部错误，是程序无法处理的，比如虚拟机异常</li></ul></li><li>Exception <ul><li>CheckedException <ul><li>受检异常：编译器会强制检查并要求处理的异常</li></ul></li><li>RuntimeException <ul><li>运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等</li></ul></li></ul></li></ul></li><li>Exception</li></ul><h2 id="异常的处理机制" tabindex="-1"><a class="header-anchor" href="#异常的处理机制" aria-hidden="true">#</a> 异常的处理机制？</h2>',2),d=t(`<ul><li>抛出异常 <ul><li>throw</li><li>throws</li><li>系统自动抛异常</li></ul></li><li>捕获异常 <ul><li>try catch</li></ul></li></ul><h2 id="finally一定会执行吗" tabindex="-1"><a class="header-anchor" href="#finally一定会执行吗" aria-hidden="true">#</a> finally一定会执行吗？</h2><p>可能不会执行的情况</p><ul><li>程序还没有进入try语句块就因为异常导致程序终止</li><li>在try块中调用了System.exit()方法：System.exit()方法会终止Java虚拟机的运行，导致程序直接退出，此时finally块中的代码不会执行</li><li>在try块中发生了死循环或无限递归：如果try块中的代码导致了无限循环或无限递归，程序将无法继续执行，finally块中的代码也无法执行</li><li>在try块中发生了线程死锁：如果try块中的代码导致了线程死锁，程序将无法继续执行，finally块中的代码也无法执行</li></ul><h2 id="三道经典异常处理代码题" tabindex="-1"><a class="header-anchor" href="#三道经典异常处理代码题" aria-hidden="true">#</a> 三道经典异常处理代码题</h2><ul><li><p>题目1：finally中正常执行（执行顺序：先finally，再catch中return）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行结果：31</li><li>解析：try、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1</li></ul></li><li><p>题目2：finally中return（按finally中return的为准）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行结果：3</li><li>解析：try 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了</li></ul></li><li><p>题目3：finally中修改try中return的值（修改是无效的）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行结果：2</li><li>在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2</li></ul></li></ul>`,6);function k(v,m){const n=e("Mermaid");return l(),i("div",null,[u,s(n,{id:"mermaid-3",code:"eJx9zjEOgjAUxvHdU/QCXMEECipqBJXthaFCFSK25LWNmHAMdy/h7HH0GpqwWIa+9f97yXdC1lYkCyfkdz5kFcorOzQ8J5437d/P1+f+6EkAEaLEfFBWohB1BW91LcWQqZVD2Bmh6wt3qghoxYszL8mIRRabQZw4wRz227VTLCBlqMZrQsvEsDFNk8paaI5OuQQfkd1iUfIuMTo5BtKIUjl/VkAbphRlSv+5yRdBB5R2"}),r,s(n,{id:"mermaid-64",code:"eJx1kstOwkAUhvc+xaR7X8FExftl5a5xgXcTQwziwqQL7oKgaIAgylUUkECAGLXQgi/TM1NXvILDTMGC2FXb8///+eacObRbT4/QlmUK0efsfId/C6QcgnYEv7voi8Bq/WdWBNUJpdA2mp6eQXOi4LBfIEgnhO2hZI6V5kUBGmm9HsfBkp4PQ6SuezqgxiFyB6obZJk8eDWlQHIuk3W+b5V4nQpJLCshCw0Kt75916Ra1WSnJlc0+caIaCqQCZFHmVSLNA7tWh27R2M0FkazIAoGB48yi8Hvm8SywIyLoqB/vsFl24B69pJbvzGUcW6cyI2iL4kCUUpEqRm9g69aJzmp1xLrtdyXR3E6i/4OdZkpVgbHQAfHNuvJCVP11AAU3TiTgto9pMo9NWj49m17Yzs1H+J3p2xEjJ4NR0KrtE32BQe7mnwFTbfe8JBYmXKb7ZAsm/BWGd4aXRUjoVYINHpq+N+hm7xrfEOjWRJOVXiKhNYpTqrC2w4paDi/oUQJ4NoTtD70bnS4J+0rj131sTnMmm4Xd9FsVlnhLWsFVumvQEIbg20YKVwzcHPNJj2w6QdVTv0AQU2XMw=="}),d])}const f=p(o,[["render",k],["__file","异常处理.html.vue"]]);export{f as default};
