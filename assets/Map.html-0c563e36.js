import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as l,a as n,d as o,f as a}from"./app-40857519.js";const c="/blogs/assets/img_3-37fe0a84.png",i="/blogs/assets/img_4-b6cc4815.png",u="/blogs/assets/img_5-ee6fca6c.png",k={},r=a('<h2 id="能说一下hashmap的数据结构吗" tabindex="-1"><a class="header-anchor" href="#能说一下hashmap的数据结构吗" aria-hidden="true">#</a> 能说一下HashMap的数据结构吗？</h2><ul><li><p>数组 + 链表（JDK1.7）</p></li><li><p>数组 + 链表 + 红黑树 （JDK1.8）</p></li><li><p>数据结构示意图</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>存储结构 <ul><li>HashMap内部使用一个数组（Entry[]）来存储数据</li><li>数组中的每个元素称为一个桶（Bucket），每个桶存储一个键值对（Entry）</li></ul></li><li>哈希函数 <ul><li>HashMap使用键的哈希码（hash code）来计算存储位置</li><li>每个键值对根据哈希函数计算得到一个桶的索引，然后将键值对存储在该桶中</li></ul></li><li>冲突处理 <ul><li>由于哈希函数的计算结果可能会出现冲突，即不同的键计算得到相同的桶索引</li><li>HashMap使用链表或红黑树来解决冲突</li><li>当桶中的元素较少时，使用链表存储键值对</li><li>当桶中的元素较多时，将链表转换为红黑树，以提高查找、插入和删除的效率</li></ul></li></ul></li></ul><h2 id="你对红黑树了解多少-为什么不用二叉树-平衡树呢" tabindex="-1"><a class="header-anchor" href="#你对红黑树了解多少-为什么不用二叉树-平衡树呢" aria-hidden="true">#</a> 你对红黑树了解多少？为什么不用二叉树/平衡树呢？</h2><h3 id="什么是红黑树" tabindex="-1"><a class="header-anchor" href="#什么是红黑树" aria-hidden="true">#</a> 什么是红黑树？</h3>',4),d=n("p",null,"红黑树是一种自平衡的二叉搜索树",-1),h=a("<li><p>二叉搜索树性质</p><ul><li>左子节点的值小于等于当前节点的值，右子节点的值大于等于当前节点的值</li></ul></li><li><p>节点颜色</p><ul><li>每个节点要么是红色，要么是黑色</li></ul></li><li><p>根节点和叶子节点</p><ul><li>根节点是黑色的，叶子节点（NIL节点）是黑色的</li></ul></li><li><p>红色节点限制</p><ul><li>红色节点的子节点必须是黑色的</li></ul></li>",4),m=n("p",null,"黑色节点计数",-1),v=n("ul",null,[n("li",null,"从任一节点到其每个叶子节点的路径上，黑色节点的数量是相同的")],-1),b=a('<h3 id="为什么不用二叉树" tabindex="-1"><a class="header-anchor" href="#为什么不用二叉树" aria-hidden="true">#</a> 为什么不用二叉树？</h3><ul><li>红黑树相对于普通的二叉搜索树的优势在于它能够保持良好的平衡，性能更加优秀和稳定</li><li>普通的二叉搜索树在最坏情况下可能会退化成链表 ,导致插入、删除和查找操作的时间复杂度变为O(n)</li><li>而红黑树通过自平衡的特性，避免了这种退化情况，保证了操作的最坏时间复杂度为O(log n)，其中n是树中节点的数量</li></ul><h3 id="为什么不用平衡二叉树" tabindex="-1"><a class="header-anchor" href="#为什么不用平衡二叉树" aria-hidden="true">#</a> 为什么不用平衡二叉树？</h3><ul><li>相比于平衡二叉树，红黑树在保持平衡的过程中旋转的次数较少，提高了插入和删除操作的效率</li><li>红黑树通过引入节点颜色和特定性质，保证了树的相对平衡</li><li>而平衡二叉树要求更严格的平衡条件，需要更多的旋转操作来保持平衡，导致插入和删除操作的效率较低</li></ul><h2 id="红黑树怎么保持平衡的知道吗" tabindex="-1"><a class="header-anchor" href="#红黑树怎么保持平衡的知道吗" aria-hidden="true">#</a> 红黑树怎么保持平衡的知道吗？</h2><ul><li>红黑树有两种方式保持平衡： 旋转 和 染色</li><li>旋转 <ul><li>旋转分为两种，左旋和右旋</li></ul></li><li>染色</li></ul><h2 id="hashmap的put流程知道吗" tabindex="-1"><a class="header-anchor" href="#hashmap的put流程知道吗" aria-hidden="true">#</a> HashMap的put流程知道吗？</h2><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p>首先进行哈希值的扰动，获取一个新的哈希值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>判断tab是否位空或者长度为0，如果是则进行扩容操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>根据哈希值计算下标，如果对应下标正好没有存放数据，则直接插入即可，否则需要覆盖</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">//覆盖</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>判断tab[i]是否为树节点，否则向链表中插入数据，是则向树中插入节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 覆盖逻辑</span>
<span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    e <span class="token operator">=</span> p<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
    e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果链表中插入节点的时候，链表长度大于等于8，则需要把链表转换为红黑树</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后所有元素处理完成后，判断是否超过阈值； threshold ，超过则扩容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="hashmap怎么查找元素的呢" tabindex="-1"><a class="header-anchor" href="#hashmap怎么查找元素的呢" aria-hidden="true">#</a> HashMap怎么查找元素的呢？</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment">// always check first node</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> first<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">do</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>使用扰动函数，获取新的哈希值</li><li>计算数组下标，获取节点</li><li>当前节点和key匹配，直接返回</li><li>否则，当前节点是否为树节点，查找红黑树</li><li>否则，遍历链表查找</li></ol><h2 id="hashmap的哈希-扰动函数是怎么设计的" tabindex="-1"><a class="header-anchor" href="#hashmap的哈希-扰动函数是怎么设计的" aria-hidden="true">#</a> HashMap的哈希/扰动函数是怎么设计的?</h2><ul><li>HashMap的哈希函数是先通过 hashCode() 获取到key的哈希值</li><li>哈希值是一个32位的int类型的数值，然后再将哈希值右移16位（高位），然后与哈希值本身异或，达到高位与低位混合的效果</li><li>这样的设计增加了哈希值的随机性，降低了哈希冲突的概率 。</li><li>异或操作使得低位的特征影响到高位，减少了相同低位的哈希值导致相同索引位置的情况</li></ul><h2 id="为什么哈希-扰动函数能降hash碰撞" tabindex="-1"><a class="header-anchor" href="#为什么哈希-扰动函数能降hash碰撞" aria-hidden="true">#</a> 为什么哈希/扰动函数能降hash碰撞？</h2><ul><li>因为哈希值&amp;(数组长度 - 1)保留的是hash值的地位特征，所以对扰动函数通过对哈希值进行变换，新hash值保留了高低位的特征，这样使得哈希值的分布更加均匀，从而降低哈希碰撞的概率</li></ul><h2 id="为什么hashmap的容量是2的倍数呢" tabindex="-1"><a class="header-anchor" href="#为什么hashmap的容量是2的倍数呢" aria-hidden="true">#</a> 为什么HashMap的容量是2的倍数呢？</h2><ul><li>方便哈希取余 <ul><li>取余是去除整数倍，保留整数倍以下的数据</li><li>hash值&amp;(数组大小-1) ，也达到了取余的效果 <ul><li>数组大小为2的倍数，(数组大小-1) 则为一个全是1的二进制数</li><li>hash值&amp;(数组大小-1) 结果为直接保留hash值对(数组大小-1) 的低位的余数部分 <ul><li>因为任意数&amp;1得任意数</li><li>任意数&amp;0得0</li><li>hash值&amp;(数组大小-1) ，将(数组大小-1)高位补0，补全到和hash值一样多的位数，那么hash值高位是与0做&amp;运算，低位是与1做位运算，即保留了低位hash值，也是取余的效果</li></ul></li></ul></li></ul></li><li>在扩容时，利用扩容后的大小也是2的倍数，将已经产生hash碰撞的元素完美的转移到新的table中去</li></ul><h2 id="如果初始化hashmap-传一个17的值-new-hashmap-它会怎么处理" tabindex="-1"><a class="header-anchor" href="#如果初始化hashmap-传一个17的值-new-hashmap-它会怎么处理" aria-hidden="true">#</a> 如果初始化HashMap，传一个17的值 new HashMap&lt;&gt; ，它会怎么处理？</h2><ul><li>初始化时，传的不是2的倍数时，HashMap会向上寻找 离得最近的2的倍数 ，所以传入17，但HashMap的实际容量是32</li><li>HashMap的容量必须是2的倍数</li></ul><h2 id="你还知道哪些哈希函数的构造方法呢" tabindex="-1"><a class="header-anchor" href="#你还知道哪些哈希函数的构造方法呢" aria-hidden="true">#</a> 你还知道哪些哈希函数的构造方法呢？</h2><ul><li>除留取余法 <ul><li>HashMap里进行了优化改造，效率更高，散列也更均衡</li></ul></li><li>直接定址法 <ul><li>直接根据 key 来映射到对应的数组位置，例如1232放到下标1232的位置</li></ul></li><li>数字分析法 <ul><li>取 key 的某些数字（例如十位和百位）作为映射的位置</li></ul></li><li>平方取中法 <ul><li>取 key 平方的中间几位作为映射的位置</li></ul></li><li>折叠法 <ul><li>将 key 分割成位数相同的几段，然后把它们的叠加和作为映射的位置</li></ul></li></ul><h2 id="解决哈希冲突有哪些方法呢" tabindex="-1"><a class="header-anchor" href="#解决哈希冲突有哪些方法呢" aria-hidden="true">#</a> 解决哈希冲突有哪些方法呢？</h2><ul><li>链地址法 <ul><li>在冲突的位置拉一个链表，把冲突的元素放进去</li></ul></li><li>开放定址法 <ul><li>开放定址法就是从冲突的位置再接着往下找，给冲突元素找个空位</li><li>找到空闲位置的方法也有很多 <ul><li>线行探查法 <ul><li>从冲突的位置开始，依次判断下一个位置是否空闲，直至找到空闲位置</li></ul></li><li>平方探查法 <ul><li>从冲突的位置x开始，第一次增加 1^2 个位置，第二次增加2^2 …，直至找到空闲的位置</li></ul></li></ul></li></ul></li><li>再哈希法 <ul><li>换种哈希函数，重新计算冲突元素的地址</li></ul></li><li>建立公共溢出区 <ul><li>再建一个数组，把冲突的元素放进去</li></ul></li></ul><h2 id="为什么hashmap链表转红黑树的阈值为8呢" tabindex="-1"><a class="header-anchor" href="#为什么hashmap链表转红黑树的阈值为8呢" aria-hidden="true">#</a> 为什么HashMap链表转红黑树的阈值为8呢？</h2><ul><li>红黑树节点的大小大概是普通节点大小的两倍，所以转红黑树，牺牲了空间换时间，更多的是一种兜底的策略，保证极端情况下的查找效率</li><li>链表转红黑树的阈值为什么要选8呢？ <ul><li>和统计学有关。理想情况下，使用随机哈希码，链表里的节点符合泊松分布，出现节点个数的概率是递减的，节点个数为8的情况，发生概率仅为0.00000006</li></ul></li><li>红黑树转回链表的阈值为什么是6，而不是8？ <ul><li>是因为如果这个阈值也设置成8，假如发生碰撞，节点增减刚好在8附近，会发生链表和红黑树的不断转换，导致资源浪费</li></ul></li></ul><h3 id="扩容在什么时候呢-为什么扩容因子是0-75" tabindex="-1"><a class="header-anchor" href="#扩容在什么时候呢-为什么扩容因子是0-75" aria-hidden="true">#</a> 扩容在什么时候呢？为什么扩容因子是0.75？</h3><ul><li>为了减少哈希冲突发生的概率,当前HashMap的元素个数达到一个临界值的时候，就会触发扩容</li><li>这个 临界值threshold 就是由加载因子和当前容器的容量大小来确定的</li></ul><h3 id="那么为什么选择了0-75作为hashmap的默认加载因子呢" tabindex="-1"><a class="header-anchor" href="#那么为什么选择了0-75作为hashmap的默认加载因子呢" aria-hidden="true">#</a> 那么为什么选择了0.75作为HashMap的默认加载因子呢？</h3><ul><li>这是对 空间 成本和 时间 成本平衡的考虑 <ul><li>假如我们设的比较大，元素比较多，空位比较少的时候才扩容，那么发生哈希冲突的概率就增加了，查找的时间成本就增加了</li><li>我们设的比较小的话，元素比较少，空位比较多的时候就扩容了，发生哈希碰撞的概率就降低了，查找时间成本降低，但是就需要更多的空间去存储元素，空间成本就增加了</li></ul></li></ul><h2 id="hashmap扩容机制了解吗" tabindex="-1"><a class="header-anchor" href="#hashmap扩容机制了解吗" aria-hidden="true">#</a> HashMap扩容机制了解吗？</h2><ul><li>为了减少哈希冲突发生的概率,当前HashMap的元素个数达到一个临界值的时候，就会触发扩容</li><li>链表结构扩容后 <ul><li>hash&amp;老容量==0 <ul><li>现在位置=原先位置</li></ul></li><li>hash&amp;老容量==1 <ul><li>现在位置=原先位置+oldCap</li></ul></li></ul></li></ul><h2 id="jdk1-8对hashmap主要做了哪些优化呢-为什么" tabindex="-1"><a class="header-anchor" href="#jdk1-8对hashmap主要做了哪些优化呢-为什么" aria-hidden="true">#</a> JDK1.8对HashMap主要做了哪些优化呢？为什么？</h2><ul><li>数据结构 <ul><li>在JDK 1.8中，当哈希冲突较多时，HashMap会将链表转换为红黑树，以提高查找、插入和删除操作的效率</li><li>种优化是为了解决在极端情况下链表过长导致的性能问题。</li><li>红黑树的平均时间复杂度为O(log n)，相比于链表的O(n)更高效</li></ul></li><li>哈希碰撞优化 <ul><li>JDK 1.8对哈希碰撞的处理进行了优化</li><li>当发生哈希碰撞时，HashMap会使用更加均匀的哈希函数来计算索引位置，减少碰撞的概率</li><li>JDK 1.8还引入了&quot;树化阈值&quot;和&quot;链表转树阈值&quot;的概念，动态调整链表和红黑树的阈值，以平衡性能和空间的消耗</li></ul></li><li>链表插入方式 <ul><li>在JDK 1.8中，当插入新的键值对时，HashMap采用了尾插法（将新键值对插入链表或红黑树末尾），而不是头插法</li><li>这样做可以减少链表或红黑树的重新排序次数，提高插入操作的效率</li></ul></li><li>扩容优化 <ul><li>JDK 1.8对HashMap的扩容操作进行了优化</li><li>在扩容时，HashMap采用了&quot;渐进式扩容&quot;的策略，将扩容操作分散到多次进行，避免了一次性重新计算所有键的哈希值和索引位置，减少了扩容操作的时间和资源消耗</li></ul></li></ul><h2 id="你能自己设计实现一个hashmap吗" tabindex="-1"><a class="header-anchor" href="#你能自己设计实现一个hashmap吗" aria-hidden="true">#</a> 你能自己设计实现一个HashMap吗？</h2><ul><li>散列函数 <ul><li>hashCode()+除留余数法</li></ul></li><li>冲突解决 <ul><li>链地址法</li></ul></li><li>扩容 <ul><li>节点重新hash获取位置</li></ul></li></ul><h2 id="hashmap-是线程安全的吗-多线程下会有什么问题" tabindex="-1"><a class="header-anchor" href="#hashmap-是线程安全的吗-多线程下会有什么问题" aria-hidden="true">#</a> HashMap 是线程安全的吗？多线程下会有什么问题？</h2><ul><li>不是线程安全的</li><li>多线程下扩容死循环 <ul><li>在JDK1.7中，HashMap使用头插法插入元素，当多个线程同时进行扩容操作时，可能会导致环形链表的出现，从而形成死循环</li><li>JDK1.8中的HashMap改为使用尾插法插入元素，在扩容时保持链表元素原本的顺序，避免了环形链表的问题</li></ul></li><li>多线程的put可能导致元素的丢失 <ul><li>当多个线程同时执行put操作时，如果计算出来的索引位置相同，就会导致后一个key覆盖前一个key，从而导致元素的丢失</li><li>这个问题在JDK1.7和JDK1.8中都存在</li></ul></li><li>put和get并发时，可能导致get为null <ul><li>当一个线程执行put操作导致扩容时，另一个线程同时执行get操作</li><li>由于扩容过程中元素迁移的不可见性，可能导致get操作返回null</li><li>这个问题在JDK1.7和JDK1.8中都存在</li></ul></li></ul><h2 id="有什么办法能解决hashmap线程不安全的问题呢" tabindex="-1"><a class="header-anchor" href="#有什么办法能解决hashmap线程不安全的问题呢" aria-hidden="true">#</a> 有什么办法能解决HashMap线程不安全的问题呢？</h2><ul><li>使用线程安全的包装类 <ul><li>使用 Collections.synchronizedMap() 方法将HashMap包装成线程安全的Map</li><li>这个方法返回一个线程安全的Map对象，对该对象的操作会自动进行同步，从而保证线程安全</li></ul></li><li>使用同步机制 <ul><li>可以使用 synchronized 关键字或其他同步机制（如ReentrantLock ）对HashMap进行加锁</li></ul></li><li>使用线程安全的并发容器 <ul><li>可以使用 ConcurrentHashMap 代替HashMap</li><li>ConcurrentHashMap 是Java提供的线程安全的哈希表实现，通过使用锁分段技术和CAS操作来实现高效的并发性能</li></ul></li></ul><h2 id="能说一下concurrenthashmap的具体实现吗" tabindex="-1"><a class="header-anchor" href="#能说一下concurrenthashmap的具体实现吗" aria-hidden="true">#</a> 能说一下ConcurrentHashmap的具体实现吗？</h2><ul><li>ConcurrentHashmap线程安全在jdk1.7版本是基于 分段锁 实现</li><li>在jdk1.8是基于CAS+synchronized 实现</li></ul><h3 id="jdk1-7-分段锁" tabindex="-1"><a class="header-anchor" href="#jdk1-7-分段锁" aria-hidden="true">#</a> JDK1.7：分段锁</h3><ul><li>JDK1.7版本的ConcurrentHashMap采用分段锁机制 <ul><li>里面包含一个Segment数组，Segment继承于ReentrantLock，Segment则包含HashEntry的数组</li><li>HashEntry本身就是一个链表的结构，具有保存key、value的能力能指向下一个节点的指针</li><li>实际上就是相当于每个Segment都是一个HashMap</li><li>默认的Segment长度是16，也就是支持16个线程的并发写，Segment之间相互不会受到影响</li></ul></li><li>put流程 <ul><li>计算hash，定位到segment，segment如果是空就先初始化</li><li>使用ReentrantLock加锁，如果获取锁失败则尝试自旋，自旋超过次数就阻塞获取，保证一定获取锁成功</li><li>遍历HashEntry，就是和HashMap一样，数组中key和hash一样就直接替换，不存在就再插入链表，链表同样操作</li></ul></li><li>get流程 <ul><li>key通过hash定位到segment，再遍历链表定位到具体的元素上</li><li>需要注意的是value是volatile的，所以get是不需要加锁的</li></ul></li></ul><h3 id="jdk1-8-cas-synchronized" tabindex="-1"><a class="header-anchor" href="#jdk1-8-cas-synchronized" aria-hidden="true">#</a> JDK1.8：CAS+synchronized</h3><ul><li><p>数据结构</p><ul><li>数据结构和HashMap是一样的，数组+链表+红黑树</li><li>它实现线程安全的关键点在于put流程</li></ul></li><li><p>put流程</p><ul><li><p>首先计算hash，遍历node数组，如果数组是空的话，就通过CAS+自旋的方式初始化数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>初始化数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果正在初始化或者扩容</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token comment">//等待(让出线程)</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lost initialization race; just spin</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSetInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//CAS操作</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>
                        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>
                        sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> tab<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>如果当前数组位置是空则直接通过CAS自旋写入数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment">// no lock when adding to empty bin</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果hash==MOVED，说明需要扩容，执行扩容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">ForwardingNode</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>nextTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>nextTable<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">RESIZE_STAMP_SHIFT</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> nextTable <span class="token operator">&amp;&amp;</span> table <span class="token operator">==</span> tab <span class="token operator">&amp;&amp;</span>
                   <span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token constant">MAX_RESIZERS</span> <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span>
                    transferIndex <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSetInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> nextTab<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> table<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果都不满足，就使用synchronized写入数据</p><ul><li>写入数据同样判断链表、红黑树，链表写入和HashMap的方式一样，key hash一样就覆盖，反之就尾插法，链表长度超过8就转换成红黑树</li></ul></li></ul></li><li><p>get查询</p><ul><li>无锁化读取，和HashMap的get流程基本相同 <ul><li>头节点通过Unsafe获取</li></ul></li></ul></li></ul><h2 id="hashmap-内部节点是有序的吗" tabindex="-1"><a class="header-anchor" href="#hashmap-内部节点是有序的吗" aria-hidden="true">#</a> HashMap 内部节点是有序的吗？</h2><ul><li>HashMap 内部节点的顺序是无序的</li><li>因为 HashMap 使用的是哈希表的数据结构，它通过哈希函数将键映射到桶（bucket）中，而不是按照插入顺序进行存储</li><li>如果需要有序的存储和遍历元素，可以考虑使用 LinkedHashMap 或者 TreeMap</li></ul><h2 id="讲讲-linkedhashmap-怎么实现有序的" tabindex="-1"><a class="header-anchor" href="#讲讲-linkedhashmap-怎么实现有序的" aria-hidden="true">#</a> 讲讲 LinkedHashMap 怎么实现有序的？</h2><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>LinkedHashMap在 HashMap 的基础上维护了一个双向链表，用于记录元素的插入顺序或访问顺序</li><li>通过这个链表， LinkedHashMap 可以按照插入顺序或访问顺序进行遍历。</li></ul><h2 id="讲讲-treemap-怎么实现有序的" tabindex="-1"><a class="header-anchor" href="#讲讲-treemap-怎么实现有序的" aria-hidden="true">#</a> 讲讲 TreeMap 怎么实现有序的？</h2><ul><li>TreeMap 是基于红黑树实现的，是一种有序的的集合</li><li>在 TreeMap 中，元素是按照是按照 Key 的自然顺序或者 Comprator 的顺序进行排序，因此可以通过键值来遍历<br> 集合中的元素 <ul><li>不是通过插入顺序遍历</li></ul></li></ul>',54);function g(y,f){const s=t("Mermaid");return e(),l("div",null,[r,n("ul",null,[n("li",null,[d,n("ul",null,[h,n("li",null,[m,v,o(s,{id:"mermaid-157",code:"eJxLL0osyFAIcbHmUgACx2hjA52Xuye+6NwUq6Cra6fgFG0EF4AqAYs7R5uiiTuBxV2iDQ10nu9ahC7uGm1kiiruDBZ3izZDUw8Rd482RxN3AYt7RPt5+qBaDJHwxJRwBUt44ZLwxpRwA0v44JLwxZRwB0v44ZLwR5XgAgAHtXny"})])])])]),b])}const M=p(k,[["render",g],["__file","Map.html.vue"]]);export{M as default};
