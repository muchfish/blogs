import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,f as l}from"./app-b29fba0e.js";const i={};function c(t,a){return n(),e("div",null,a[0]||(a[0]=[l(`<h2 id="什么是泛型" tabindex="-1"><a class="header-anchor" href="#什么是泛型" aria-hidden="true">#</a> 什么是泛型？</h2><ul><li>用于在编译时期提供类型安全的参数化类型 <ul><li>Java泛型是Java 5引入的一个特性</li></ul></li><li>通过使用泛型，可以在编写代码时指定类、接口或方法的参数和返回值的类型，从而增加代码的可读性和安全性</li></ul><h2 id="泛型的使用方法" tabindex="-1"><a class="header-anchor" href="#泛型的使用方法" aria-hidden="true">#</a> 泛型的使用方法？</h2><ul><li><p>泛型类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>泛型接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceName</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>泛型方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ReturnType</span> functionName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ReturnType</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="泛型常用的通配符有哪些" tabindex="-1"><a class="header-anchor" href="#泛型常用的通配符有哪些" aria-hidden="true">#</a> 泛型常用的通配符有哪些？</h2><ul><li>?表示不确定的 java 类型</li><li>T(type)表示具体的一个 java 类型</li><li>K V (key value) 分别代表 java 键值中的 Key Value</li><li>E (element) 代表 Element</li></ul><h2 id="什么是泛型擦除" tabindex="-1"><a class="header-anchor" href="#什么是泛型擦除" aria-hidden="true">#</a> 什么是泛型擦除？</h2><ul><li>泛型主要是为了提供编译时类型检查，而在运行时，泛型信息会被擦除，这就是泛型擦除</li><li>优点：提高了代码的运行效率和与旧版本 Java 的兼容性（JDK5之前是没有泛型 ）</li><li>缺点：在运行时获取泛型类型信息，以及无法使用基本类型作为泛型参数等</li></ul>`,8)]))}const d=s(i,[["render",c],["__file","泛型.html.vue"]]);export{d as default};
