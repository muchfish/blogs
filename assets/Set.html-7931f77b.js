const a=JSON.parse('{"key":"v-1aeb7fc0","path":"/Java/Java%E9%9B%86%E5%90%88/Set.html","title":"Set","lang":"zh-CN","frontmatter":{"title":"Set","order":4,"isTimeLine":true,"date":"2024-05-13T00:00:00.000Z","description":"讲讲HashSet的底层实现？ HashSet 底层就是基于 HashMap 实现的 HashSet 的源码⾮常⾮常少，因为除了clone() 、 writeObject() 、 readObject() 是 HashSet⾃⼰不得不实现之外，其他⽅法都是直接调⽤ HashMap 中的⽅法。 HashSet的add方法 public boolean add(E e) { return map.put(e, PRESENT)==null; } 直接调用HashMap的put方法，将添加的元素作为key，new一个Object作为value 会根据返回值是否为空来判断是否插入元素成功 HashMap的putVal 进行了一系列判断，最后的结果是，只有在key在table数组中不存在的时候，才会返回插入的值 if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) \\te.value = value; afterNodeAccess(e); return oldValue; }","head":[["meta",{"property":"og:url","content":"https://muchfish.github.io/blogs/blogs/Java/Java%E9%9B%86%E5%90%88/Set.html"}],["meta",{"property":"og:site_name","content":"鱼塘"}],["meta",{"property":"og:title","content":"Set"}],["meta",{"property":"og:description","content":"讲讲HashSet的底层实现？ HashSet 底层就是基于 HashMap 实现的 HashSet 的源码⾮常⾮常少，因为除了clone() 、 writeObject() 、 readObject() 是 HashSet⾃⼰不得不实现之外，其他⽅法都是直接调⽤ HashMap 中的⽅法。 HashSet的add方法 public boolean add(E e) { return map.put(e, PRESENT)==null; } 直接调用HashMap的put方法，将添加的元素作为key，new一个Object作为value 会根据返回值是否为空来判断是否插入元素成功 HashMap的putVal 进行了一系列判断，最后的结果是，只有在key在table数组中不存在的时候，才会返回插入的值 if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) \\te.value = value; afterNodeAccess(e); return oldValue; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-13T09:21:43.000Z"}],["meta",{"property":"article:author","content":"摸鱼散人"}],["meta",{"property":"article:published_time","content":"2024-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-13T09:21:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Set\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-13T09:21:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"摸鱼散人\\",\\"url\\":\\"https://github.com/muchfish\\"}]}"]]},"headers":[{"level":2,"title":"讲讲HashSet的底层实现？","slug":"讲讲hashset的底层实现","link":"#讲讲hashset的底层实现","children":[]}],"git":{"createdTime":1715573334000,"updatedTime":1715592103000,"contributors":[{"name":"daiwencheng","email":"1319105206@qq.com","commits":2}]},"readingTime":{"minutes":0.63,"words":188},"filePathRelative":"Java/Java集合/Set.md","localizedDate":"2024年5月13日","excerpt":"<h2> 讲讲HashSet的底层实现？</h2>\\n<ul>\\n<li>\\n<p>HashSet 底层就是基于 HashMap 实现的</p>\\n<ul>\\n<li>HashSet 的源码⾮常⾮常少，因为除了clone() 、 writeObject() 、 readObject() 是 HashSet⾃⼰不得不实现之外，其他⽅法都是直接调⽤ HashMap 中的⽅法。</li>\\n</ul>\\n</li>\\n<li>\\n<p>HashSet的add方法</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">E</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">,</span> <span class=\\"token constant\\">PRESENT</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">==</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><ul>\\n<li>\\n<p>直接调用HashMap的put方法，将添加的元素作为key，new一个Object作为value</p>\\n</li>\\n<li>\\n<p>会根据返回值是否为空来判断是否插入元素成功</p>\\n<ul>\\n<li>\\n<p>HashMap的putVal</p>\\n<ul>\\n<li>\\n<p>进行了一系列判断，最后的结果是，只有在key在table数组中不存在的时候，才会返回插入的值</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// existing mapping for key</span>\\n    <span class=\\"token class-name\\">V</span> oldValue <span class=\\"token operator\\">=</span> e<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>onlyIfAbsent <span class=\\"token operator\\">||</span> oldValue <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n    \\te<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">afterNodeAccess</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> oldValue<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{a as data};
