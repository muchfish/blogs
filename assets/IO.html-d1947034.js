import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c,d as a,a as n,b as t,f as e}from"./app-d2422f2b.js";const i={},u=n("h2",{id:"java-中-io-流分为几种",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#java-中-io-流分为几种","aria-hidden":"true"},"#"),t(" Java 中 IO 流分为几种?")],-1),r=n("ul",null,[n("li",null,[t("按照流的流向分，可以分为 输入流 和 输出流 "),n("ul",null,[n("li",null,"InputStream / Reader : 所有的输入流的基类，前者是字节输入流，后者是字符输入流"),n("li",null,"OutputStream / Writer : 所有输出流的基类，前者是字节输出流，后者是字符输出流")])]),n("li",null,"按照操作单元划分，可以划分为 字节流 和 字符流"),n("li",null,"按照流的角色划分为 节点流 和 处理流")],-1),d=e('<h2 id="既然有了字节流-为什么还要有字符流" tabindex="-1"><a class="header-anchor" href="#既然有了字节流-为什么还要有字符流" aria-hidden="true">#</a> 既然有了字节流,为什么还要有字符流？</h2><ul><li><strong>字节流</strong><ul><li>字节流则更适合处理二进制数据</li><li>字节流以字节为单位进行输入输出，适用于处理二进制数据（例如图像、音频、视频等）或与底层设备进行通信时。字节流通常用于处理文件和网络连接中的数据传输。它们是处理数据的底层工具，提供了最基本的输入输出操作。</li></ul></li><li><strong>字符流</strong><ul><li>字符流更适合读取和写入文本文件</li><li>字符流以字符为单位进行输入输出，适用于处理文本数据。字符流会自动处理字符编码和解码，而字节流则需要手动处理。这使得字符流在处理文本数据时更方便和高效，尤其是当涉及到国际化和本地化时、</li></ul></li><li>尽管字节流可以处理所有类型的数据，但为了更方便地处理文本数据，Java提供了字符流</li></ul><h2 id="bio、nio、aio" tabindex="-1"><a class="header-anchor" href="#bio、nio、aio" aria-hidden="true">#</a> BIO、NIO、AIO？</h2>',3),k=n("li",null,[n("p",null,"BIO"),n("ul",null,[n("li",null,"同步阻塞IO"),n("li",null,"客户端有连接请求时服务器端就需要启动一个线程进行处理（可以使用连接池优化）"),n("li",null,"JDK1.4之前的选择")])],-1),v=n("p",null,"NIO",-1),g=n("li",null,[n("p",null,"同步非阻塞IO")],-1),m=n("p",null,"服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有IO请求就进行处理",-1),b=n("p",null,"NIO工作原理",-1),h=n("ol",null,[n("li",null,"应用程序（A）通过选择器（B）发起连接请求"),n("li",null,"选择器（B）将通道（channel代表了服务端与客户端的连接）注册，使其成为监视对象，以便选择器可以监听多个通道的事件。"),n("li",null,"当有新的连接请求到达时，选择器（B）会处理这个事件，并将新的通道（C）加入到已注册的通道列表（D）中，以备后续操作。"),n("li",null,"选择器（B）不断监听通道列表（D）中通道的读写事件。"),n("li",null,"当某个通道（E）有读或写事件时，选择器（B）会将该通道标记为就绪状态，并执行相应的读取或写入操作。"),n("li",null,"读取或写入操作使用缓冲区（F）来处理数据，应用程序可以在缓冲区中读取或写入数据。")],-1),q=n("li",null,[n("p",null,"AIO"),n("ul",null,[n("li",null,"异步非阻塞IO"),n("li",null,"Java 的 NIO 就是 Reactor"),n("li",null,"当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知(回调)服务端程序启动线程去处理"),n("li",null,"一般适用于连接数较多且连接时间较长的应用")])],-1),j=e(`<h2 id="hutool之xmlutil反序列化漏洞" tabindex="-1"><a class="header-anchor" href="#hutool之xmlutil反序列化漏洞" aria-hidden="true">#</a> hutool之XmlUtil反序列化漏洞</h2><blockquote><ul><li>同样存在漏洞的方法还有IoUtil.readObject方法，存在反序列化漏洞，这些方法的漏洞在JDK中本身就存在，而且JDK的做法是要求用户自行检查内容，作为工具类，这块没法解决。</li><li>hutool在新版本中把这个方法拿掉了 <ul><li>【core 】 【重要】删除XmlUtil.readObjectFromXml方法，避免漏洞（issue#2855@Github）</li></ul></li></ul></blockquote><h3 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述" aria-hidden="true">#</a> 问题描述</h3><p>Hutool提供的XML实用程序类在使用XmlUtil.readObjectFromXml解析不受信任的XML字符串时可能容易受到远程代码执行的攻击</p><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InputSource</span> inputSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;java&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;    &lt;object class=\\&quot;java.lang.ProcessBuilder\\&quot;&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;array class=\\&quot;java.lang.String\\&quot; length=\\&quot;1\\&quot;&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;            &lt;void index=\\&quot;0\\&quot;&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;                &lt;string&gt;calc&lt;/string&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;            &lt;/void&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;/array&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;        &lt;void method=\\&quot;start\\&quot;&gt;&lt;/void&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;    &lt;/object&gt;\\n&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;&lt;/java&gt;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> result<span class="token punctuation">;</span>
        <span class="token class-name">XMLDecoder</span> xmldec <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            xmldec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLDecoder</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            result <span class="token operator">=</span> xmldec<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>xmldec<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://github.com/muchfish/blogs/assets/152949892/77e2bd39-eee7-4533-8359-f6d0ce5f9f59" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h3><p>这个XML片段描述了一个 <code>java.lang.ProcessBuilder</code> 对象的序列化表示，并且调用了它的 <code>start</code> 方法。以下是对该XML片段的详细解释：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.ProcessBuilder<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.String<span class="token punctuation">&quot;</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>calc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>start<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>根元素 <code>&lt;java&gt;</code></strong>:</li></ol><ul><li>包含整个Java对象序列化的描述。</li></ul><ol start="2"><li><strong>对象 <code>&lt;object class=&quot;java.lang.ProcessBuilder&quot;&gt;</code></strong>:</li></ol><ul><li>表示创建一个 <code>java.lang.ProcessBuilder</code> 对象。</li><li><code>class</code> 属性指定了要创建的对象的类，这里是 <code>java.lang.ProcessBuilder</code>。</li></ul><ol start="3"><li><strong>数组 <code>&lt;array class=&quot;java.lang.String&quot; length=&quot;1&quot;&gt;</code></strong>:</li></ol><ul><li>表示创建一个包含 <code>String</code> 对象的数组。</li><li><code>class</code> 属性指定数组元素的类型是 <code>java.lang.String</code>。</li><li><code>length</code> 属性指定数组的长度是 1。</li></ul><ol start="4"><li><strong>数组元素 <code>&lt;void index=&quot;0&quot;&gt;</code></strong>:</li></ol><ul><li>表示数组的第一个元素（索引为0）。</li><li>包含一个 <code>&lt;string&gt;</code> 元素，其值为 <code>calc</code>，表示要在 <code>ProcessBuilder</code> 中运行的命令是 <code>calc</code>。</li></ul><ol start="5"><li><strong>方法调用 <code>&lt;void method=&quot;start&quot;&gt;&lt;/void&gt;</code></strong>:</li></ol><ul><li>表示调用 <code>ProcessBuilder</code> 对象的 <code>start</code> 方法。</li><li><code>start</code> 方法启动由 <code>ProcessBuilder</code> 配置的进程（在这种情况下，启动计算器应用程序）。</li></ul><h3 id="用java代码展示等效的对象创建和方法调用" tabindex="-1"><a class="header-anchor" href="#用java代码展示等效的对象创建和方法调用" aria-hidden="true">#</a> 用Java代码展示等效的对象创建和方法调用</h3><p>等效的Java代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 ProcessBuilder 对象，并配置它启动 calc 命令</span>
        <span class="token class-name">ProcessBuilder</span> processBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;calc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 调用 start 方法，启动进程</span>
            <span class="token class-name">Process</span> process <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 检查进程是否在运行</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The process is running...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The process failed to start.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释</strong>:</p><ol><li><p><strong>创建 <code>ProcessBuilder</code> 对象</strong>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ProcessBuilder</span> processBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;calc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>调用 <code>start</code> 方法</strong>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Process</span> process <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>检查进程是否在运行</strong>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The process is running...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The process failed to start.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这个Java代码段执行的操作与XML描述的操作相同，创建了一个 <code>ProcessBuilder</code> 对象，配置它运行 <code>calc</code> 命令，并启动该命令。</p>`,26);function f(y,x){const s=l("Mermaid");return p(),c("div",null,[u,r,a(s,{id:"mermaid-32",code:"eJyNk91ygjAQhe99Cl7AV+gMiP8oVNradqcXQVelrQyNyYVvX0wyEESS5I7db8nuOZsjJeXJizYDrzoXnsnveVFyljKK5CwSt+ODFv3yhsMnL4BJ/ot62ESPIOCHA1Lcu1aEEBJGXOkxxNk37pgrP4HgytCnlFxdS6a3gRnSh/xUIDNI+OWUkd2PAZr3DyaBhVkrCS0hygtc83Nm7CiCFP84FruuU1jsB23nY8661q9AD0sp1sL7VtzIx/VE7jWJkMmdf1Yb4F6xaXbAvShVW/C4IhXMi6F1SbxaBJHUGyQ0LyymbZDskdaVW5AB2e27vsYq0YN+1C2ZuU8YnQgVqplB34fq3rw4WrAAkry03eqPxMpZoFCZc4/5ocyP6/fZR0y0Z6UzXd23NK9uan4wBRlRrcxau6NSvfS8Ft9GLhr5behS6W/jImmADVsJB2zUWu6sDYuVUzonNP4H8kf8dQ=="}),d,a(s,{id:"mermaid-80",code:"eJxLL0osyFDwCeLiUgCC4tIkiMDTdfOe92142jf/+YS2p5N6nnfufNawHKwEBJyiX87Y/XThvKd7+j39YxV0de0UapB1WCk8W9//ZMeqF/vnPetb+mTv/udTVjzZ0QAUeb5r//MV3TUKToYaEDOtFOBG6Sg83zMNKPtsxcKn87qfr2t42jtVE26na/TLufMIWQvUAbHh6ZIWkMuXzII4QQfE2r7+6ZJeoEtqFFyRbEcyVEfhaf/6Z50rn26cCpR7umcXwnaP6Kd7mp6tXYrDXogXIUqeTe59sncOMNCezp73YkNzjYIHwjaICh2FF1tbnu2a8LRjJVDX8772l6tnQKxKzUvhAgBM9N7t"}),n("ul",null,[k,n("li",null,[v,n("ul",null,[g,n("li",null,[m,n("ul",null,[n("li",null,[b,a(s,{id:"mermaid-123",code:"eJxVjb0KwjAURvc+xR11EB9AEOyPk6Co4FAcQrzVgiSSREHI5CoogrOb4CYOIrj4NLV9DPsTxd71fOfcqSCLGQzdhgXptfzoeYyPl/iyjZ77MdRqTR3tD8n9kbxO7905uT7et40Gu1IZ4Byp4qJaLVQ7H/dxGkqFQoPjOzPCGM7HBXdy3qIUFwocnhKqQs7S1r/fyWwGARfQRzKpj0SoELwVMiU1uN8mZDsTds3j8hq6lC5F6nh+htZgTGks72eBSxTR0PbtZRCgKPEiaAYFaOegJzhFKQ3yGpb1ATRzb6A="}),h])])])])]),q]),j])}const S=o(i,[["render",f],["__file","IO.html.vue"]]);export{S as default};
