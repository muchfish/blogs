const i=JSON.parse('{"key":"v-6e53a4e6","path":"/Java/congregation/List.html","title":"List","lang":"zh-CN","frontmatter":{"title":"List","order":2,"isTimeLine":true,"date":"2024-05-13T00:00:00.000Z","description":"ArrayList和LinkedList有什么区别？ 数据结构不同 ArrayList基于数组实现 LinkedList基于双向链表实现 多数情况下，ArrayList更利于查找，LinkedList更利于增删 查找速率 ArrayList基于数组实现，get(int index)可以直接通过数组下标获取，时间复杂度是O(1) LinkedList基于链表实现，get(int index)需要遍历链表，时间复杂度是O(n) get(E element)这种查找，两种集合都需要遍历，时间复杂度都是O(n) 增删速率 ArrayList增删如果是数组末尾的位置，直接插入或者删除就可以了，但是如果插入中间的位置，就需要把插入位置后的元素都向前或者向后移动，甚至还有可能触发扩容 双向链表的插入和删除只需要改变前驱节点、后继节点和插入节点的指向就行了，不需要移动元素 是否支持随机访问 ArrayList基于数组，所以它可以根据下标查找，支持随机访问 它也实现了RandmoAccess 接口，这个接口只是用来标识是否支持随机访问 LinkedList基于链表，所以它没法根据序号直接获取元素，它没有实现RandmoAccess 接口，标记不支持随机访问 内存占用 ArrayList基于数组，是一块连续的内存空间 ArrayList是预先定义好的数组，可能会有空的内存空间，存在一定空间浪费 LinkedList基于链表，内存空间不连续，它们在空间占用上都有一些额外的消耗 LinkedList每个节点，需要存储前驱和后继，所以每个节点会占用更多的空间","head":[["meta",{"property":"og:url","content":"https://muchfish.github.io/blogs/blogs/Java/congregation/List.html"}],["meta",{"property":"og:site_name","content":"鱼塘"}],["meta",{"property":"og:title","content":"List"}],["meta",{"property":"og:description","content":"ArrayList和LinkedList有什么区别？ 数据结构不同 ArrayList基于数组实现 LinkedList基于双向链表实现 多数情况下，ArrayList更利于查找，LinkedList更利于增删 查找速率 ArrayList基于数组实现，get(int index)可以直接通过数组下标获取，时间复杂度是O(1) LinkedList基于链表实现，get(int index)需要遍历链表，时间复杂度是O(n) get(E element)这种查找，两种集合都需要遍历，时间复杂度都是O(n) 增删速率 ArrayList增删如果是数组末尾的位置，直接插入或者删除就可以了，但是如果插入中间的位置，就需要把插入位置后的元素都向前或者向后移动，甚至还有可能触发扩容 双向链表的插入和删除只需要改变前驱节点、后继节点和插入节点的指向就行了，不需要移动元素 是否支持随机访问 ArrayList基于数组，所以它可以根据下标查找，支持随机访问 它也实现了RandmoAccess 接口，这个接口只是用来标识是否支持随机访问 LinkedList基于链表，所以它没法根据序号直接获取元素，它没有实现RandmoAccess 接口，标记不支持随机访问 内存占用 ArrayList基于数组，是一块连续的内存空间 ArrayList是预先定义好的数组，可能会有空的内存空间，存在一定空间浪费 LinkedList基于链表，内存空间不连续，它们在空间占用上都有一些额外的消耗 LinkedList每个节点，需要存储前驱和后继，所以每个节点会占用更多的空间"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-26T12:33:22.000Z"}],["meta",{"property":"article:author","content":"摸鱼散人"}],["meta",{"property":"article:published_time","content":"2024-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-26T12:33:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"List\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-26T12:33:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"摸鱼散人\\",\\"url\\":\\"https://github.com/muchfish\\"}]}"]]},"headers":[{"level":2,"title":"ArrayList和LinkedList有什么区别？","slug":"arraylist和linkedlist有什么区别","link":"#arraylist和linkedlist有什么区别","children":[]},{"level":2,"title":"ArrayList的扩容机制了解吗？","slug":"arraylist的扩容机制了解吗","link":"#arraylist的扩容机制了解吗","children":[]},{"level":2,"title":"ArrayList怎么序列化的知道吗？ 为什么用transient修饰数组？","slug":"arraylist怎么序列化的知道吗-为什么用transient修饰数组","link":"#arraylist怎么序列化的知道吗-为什么用transient修饰数组","children":[{"level":3,"title":"为什么最ArrayList不直接序列化元素数组呢？","slug":"为什么最arraylist不直接序列化元素数组呢","link":"#为什么最arraylist不直接序列化元素数组呢","children":[]},{"level":3,"title":"那ArrayList怎么序列化呢 ？","slug":"那arraylist怎么序列化呢","link":"#那arraylist怎么序列化呢","children":[]}]},{"level":2,"title":"快速失败(fail-fast)和安全失败(fail-safe)了解吗？","slug":"快速失败-fail-fast-和安全失败-fail-safe-了解吗","link":"#快速失败-fail-fast-和安全失败-fail-safe-了解吗","children":[]},{"level":2,"title":"实现ArrayList线程安全有哪几种方法？","slug":"实现arraylist线程安全有哪几种方法","link":"#实现arraylist线程安全有哪几种方法","children":[]},{"level":2,"title":"CopyOnWriteArrayList了解多少？","slug":"copyonwritearraylist了解多少","link":"#copyonwritearraylist了解多少","children":[]}],"git":{"createdTime":1719405202000,"updatedTime":1719405202000,"contributors":[{"name":"daiwencheng","email":"1319105206@qq.com","commits":1}]},"readingTime":{"minutes":6.83,"words":2049},"filePathRelative":"Java/congregation/List.md","localizedDate":"2024年5月13日","excerpt":"<h2> ArrayList和LinkedList有什么区别？</h2>\\n<ul>\\n<li>数据结构不同\\n<ul>\\n<li>ArrayList基于数组实现</li>\\n<li>LinkedList基于双向链表实现</li>\\n</ul>\\n</li>\\n<li>多数情况下，ArrayList更利于查找，LinkedList更利于增删\\n<ul>\\n<li>查找速率\\n<ul>\\n<li>ArrayList基于数组实现，get(int index)可以直接通过数组下标获取，时间复杂度是O(1)</li>\\n<li>LinkedList基于链表实现，get(int index)需要遍历链表，时间复杂度是O(n)</li>\\n<li>get(E element)这种查找，两种集合都需要遍历，时间复杂度都是O(n)</li>\\n</ul>\\n</li>\\n<li>增删速率\\n<ul>\\n<li>ArrayList增删如果是数组末尾的位置，直接插入或者删除就可以了，但是如果插入中间的位置，就需要把插入位置后的元素都向前或者向后移动，甚至还有可能触发扩容</li>\\n<li>双向链表的插入和删除只需要改变前驱节点、后继节点和插入节点的指向就行了，不需要移动元素</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>是否支持随机访问\\n<ul>\\n<li>ArrayList基于数组，所以它可以根据下标查找，支持随机访问\\n<ul>\\n<li>它也实现了RandmoAccess 接口，这个接口只是用来标识是否支持随机访问</li>\\n</ul>\\n</li>\\n<li>LinkedList基于链表，所以它没法根据序号直接获取元素，它没有实现RandmoAccess 接口，标记不支持随机访问</li>\\n</ul>\\n</li>\\n<li>内存占用\\n<ul>\\n<li>ArrayList基于数组，是一块连续的内存空间\\n<ul>\\n<li>ArrayList是预先定义好的数组，可能会有空的内存空间，存在一定空间浪费</li>\\n</ul>\\n</li>\\n<li>LinkedList基于链表，内存空间不连续，它们在空间占用上都有一些额外的消耗\\n<ul>\\n<li>LinkedList每个节点，需要存储前驱和后继，所以每个节点会占用更多的空间</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{i as data};
