const e=JSON.parse('{"key":"v-bacc6c9c","path":"/Java/congregation/Map.html","title":"Map","lang":"zh-CN","frontmatter":{"title":"Map","order":3,"isTimeLine":true,"date":"2024-05-13T00:00:00.000Z","description":"能说一下HashMap的数据结构吗？ 数组 + 链表（JDK1.7） 数组 + 链表 + 红黑树 （JDK1.8） 数据结构示意图 存储结构 HashMap内部使用一个数组（Entry[]）来存储数据 数组中的每个元素称为一个桶（Bucket），每个桶存储一个键值对（Entry） 哈希函数 HashMap使用键的哈希码（hash code）来计算存储位置 每个键值对根据哈希函数计算得到一个桶的索引，然后将键值对存储在该桶中 冲突处理 由于哈希函数的计算结果可能会出现冲突，即不同的键计算得到相同的桶索引 HashMap使用链表或红黑树来解决冲突 当桶中的元素较少时，使用链表存储键值对 当桶中的元素较多时，将链表转换为红黑树，以提高查找、插入和删除的效率","head":[["meta",{"property":"og:url","content":"https://muchfish.github.io/blogs/blogs/Java/congregation/Map.html"}],["meta",{"property":"og:site_name","content":"鱼塘"}],["meta",{"property":"og:title","content":"Map"}],["meta",{"property":"og:description","content":"能说一下HashMap的数据结构吗？ 数组 + 链表（JDK1.7） 数组 + 链表 + 红黑树 （JDK1.8） 数据结构示意图 存储结构 HashMap内部使用一个数组（Entry[]）来存储数据 数组中的每个元素称为一个桶（Bucket），每个桶存储一个键值对（Entry） 哈希函数 HashMap使用键的哈希码（hash code）来计算存储位置 每个键值对根据哈希函数计算得到一个桶的索引，然后将键值对存储在该桶中 冲突处理 由于哈希函数的计算结果可能会出现冲突，即不同的键计算得到相同的桶索引 HashMap使用链表或红黑树来解决冲突 当桶中的元素较少时，使用链表存储键值对 当桶中的元素较多时，将链表转换为红黑树，以提高查找、插入和删除的效率"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-26T12:33:22.000Z"}],["meta",{"property":"article:author","content":"摸鱼散人"}],["meta",{"property":"article:published_time","content":"2024-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-26T12:33:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Map\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-26T12:33:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"摸鱼散人\\",\\"url\\":\\"https://github.com/muchfish\\"}]}"]]},"headers":[{"level":2,"title":"能说一下HashMap的数据结构吗？","slug":"能说一下hashmap的数据结构吗","link":"#能说一下hashmap的数据结构吗","children":[]},{"level":2,"title":"你对红黑树了解多少？为什么不用二叉树/平衡树呢？","slug":"你对红黑树了解多少-为什么不用二叉树-平衡树呢","link":"#你对红黑树了解多少-为什么不用二叉树-平衡树呢","children":[{"level":3,"title":"什么是红黑树？","slug":"什么是红黑树","link":"#什么是红黑树","children":[]},{"level":3,"title":"为什么不用二叉树？","slug":"为什么不用二叉树","link":"#为什么不用二叉树","children":[]},{"level":3,"title":"为什么不用平衡二叉树？","slug":"为什么不用平衡二叉树","link":"#为什么不用平衡二叉树","children":[]}]},{"level":2,"title":"红黑树怎么保持平衡的知道吗？","slug":"红黑树怎么保持平衡的知道吗","link":"#红黑树怎么保持平衡的知道吗","children":[]},{"level":2,"title":"HashMap的put流程知道吗？","slug":"hashmap的put流程知道吗","link":"#hashmap的put流程知道吗","children":[]},{"level":2,"title":"HashMap怎么查找元素的呢？","slug":"hashmap怎么查找元素的呢","link":"#hashmap怎么查找元素的呢","children":[]},{"level":2,"title":"HashMap的哈希/扰动函数是怎么设计的?","slug":"hashmap的哈希-扰动函数是怎么设计的","link":"#hashmap的哈希-扰动函数是怎么设计的","children":[]},{"level":2,"title":"为什么哈希/扰动函数能降hash碰撞？","slug":"为什么哈希-扰动函数能降hash碰撞","link":"#为什么哈希-扰动函数能降hash碰撞","children":[]},{"level":2,"title":"为什么HashMap的容量是2的倍数呢？","slug":"为什么hashmap的容量是2的倍数呢","link":"#为什么hashmap的容量是2的倍数呢","children":[]},{"level":2,"title":"如果初始化HashMap，传一个17的值 new HashMap<> ，它会怎么处理？","slug":"如果初始化hashmap-传一个17的值-new-hashmap-它会怎么处理","link":"#如果初始化hashmap-传一个17的值-new-hashmap-它会怎么处理","children":[]},{"level":2,"title":"你还知道哪些哈希函数的构造方法呢？","slug":"你还知道哪些哈希函数的构造方法呢","link":"#你还知道哪些哈希函数的构造方法呢","children":[]},{"level":2,"title":"解决哈希冲突有哪些方法呢？","slug":"解决哈希冲突有哪些方法呢","link":"#解决哈希冲突有哪些方法呢","children":[]},{"level":2,"title":"为什么HashMap链表转红黑树的阈值为8呢？","slug":"为什么hashmap链表转红黑树的阈值为8呢","link":"#为什么hashmap链表转红黑树的阈值为8呢","children":[{"level":3,"title":"扩容在什么时候呢？为什么扩容因子是0.75？","slug":"扩容在什么时候呢-为什么扩容因子是0-75","link":"#扩容在什么时候呢-为什么扩容因子是0-75","children":[]},{"level":3,"title":"那么为什么选择了0.75作为HashMap的默认加载因子呢？","slug":"那么为什么选择了0-75作为hashmap的默认加载因子呢","link":"#那么为什么选择了0-75作为hashmap的默认加载因子呢","children":[]}]},{"level":2,"title":"HashMap扩容机制了解吗？","slug":"hashmap扩容机制了解吗","link":"#hashmap扩容机制了解吗","children":[]},{"level":2,"title":"JDK1.8对HashMap主要做了哪些优化呢？为什么？","slug":"jdk1-8对hashmap主要做了哪些优化呢-为什么","link":"#jdk1-8对hashmap主要做了哪些优化呢-为什么","children":[]},{"level":2,"title":"你能自己设计实现一个HashMap吗？","slug":"你能自己设计实现一个hashmap吗","link":"#你能自己设计实现一个hashmap吗","children":[]},{"level":2,"title":"HashMap 是线程安全的吗？多线程下会有什么问题？","slug":"hashmap-是线程安全的吗-多线程下会有什么问题","link":"#hashmap-是线程安全的吗-多线程下会有什么问题","children":[]},{"level":2,"title":"有什么办法能解决HashMap线程不安全的问题呢？","slug":"有什么办法能解决hashmap线程不安全的问题呢","link":"#有什么办法能解决hashmap线程不安全的问题呢","children":[]},{"level":2,"title":"能说一下ConcurrentHashmap的具体实现吗？","slug":"能说一下concurrenthashmap的具体实现吗","link":"#能说一下concurrenthashmap的具体实现吗","children":[{"level":3,"title":"JDK1.7：分段锁","slug":"jdk1-7-分段锁","link":"#jdk1-7-分段锁","children":[]},{"level":3,"title":"JDK1.8：CAS+synchronized","slug":"jdk1-8-cas-synchronized","link":"#jdk1-8-cas-synchronized","children":[]}]},{"level":2,"title":"HashMap 内部节点是有序的吗？","slug":"hashmap-内部节点是有序的吗","link":"#hashmap-内部节点是有序的吗","children":[]},{"level":2,"title":"讲讲 LinkedHashMap 怎么实现有序的？","slug":"讲讲-linkedhashmap-怎么实现有序的","link":"#讲讲-linkedhashmap-怎么实现有序的","children":[]},{"level":2,"title":"讲讲 TreeMap 怎么实现有序的？","slug":"讲讲-treemap-怎么实现有序的","link":"#讲讲-treemap-怎么实现有序的","children":[]}],"git":{"createdTime":1719405202000,"updatedTime":1719405202000,"contributors":[{"name":"daiwencheng","email":"1319105206@qq.com","commits":1}]},"readingTime":{"minutes":15.07,"words":4520},"filePathRelative":"Java/congregation/Map.md","localizedDate":"2024年5月13日","excerpt":"<h2> 能说一下HashMap的数据结构吗？</h2>\\n<ul>\\n<li>\\n<p>数组 + 链表（JDK1.7）</p>\\n</li>\\n<li>\\n<p>数组 + 链表 + 红黑树  （JDK1.8）</p>\\n</li>\\n<li>\\n<p>数据结构示意图</p>\\n<figure><figcaption></figcaption></figure>\\n<ul>\\n<li>存储结构\\n<ul>\\n<li>HashMap内部使用一个数组（Entry[]）来存储数据</li>\\n<li>数组中的每个元素称为一个桶（Bucket），每个桶存储一个键值对（Entry）</li>\\n</ul>\\n</li>\\n<li>哈希函数\\n<ul>\\n<li>HashMap使用键的哈希码（hash code）来计算存储位置</li>\\n<li>每个键值对根据哈希函数计算得到一个桶的索引，然后将键值对存储在该桶中</li>\\n</ul>\\n</li>\\n<li>冲突处理\\n<ul>\\n<li>由于哈希函数的计算结果可能会出现冲突，即不同的键计算得到相同的桶索引</li>\\n<li>HashMap使用链表或红黑树来解决冲突</li>\\n<li>当桶中的元素较少时，使用链表存储键值对</li>\\n<li>当桶中的元素较多时，将链表转换为红黑树，以提高查找、插入和删除的效率</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
