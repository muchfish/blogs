import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,f as t}from"./app-b29fba0e.js";const o={};function p(c,n){return a(),e("div",null,n[0]||(n[0]=[t(`<h2 id="讲一下distinct的语法" tabindex="-1"><a class="header-anchor" href="#讲一下distinct的语法" aria-hidden="true">#</a> 讲一下distinct的语法</h2><p><code>DISTINCT</code> 关键字在 SQL 中用于从结果集中去除重复的行。它可以用于单个字段，也可以用于多个字段。当用于多个字段时，只有当所有指定的字段的组合都相同时，才会被视为重复并去除。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h3><h4 id="单字段去重" tabindex="-1"><a class="header-anchor" href="#单字段去重" aria-hidden="true">#</a> 单字段去重</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1
<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个查询将返回表 <code>table_name</code> 中 <code>column1</code> 字段的唯一值。</p><h4 id="多字段去重" tabindex="-1"><a class="header-anchor" href="#多字段去重" aria-hidden="true">#</a> 多字段去重</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1<span class="token punctuation">,</span> column2
<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个查询将返回表 <code>table_name</code> 中 <code>column1</code> 和 <code>column2</code> 组合后的唯一值。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>假设有一个名为 <code>employees</code> 的表，包含以下数据：</p><table><thead><tr><th>id</th><th>first_name</th><th>last_name</th><th>department</th></tr></thead><tbody><tr><td>1</td><td>John</td><td>Doe</td><td>HR</td></tr><tr><td>2</td><td>Jane</td><td>Doe</td><td>IT</td></tr><tr><td>3</td><td>John</td><td>Smith</td><td>IT</td></tr><tr><td>4</td><td>John</td><td>Doe</td><td>HR</td></tr></tbody></table><h4 id="单字段去重示例" tabindex="-1"><a class="header-anchor" href="#单字段去重示例" aria-hidden="true">#</a> 单字段去重示例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> first_name
<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个查询将返回所有唯一的 <code>first_name</code>：</p><table><thead><tr><th>first_name</th></tr></thead><tbody><tr><td>John</td></tr><tr><td>Jane</td></tr></tbody></table><h4 id="多字段去重示例" tabindex="-1"><a class="header-anchor" href="#多字段去重示例" aria-hidden="true">#</a> 多字段去重示例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> first_name<span class="token punctuation">,</span> last_name
<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个查询将返回所有唯一的 <code>first_name</code> 和 <code>last_name</code> 的组合：</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>John</td><td>Doe</td></tr><tr><td>Jane</td><td>Doe</td></tr><tr><td>John</td><td>Smith</td></tr></tbody></table><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li><code>DISTINCT</code> 关键字适用于所有字段的组合。如果两个或多个行的所有字段都相同，则这些行被视为重复行。</li><li>当在多个字段上使用 <code>DISTINCT</code> 时，SQL 引擎会根据指定的字段组合来检查重复。</li><li>在大数据集上使用 <code>DISTINCT</code> 可能会影响性能，因为需要对结果进行去重操作。</li></ul><h3 id="在查询中使用-distinct" tabindex="-1"><a class="header-anchor" href="#在查询中使用-distinct" aria-hidden="true">#</a> 在查询中使用 <code>DISTINCT</code></h3><p>假设我们有一个查询，需要对多个字段进行去重，并且需要对结果进行排序和限制返回的行数。可以使用如下方式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> column1<span class="token punctuation">,</span> column2
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> some_condition
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> column1<span class="token punctuation">,</span> column2
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个查询将对 <code>column1</code> 和 <code>column2</code> 进行去重，然后按照指定的字段排序，最后限制返回的行数为 10。</p><h2 id="limit-语句和distinct哪个先执行" tabindex="-1"><a class="header-anchor" href="#limit-语句和distinct哪个先执行" aria-hidden="true">#</a> limit 语句和distinct哪个先执行</h2><p>在 SQL 查询的执行过程中，<code>DISTINCT</code> 会先于 <code>LIMIT</code> 执行。这意味着在应用 <code>LIMIT</code> 之前，查询会首先通过 <code>DISTINCT</code> 去除重复的行。</p><h3 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序" aria-hidden="true">#</a> 执行顺序</h3><ol><li><strong><code>FROM</code> 子句</strong> - 确定从哪个表或视图中选择数据。</li><li><strong><code>WHERE</code> 子句</strong> - 应用过滤条件，筛选出满足条件的行。</li><li>JOIN 子句 - 执行表的连接操作。</li><li><strong><code>GROUP BY</code> 子句</strong> - 对数据进行分组。</li><li><strong><code>HAVING</code> 子句</strong> - 筛选分组后的数据。</li><li><strong><code>SELECT</code> 子句</strong> - 选择要返回的列，同时可以包含 <code>DISTINCT</code> 去重操作。</li><li><strong><code>DISTINCT</code> 操作</strong> - 去除重复的行。</li><li><strong><code>ORDER BY</code> 子句</strong> - 对结果集进行排序。</li><li><strong><code>LIMIT</code> 子句</strong> - 限制返回的行数。</li></ol><h3 id="示例说明" tabindex="-1"><a class="header-anchor" href="#示例说明" aria-hidden="true">#</a> 示例说明</h3><p>假设有一个名为 <code>employees</code> 的表，包含以下数据：</p><table><thead><tr><th>id</th><th>first_name</th><th>last_name</th><th>department</th></tr></thead><tbody><tr><td>1</td><td>John</td><td>Doe</td><td>HR</td></tr><tr><td>2</td><td>Jane</td><td>Doe</td><td>IT</td></tr><tr><td>3</td><td>John</td><td>Smith</td><td>IT</td></tr><tr><td>4</td><td>John</td><td>Doe</td><td>HR</td></tr></tbody></table><h4 id="查询示例" tabindex="-1"><a class="header-anchor" href="#查询示例" aria-hidden="true">#</a> 查询示例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> first_name<span class="token punctuation">,</span> last_name
<span class="token keyword">FROM</span> employees
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> last_name
<span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行顺序如下：</p><ol><li><p><strong>FROM 子句</strong> - 读取 <code>employees</code> 表中的所有数据。</p></li><li><p><strong>SELECT 子句</strong> - 选择 <code>first_name</code> 和 <code>last_name</code> 列。</p></li><li><p><strong>DISTINCT 操作</strong> - 去除重复的 <code>first_name</code> 和 <code>last_name</code> 组合。结果为：</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>John</td><td>Doe</td></tr><tr><td>Jane</td><td>Doe</td></tr><tr><td>John</td><td>Smith</td></tr></tbody></table></li><li><p><strong>ORDER BY 子句</strong> - 按 <code>last_name</code> 排序。结果为：</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>John</td><td>Doe</td></tr><tr><td>Jane</td><td>Doe</td></tr><tr><td>John</td><td>Smith</td></tr></tbody></table></li><li><p><strong>LIMIT 子句</strong> - 限制返回的行数为 2。最终结果为：</p><table><thead><tr><th>first_name</th><th>last_name</th></tr></thead><tbody><tr><td>John</td><td>Doe</td></tr><tr><td>Jane</td><td>Doe</td></tr></tbody></table></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>在 SQL 查询中，<code>DISTINCT</code> 操作在 <code>LIMIT</code> 之前执行。这意味着查询首先会去除重复的行，然后对去重后的结果集应用 <code>LIMIT</code> 限制返回的行数。</p><h2 id="使用sql判断两表的关联关系" tabindex="-1"><a class="header-anchor" href="#使用sql判断两表的关联关系" aria-hidden="true">#</a> 使用SQL判断两表的关联关系</h2><p>在数据库开发和数据分析中，理解两个表之间的关系是非常重要的。常见的关系类型包括一对一、一对多、多对一和多对多。通过 SQL 查询，我们可以方便地检测和确认这些关系。本文将介绍一个 SQL 查询，它可以帮助我们判断两个表之间的关联关系。</p><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3><p>假设我们有两个表 <code>tab_a</code> 和 <code>tab_b</code>，它们通过一个关联字段（例如 <code>关联id</code>）进行关联。我们需要确定 <code>tab_a</code> 和 <code>tab_b</code> 之间的关系类型。</p><h3 id="查询结构" tabindex="-1"><a class="header-anchor" href="#查询结构" aria-hidden="true">#</a> 查询结构</h3><p>为了实现这个目标，我们可以使用 SQL 的 <code>WITH</code> 语句（即公用表表达式，CTE）来创建两个子查询，然后根据这些子查询的结果来判断关系类型。</p><p>以下是完整的 SQL 查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> aToMany <span class="token keyword">AS</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
           <span class="token function">COUNT</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> acount
    <span class="token keyword">FROM</span> tab_a a
    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_b b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>关联id <span class="token operator">=</span> b<span class="token punctuation">.</span>关联id
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>id
    <span class="token keyword">HAVING</span> acount <span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
bToMany <span class="token keyword">AS</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> b<span class="token punctuation">.</span>id <span class="token keyword">AS</span> id<span class="token punctuation">,</span>
           <span class="token function">COUNT</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> bcount
    <span class="token keyword">FROM</span> tab_b b
    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_a a <span class="token keyword">ON</span> a<span class="token punctuation">.</span>关联id <span class="token operator">=</span> b<span class="token punctuation">.</span>关联id
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>id
    <span class="token keyword">HAVING</span> bcount <span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> <span class="token keyword">CASE</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：一对一&#39;</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：一对多&#39;</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：多对一&#39;</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：多对多&#39;</span>
           <span class="token keyword">ELSE</span> <span class="token string">&#39;未知关系&#39;</span>
       <span class="token keyword">END</span> <span class="token keyword">AS</span> relationship<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化一下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> aToMany <span class="token keyword">AS</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
           <span class="token function">COUNT</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> acount
    <span class="token keyword">FROM</span> tab_a a
             <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> tab_b b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>关联id <span class="token operator">=</span> b<span class="token punctuation">.</span>关联id
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>id
    <span class="token keyword">HAVING</span> acount <span class="token operator">&gt;</span> <span class="token number">1</span>
    <span class="token keyword">LIMIT</span> <span class="token number">3</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
     bToMany <span class="token keyword">AS</span> <span class="token punctuation">(</span>
         <span class="token keyword">SELECT</span> b<span class="token punctuation">.</span>id <span class="token keyword">AS</span> id<span class="token punctuation">,</span>
                <span class="token function">COUNT</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> bcount
         <span class="token keyword">FROM</span> tab_b b
                  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> tab_a a <span class="token keyword">ON</span> a<span class="token punctuation">.</span>关联id <span class="token operator">=</span> b<span class="token punctuation">.</span>关联id
         <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>id
         <span class="token keyword">HAVING</span> bcount <span class="token operator">&gt;</span> <span class="token number">1</span>
         <span class="token keyword">LIMIT</span> <span class="token number">3</span>
     <span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> <span class="token keyword">CASE</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：一对一&#39;</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：一对多&#39;</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：多对一&#39;</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：多对多&#39;</span>
           <span class="token keyword">ELSE</span> <span class="token string">&#39;未知关系&#39;</span>
           <span class="token keyword">END</span> <span class="token keyword">AS</span> relationship<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="详细解释" tabindex="-1"><a class="header-anchor" href="#详细解释" aria-hidden="true">#</a> 详细解释</h3><ol><li><p><strong>aToMany 子查询</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> aToMany <span class="token keyword">AS</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
           <span class="token function">COUNT</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> acount
    <span class="token keyword">FROM</span> tab_a a
    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_b b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>关联id <span class="token operator">=</span> b<span class="token punctuation">.</span>关联id
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>id
    <span class="token keyword">HAVING</span> acount <span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个子查询计算了 <code>tab_a</code> 中每个 <code>id</code> 对应的记录数。如果某个 <code>id</code> 对应的记录数大于 1，则说明 <code>tab_a</code> 中存在一个对 <code>tab_b</code> 的多对一关系。</p></li><li><p><strong>bToMany 子查询</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>bToMany <span class="token keyword">AS</span> <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span> b<span class="token punctuation">.</span>id <span class="token keyword">AS</span> id<span class="token punctuation">,</span>
           <span class="token function">COUNT</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> bcount
    <span class="token keyword">FROM</span> tab_b b
    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_a a <span class="token keyword">ON</span> a<span class="token punctuation">.</span>关联id <span class="token operator">=</span> b<span class="token punctuation">.</span>关联id
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>id
    <span class="token keyword">HAVING</span> bcount <span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个子查询计算了 <code>tab_b</code> 中每个 <code>id</code> 对应的记录数。如果某个 <code>id</code> 对应的记录数大于 1，则说明 <code>tab_b</code> 中存在一个对 <code>tab_a</code> 的多对一关系。</p></li><li><p><strong>关系判断</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：一对一&#39;</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：一对多&#39;</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：多对一&#39;</span>
           <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> aToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> bToMany<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">&#39;a比b：多对多&#39;</span>
           <span class="token keyword">ELSE</span> <span class="token string">&#39;未知关系&#39;</span>
       <span class="token keyword">END</span> <span class="token keyword">AS</span> relationship<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们通过一个 <code>CASE</code> 语句来判断和返回两个表之间的关系。具体判断逻辑如下：</p><ul><li>如果 <code>aToMany</code> 和 <code>bToMany</code> 都没有记录，则说明是 <code>一对一</code> 关系。</li><li>如果只有 <code>aToMany</code> 有记录，则说明是 <code>一对多</code> 关系。</li><li>如果只有 <code>bToMany</code> 有记录，则说明是 <code>多对一</code> 关系。</li><li>如果 <code>aToMany</code> 和 <code>bToMany</code> 都有记录，则说明是 <code>多对多</code> 关系。</li><li>如果上述情况都不满足，则返回 <code>未知关系</code>。</li></ul></li></ol><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>通过上述 SQL 查询，我们可以清晰地判断两个表之间的关联关系。这个方法利用了公用表表达式（CTE）和聚合函数，使得查询逻辑清晰易懂。希望这篇博客能帮助你更好地理解和使用 SQL 来分析表之间的关系。</p><hr><h2 id="cte递归查询" tabindex="-1"><a class="header-anchor" href="#cte递归查询" aria-hidden="true">#</a> CTE递归查询</h2><h3 id="语法详解-递归-sql-的组成部分" tabindex="-1"><a class="header-anchor" href="#语法详解-递归-sql-的组成部分" aria-hidden="true">#</a> <strong>语法详解：递归 SQL 的组成部分</strong></h3><p>以下从 <strong>语法结构</strong> 和 <strong>执行逻辑</strong> 两个维度，逐步解析该递归 SQL 的每个关键部分：</p><hr><h4 id="_1-with-recursive-子句" tabindex="-1"><a class="header-anchor" href="#_1-with-recursive-子句" aria-hidden="true">#</a> <strong>1. <code>WITH RECURSIVE</code> 子句</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> RECURSIVE subtree <span class="token keyword">AS</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>作用</strong>：<br> 定义一个递归的公共表表达式（CTE），命名为 <code>subtree</code>。<code>RECURSIVE</code> 关键字表示该 CTE 包含递归逻辑。</li><li><strong>语法要求</strong>： <ul><li>必须包含至少一个 <strong>锚点成员（Anchor Member）</strong> 和 <strong>递归成员（Recursive Member）</strong>，用 <code>UNION ALL</code> 连接。</li><li>递归成员必须引用 CTE 自身（即 <code>subtree</code>）。</li></ul></li></ul><hr><h4 id="_2-锚点成员-anchor-member" tabindex="-1"><a class="header-anchor" href="#_2-锚点成员-anchor-member" aria-hidden="true">#</a> <strong>2. 锚点成员（Anchor Member）</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> node_id<span class="token punctuation">,</span> ancestors
<span class="token keyword">FROM</span> uniform_resource
<span class="token keyword">WHERE</span> node_id <span class="token operator">=</span> <span class="token comment">#{nodeId}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>作用</strong>：<br> 初始化递归的起点，即获取目标节点（<code>nodeId</code>）的 <code>node_id</code> 和 <code>ancestors</code>。</li><li><strong>语法解析</strong>： <ul><li>普通 <code>SELECT</code> 查询，无递归。</li><li>结果作为递归的初始数据集。</li></ul></li></ul><hr><h4 id="_3-递归成员-recursive-member" tabindex="-1"><a class="header-anchor" href="#_3-递归成员-recursive-member" aria-hidden="true">#</a> <strong>3. 递归成员（Recursive Member）</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ur<span class="token punctuation">.</span>node_id<span class="token punctuation">,</span> ur<span class="token punctuation">.</span>ancestors
<span class="token keyword">FROM</span> uniform_resource ur
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> subtree <span class="token keyword">ON</span> ur<span class="token punctuation">.</span>ancestors <span class="token operator">=</span> CONCAT<span class="token punctuation">(</span>subtree<span class="token punctuation">.</span>ancestors<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> subtree<span class="token punctuation">.</span>node_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>作用</strong>：<br> 基于锚点成员的结果，逐层递归查找子节点。</li><li><strong>语法解析</strong>： <ul><li><strong><code>INNER JOIN subtree</code></strong>：引用 CTE 自身（<code>subtree</code>），表示基于前一次递归的结果继续查询。</li><li><strong><code>CONCAT(subtree.ancestors, &#39;,&#39;, subtree.node_id)</code></strong>：拼接父节点的路径，生成子节点的 <code>ancestors</code> 模式。<br> 例如：父节点 <code>ancestors=&#39;1,10&#39;, node_id=100</code> → 子节点 <code>ancestors=&#39;1,10,100&#39;</code>。</li><li><strong>终止条件</strong>：当递归成员不再产生新数据时，递归停止。</li></ul></li></ul><hr><h4 id="_4-union-all-操作" tabindex="-1"><a class="header-anchor" href="#_4-union-all-操作" aria-hidden="true">#</a> <strong>4. <code>UNION ALL</code> 操作</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>作用</strong>：<br> 合并锚点成员和递归成员的结果集。</li><li><strong>语法要求</strong>： <ul><li>必须使用 <code>UNION ALL</code>（而非 <code>UNION</code>），保留重复数据。</li><li>递归成员不能包含聚合函数、<code>GROUP BY</code> 或 <code>ORDER BY</code>。</li></ul></li></ul><hr><h4 id="_5-主查询-main-query" tabindex="-1"><a class="header-anchor" href="#_5-主查询-main-query" aria-hidden="true">#</a> <strong>5. 主查询（Main Query）</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>dm<span class="token punctuation">.</span>id<span class="token punctuation">)</span> 
<span class="token keyword">FROM</span> subtree mch
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> device_merchant dm <span class="token keyword">ON</span> dm<span class="token punctuation">.</span>merchantId <span class="token operator">=</span> mch<span class="token punctuation">.</span>merchant_id
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> device d <span class="token keyword">ON</span> d<span class="token punctuation">.</span>id <span class="token operator">=</span> dm<span class="token punctuation">.</span>deviceId <span class="token operator">AND</span> d<span class="token punctuation">.</span>isDeleted <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">WHERE</span> mch<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>作用</strong>：<br> 从递归生成的 <code>subtree</code> 中统计有效设备数。</li><li><strong>语法解析</strong>： <ul><li><strong><code>FROM subtree mch</code></strong>：将递归 CTE 的最终结果作为临时表 <code>mch</code>。</li><li><strong><code>INNER JOIN</code></strong>：关联设备相关表，过滤无效设备（<code>d.isDeleted = 0</code>）。</li><li><strong><code>WHERE mch.type = 2</code></strong>：筛选类型为商户的节点。</li><li><strong><code>COUNT(dm.id)</code></strong>：统计符合条件的设备总数。</li></ul></li></ul><hr><h3 id="递归执行流程-分步图解" tabindex="-1"><a class="header-anchor" href="#递归执行流程-分步图解" aria-hidden="true">#</a> <strong>递归执行流程（分步图解）</strong></h3><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>      递归 CTE 执行过程
      +---------------------+
      | 初始查询（锚点成员） | → 获取 nodeId=200 的节点
      +---------------------+
                 ↓
      +---------------------+
      | 递归成员第一次执行   | → 查找 ancestors=&#39;1,10,100,200&#39; 的子节点
      +---------------------+
                 ↓
      +---------------------+
      | 递归成员第二次执行   | → 查找 ancestors=&#39;1,10,100,200,201&#39; 的子节点
      +---------------------+
                 ↓
              ...（直到无新数据）
                 ↓
      +---------------------+
      | 合并所有结果集       | → UNION ALL 生成完整的 subtree
      +---------------------+
                 ↓
      +---------------------+
      | 主查询统计设备数     | → 关联设备表并过滤
      +---------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="语法注意事项" tabindex="-1"><a class="header-anchor" href="#语法注意事项" aria-hidden="true">#</a> <strong>语法注意事项</strong></h3><ol><li><p><strong>递归成员的限制</strong>：</p><ul><li>不能直接引用其他 CTE（除非在 <code>WITH</code> 子句中定义）。</li><li>必须通过 <code>UNION ALL</code> 合并锚点和递归成员。</li></ul></li><li><p><strong>终止条件隐式依赖</strong>：</p><ul><li>递归终止依赖于递归成员不再生成新数据（而非显式的 <code>WHERE</code> 条件）。</li></ul></li><li><p><strong>字段一致性</strong>：</p><ul><li>锚点成员和递归成员的字段数量、类型必须一致。</li></ul></li></ol><hr><h3 id="对比非递归语法" tabindex="-1"><a class="header-anchor" href="#对比非递归语法" aria-hidden="true">#</a> <strong>对比非递归语法</strong></h3><h4 id="原方法-使用-like" tabindex="-1"><a class="header-anchor" href="#原方法-使用-like" aria-hidden="true">#</a> <strong>原方法（使用 <code>LIKE</code>）</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WHERE</span> mch<span class="token punctuation">.</span>ancestors <span class="token operator">LIKE</span> CONCAT<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">&#39;%&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>缺点</strong>：路径匹配低效，无法利用索引优化。</li></ul><h4 id="递归方法" tabindex="-1"><a class="header-anchor" href="#递归方法" aria-hidden="true">#</a> <strong>递归方法</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> RECURSIVE subtree <span class="token keyword">AS</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>优点</strong>： <ul><li>精准逐层遍历，避免全表扫描。</li><li>天然支持动态层级，代码更易维护。</li></ul></li></ul><hr><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> <strong>总结</strong></h3><p>此 SQL 通过 <code>WITH RECURSIVE</code> 语法实现了树形结构的递归遍历，核心步骤为：</p><ol><li><strong>锚点成员</strong> 初始化目标节点。</li><li><strong>递归成员</strong> 逐层展开子节点。</li><li><strong>主查询</strong> 统计最终结果。</li></ol><p>递归语法在 <strong>处理层级数据</strong> 时比传统 <code>LIKE</code> 更高效、更清晰，但需数据库支持（如 MySQL 8.0+）。</p>`,96)]))}const i=s(o,[["render",p],["__file","基础.html.vue"]]);export{i as default};
