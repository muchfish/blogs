const a=JSON.parse('{"key":"v-9eb56fc8","path":"/Java/concurrent/ThreadLocal.html","title":"ThreadLocal","lang":"zh-CN","frontmatter":{"title":"ThreadLocal","order":2,"isTimeLine":true,"date":"2024-05-13T00:00:00.000Z","description":"ThreadLocal是什么？ ThreadLocal，也就是线程本地变量 创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝 多个线程操作这个变量的时候，实际是操作自己本地内存里面的变量，从而起到线程隔离的作用，避免了线程 安全问题 创建 创建了一个ThreadLoca变量localVariable，任何一个线程都能并发访问localVariable。 //创建一个ThreadLocal变量 public static ThreadLocal&lt;String&gt; localVariable = new ThreadLocal&lt;&gt;(); 写入 线程可以在任何地方使用localVariable，写入变量 localVariable.set(\\"鄙人张三”); 读取 线程在任何地方读取的都是它写入的变量。 localVariable.get();","head":[["meta",{"property":"og:url","content":"https://muchfish.github.io/blogs/blogs/Java/concurrent/ThreadLocal.html"}],["meta",{"property":"og:site_name","content":"鱼塘"}],["meta",{"property":"og:title","content":"ThreadLocal"}],["meta",{"property":"og:description","content":"ThreadLocal是什么？ ThreadLocal，也就是线程本地变量 创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝 多个线程操作这个变量的时候，实际是操作自己本地内存里面的变量，从而起到线程隔离的作用，避免了线程 安全问题 创建 创建了一个ThreadLoca变量localVariable，任何一个线程都能并发访问localVariable。 //创建一个ThreadLocal变量 public static ThreadLocal&lt;String&gt; localVariable = new ThreadLocal&lt;&gt;(); 写入 线程可以在任何地方使用localVariable，写入变量 localVariable.set(\\"鄙人张三”); 读取 线程在任何地方读取的都是它写入的变量。 localVariable.get();"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-26T12:33:22.000Z"}],["meta",{"property":"article:author","content":"摸鱼散人"}],["meta",{"property":"article:published_time","content":"2024-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-26T12:33:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreadLocal\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-26T12:33:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"摸鱼散人\\",\\"url\\":\\"https://github.com/muchfish\\"}]}"]]},"headers":[{"level":2,"title":"ThreadLocal是什么？","slug":"threadlocal是什么","link":"#threadlocal是什么","children":[]},{"level":2,"title":"你在工作中用到过ThreadLocal吗？","slug":"你在工作中用到过threadlocal吗","link":"#你在工作中用到过threadlocal吗","children":[]},{"level":2,"title":"ThreadLocal怎么实现的呢？","slug":"threadlocal怎么实现的呢","link":"#threadlocal怎么实现的呢","children":[]},{"level":2,"title":"ThreadLocal 内存泄露是怎么回事？","slug":"threadlocal-内存泄露是怎么回事","link":"#threadlocal-内存泄露是怎么回事","children":[{"level":3,"title":"那怎么解决内存泄漏问题呢？","slug":"那怎么解决内存泄漏问题呢","link":"#那怎么解决内存泄漏问题呢","children":[]},{"level":3,"title":"为什么key还要设计成弱引用？","slug":"为什么key还要设计成弱引用","link":"#为什么key还要设计成弱引用","children":[]}]},{"level":2,"title":"ThreadLocalMap的结构了解吗？","slug":"threadlocalmap的结构了解吗","link":"#threadlocalmap的结构了解吗","children":[]},{"level":2,"title":"ThreadLocalMap怎么解决Hash冲突的？","slug":"threadlocalmap怎么解决hash冲突的","link":"#threadlocalmap怎么解决hash冲突的","children":[]},{"level":2,"title":"ThreadLocalMap扩容机制了解吗？","slug":"threadlocalmap扩容机制了解吗","link":"#threadlocalmap扩容机制了解吗","children":[]},{"level":2,"title":"父子线程怎么共享数据？","slug":"父子线程怎么共享数据","link":"#父子线程怎么共享数据","children":[{"level":3,"title":"InheritableThreadLocal原理是什么呢？","slug":"inheritablethreadlocal原理是什么呢","link":"#inheritablethreadlocal原理是什么呢","children":[]},{"level":3,"title":"还有什么其它办法？TTL？","slug":"还有什么其它办法-ttl","link":"#还有什么其它办法-ttl","children":[]}]}],"git":{"createdTime":1719405202000,"updatedTime":1719405202000,"contributors":[{"name":"daiwencheng","email":"1319105206@qq.com","commits":1}]},"readingTime":{"minutes":5.47,"words":1642},"filePathRelative":"Java/concurrent/ThreadLocal.md","localizedDate":"2024年5月13日","excerpt":"<h2> ThreadLocal是什么？</h2>\\n<ul>\\n<li>\\n<p>ThreadLocal，也就是线程本地变量</p>\\n<ul>\\n<li>创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的一个本地拷贝</li>\\n<li>多个线程操作这个变量的时候，实际是操作自己本地内存里面的变量，从而起到线程隔离的作用，避免了线程<br>\\n安全问题</li>\\n</ul>\\n</li>\\n<li>\\n<p>创建</p>\\n<ul>\\n<li>\\n<p>创建了一个ThreadLoca变量localVariable，任何一个线程都能并发访问localVariable。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">//创建一个ThreadLocal变量</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">ThreadLocal</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> localVariable <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ThreadLocal</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>写入</p>\\n<ul>\\n<li>\\n<p>线程可以在任何地方使用localVariable，写入变量</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>localVariable<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>\\"鄙人张三”<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>读取</p>\\n<ul>\\n<li>\\n<p>线程在任何地方读取的都是它写入的变量。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code> localVariable<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{a as data};
