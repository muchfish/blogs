const a=JSON.parse('{"key":"v-9ab718ba","path":"/Java%E9%9D%A2%E8%AF%95/Java%E5%9F%BA%E7%A1%80/%E6%B3%9B%E5%9E%8B.html","title":"9.泛型","lang":"zh-CN","frontmatter":{"title":"9.泛型","isTimeLine":true,"date":"2024-05-12T00:00:00.000Z","description":"什么是泛型？ 用于在编译时期提供类型安全的参数化类型 Java泛型是Java 5引入的一个特性 通过使用泛型，可以在编写代码时指定类、接口或方法的参数和返回值的类型，从而增加代码的可读性和安全性 泛型的使用方法？ 泛型类 public class ClassName &lt;T&gt; 泛型接口 public interface InterfaceName &lt;T&gt; 泛型方法 public static &lt;T&gt; ReturnType functionName public &lt;T&gt; ReturnType functionName(T arg)","head":[["meta",{"property":"og:url","content":"https://muchfish.github.io/blogs/blogs/Java%E9%9D%A2%E8%AF%95/Java%E5%9F%BA%E7%A1%80/%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"鱼塘"}],["meta",{"property":"og:title","content":"9.泛型"}],["meta",{"property":"og:description","content":"什么是泛型？ 用于在编译时期提供类型安全的参数化类型 Java泛型是Java 5引入的一个特性 通过使用泛型，可以在编写代码时指定类、接口或方法的参数和返回值的类型，从而增加代码的可读性和安全性 泛型的使用方法？ 泛型类 public class ClassName &lt;T&gt; 泛型接口 public interface InterfaceName &lt;T&gt; 泛型方法 public static &lt;T&gt; ReturnType functionName public &lt;T&gt; ReturnType functionName(T arg)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-12T12:13:35.000Z"}],["meta",{"property":"article:author","content":"摸鱼散人"}],["meta",{"property":"article:published_time","content":"2024-05-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-12T12:13:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9.泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-12T12:13:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"摸鱼散人\\",\\"url\\":\\"https://github.com/muchfish\\"}]}"]]},"headers":[{"level":2,"title":"什么是泛型？","slug":"什么是泛型","link":"#什么是泛型","children":[]},{"level":2,"title":"泛型的使用方法？","slug":"泛型的使用方法","link":"#泛型的使用方法","children":[]},{"level":2,"title":"泛型常用的通配符有哪些？","slug":"泛型常用的通配符有哪些","link":"#泛型常用的通配符有哪些","children":[]},{"level":2,"title":"什么是泛型擦除？","slug":"什么是泛型擦除","link":"#什么是泛型擦除","children":[]}],"git":{"createdTime":1715516015000,"updatedTime":1715516015000,"contributors":[{"name":"daiwencheng","email":"1319105206@qq.com","commits":1}]},"readingTime":{"minutes":0.97,"words":290},"filePathRelative":"Java面试/Java基础/泛型.md","localizedDate":"2024年5月12日","excerpt":"<h2> 什么是泛型？</h2>\\n<ul>\\n<li>用于在编译时期提供类型安全的参数化类型\\n<ul>\\n<li>Java泛型是Java 5引入的一个特性</li>\\n</ul>\\n</li>\\n<li>通过使用泛型，可以在编写代码时指定类、接口或方法的参数和返回值的类型，从而增加代码的可读性和安全性</li>\\n</ul>\\n<h2> 泛型的使用方法？</h2>\\n<ul>\\n<li>\\n<p>泛型类</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ClassName</span> <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>泛型接口</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">InterfaceName</span> <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>泛型方法</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">ReturnType</span> functionName\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token class-name\\">ReturnType</span> <span class=\\"token function\\">functionName</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> arg<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}');export{a as data};
