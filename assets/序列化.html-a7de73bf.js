import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,f as e}from"./app-84584dcf.js";const r={},s=e('<h2 id="什么是序列化-什么是反序列化" tabindex="-1"><a class="header-anchor" href="#什么是序列化-什么是反序列化" aria-hidden="true">#</a> 什么是序列化？什么是反序列化？</h2><ul><li>序列化 <ul><li>把Java对象转为二进制流，方便存储和传输</li></ul></li><li>反序列化 <ul><li>把二进制流恢复成对象</li></ul></li><li>Serializable接口有什么用？ <ul><li>用于标识类可以被序列化</li><li>实现Serializable接口的类可以将对象转换为字节流进行传输和存储，实现数据的持久化和<br> 跨平台的数据交换</li></ul></li><li>serialVersionUID 又有什么用 <ul><li>版本控制 <ul><li>当一个类被序列化后，如果后续对该类进行了修改，例如添加、删除或修改了类的属性、方法等，那么序列化和反序列化时可能会出现版本不一致的问题。为了避免这种问题，可以在类中显式地定义serialVersionUID字段，并确保在类的修改后，serialVersionUID的值保持不变。当反序列化时，会比较序列化类的版本号和当前类的版本号是否一致，如果不一致，则会抛出InvalidClassException异常</li></ul></li><li>兼容性 <ul><li>当一个类的实例被序列化后，如果在后续的版本中对该类进行了修改，但是仍然希望能够反序列化之前的序列化数据，那么可以通过显式地指定serialVersionUID来保持兼容性。如果新版本的类和旧版本的类具有相同的serialVersionUID，那么即使类的结构发生了变化，仍然可以成功反序列化之前的序列化数据</li></ul></li></ul></li><li>Java 序列化不包含静态变量 <ul><li>Java序列化只会保存对象的非静态成员变量，不包含静态变量</li><li>静态变量属于类的状态信息，在序列化时不需要保存</li></ul></li><li>如果有些变量不想序列化，怎么办？ <ul><li>使用 transient 关键字修饰</li><li>transient 关键字的作用 <ul><li>阻止实例中那些用此关键字修饰的的变量序列化</li><li>当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复</li></ul></li><li>transient 只能修饰变量，不能修饰类和方法</li></ul></li></ul><h2 id="说说有哪些常见的序列化方式" tabindex="-1"><a class="header-anchor" href="#说说有哪些常见的序列化方式" aria-hidden="true">#</a> 说说有哪些常见的序列化方式？</h2><ul><li>Java对象流序列化 <ul><li>Java对象流序列化是Java标准库提供的一种序列化方式</li><li>通过实现Serializable接口和Externalizable接口来实现对象的序列化和反序列化</li><li>Java序列化可以将对象序列化为字节流，也可以将对象序列化为JSON、XML等格式</li></ul></li><li>JSON序列化 <ul><li>是一种轻量级的数据交换格式，常用于Web应用中</li><li>Java中可以使用第三方库，如Jackson、Gson等，将对象序列化为JSON格式，也可以将JSON格式的数据反序列化为Java对象</li></ul></li><li>XML序列化 <ul><li>XML（Extensible Markup Language）是一种标记语言，常用于Web应用中</li><li>Java中可以使用第三方库，如JAXB、XStream等，将对象序列化为XML格式，也可以将XML格式的数据反序列化为Java对象</li></ul></li><li>Protobuf序列化 <ul><li>Protobuf（Protocol Buffers）是Google开发的一种高效的序列化协议</li><li>可以将结构化的数据序列化为紧凑的二进制格式</li><li>Java中可以使用Google提供的protobuf-java库，将对象序列化为Protobuf格式，也可以将Protobuf格式的数据反序列化为Java对象</li></ul></li><li>Hessian序列化 <ul><li>Hessian是一种基于HTTP的轻量级二进制序列化协议</li><li>可以将Java对象序列化为二进制格式，并通过HTTP协议进行传输</li><li>Java中可以使用第三方库，如Hessian、Dubbo等，将对象序列化为Hessian格式，也可以将Hessian格式<br> 的数据反序列化为Java对象</li></ul></li></ul>',4),u=[s];function o(n,t){return i(),a("div",null,u)}const v=l(r,[["render",o],["__file","序列化.html.vue"]]);export{v as default};
