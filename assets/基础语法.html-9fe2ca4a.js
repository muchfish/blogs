import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as a,f as i}from"./app-d0d8d1e8.js";const l={},e=i('<h2 id="java有哪些数据类型" tabindex="-1"><a class="header-anchor" href="#java有哪些数据类型" aria-hidden="true">#</a> Java有哪些数据类型？</h2><ul><li><p>基本数据类型</p><ul><li>数值型 <ul><li>整数类型（byte、short、int、long）</li><li>浮点类型（float、double）</li></ul></li><li>字符型（char）</li><li>布尔型（boolean）</li></ul><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>int</td><td>32</td><td>4</td><td>0</td><td>-2^31</td><td>2^31-1</td></tr><tr><td>short</td><td>16</td><td>2</td><td>0</td><td>-2^15</td><td>2^15-1</td></tr><tr><td>long</td><td>64</td><td>8</td><td>0L</td><td>-2^63</td><td>2^63-1</td></tr><tr><td>byte</td><td>8</td><td>1</td><td>0</td><td>-128</td><td>127</td></tr><tr><td>char</td><td>16</td><td>2</td><td>&#39;\\u0000&#39;</td><td>&#39;\\u0000&#39;</td><td>&#39;\\uffff&#39;</td></tr><tr><td>float</td><td>32</td><td>4</td><td>0.0f</td><td>1.4E-45</td><td>3.4028235E38</td></tr><tr><td>double</td><td>64</td><td>8</td><td>0.0d</td><td>4.9E-324</td><td>1.7976931348623157E308</td></tr><tr><td>boolean</td><td>1</td><td>false</td><td></td><td></td><td></td></tr></tbody></table></li><li><p>引用数据类型</p><ul><li>类（class）</li><li>接口（interface）</li><li>数组([])</li></ul></li></ul><h2 id="什么是自动类型转换、强制类型转换" tabindex="-1"><a class="header-anchor" href="#什么是自动类型转换、强制类型转换" aria-hidden="true">#</a> 什么是自动类型转换、强制类型转换？</h2><ul><li>自动类型转换：把一个表数范围小的数值或变量直接赋给另一个数范围大的变量时</li><li>强制类型转换：反之，需要强制转换</li></ul><h2 id="什么是自动拆箱-封箱" tabindex="-1"><a class="header-anchor" href="#什么是自动拆箱-封箱" aria-hidden="true">#</a> 什么是自动拆箱/封箱？</h2><ul><li>装箱 ：将基本类型用它们对应的引用类型包装起来</li><li>拆箱 ：将包装类型转换为基本数据类型</li></ul><h2 id="和-有什么区别" tabindex="-1"><a class="header-anchor" href="#和-有什么区别" aria-hidden="true">#</a> &amp;和&amp;&amp;有什么区别？</h2><ul><li>&amp;：短路与</li><li>&amp;&amp;：逻辑与</li></ul><h2 id="switch-是否能作用在-byte-long-string上" tabindex="-1"><a class="header-anchor" href="#switch-是否能作用在-byte-long-string上" aria-hidden="true">#</a> switch 是否能作用在 byte/long/String上？</h2><ul><li>Java5 以前 switch(expr)中，expr 只能是 byte、short、char、int</li><li>从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型</li><li>从 Java 7 开始，expr还可以是字符串(String)，但是长整型(long)在目前所有的版本中都是不可以的</li></ul><h2 id="break-continue-return-的区别及作用" tabindex="-1"><a class="header-anchor" href="#break-continue-return-的区别及作用" aria-hidden="true">#</a> break ,continue ,return 的区别及作用？</h2><ul><li>break 跳出整个循环，不再执行循环( 结束当前的循环体 )</li><li>continue 跳出本次循环，继续执行下次循环( 结束正在执行的循环 进入下一个循环条件 )</li><li>return 程序返回，不再执行下面的代码( 结束当前的方法 直接返回 )</li></ul><h2 id="用最有效率的方法计算2乘以8" tabindex="-1"><a class="header-anchor" href="#用最有效率的方法计算2乘以8" aria-hidden="true">#</a> 用最有效率的方法计算2乘以8？</h2><ul><li>2 &lt;&lt; 3。位运算，数字的二进制位左移三位相当于乘以2的三次方。</li></ul><h2 id="说说自增自减运算" tabindex="-1"><a class="header-anchor" href="#说说自增自减运算" aria-hidden="true">#</a> 说说自增自减运算？</h2><ul><li>++和--运算符可以放在变量之前，也可以放在变量之后</li><li>运算符放在变量之前时(前缀)，先自增/减，再赋值</li><li>当运算符放在变量之后时(后缀)，先赋值，再自增/减</li></ul>',16),r=[e];function h(n,o){return d(),a("div",null,r)}const s=t(l,[["render",h],["__file","基础语法.html.vue"]]);export{s as default};
