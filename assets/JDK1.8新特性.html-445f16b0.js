import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,d as c,a as n,b as e,f as l}from"./app-e787aa37.js";const i="/blogs/assets/img_2-562d65bb.png",u={},k=n("h2",{id:"jdk1-8都有哪些新特性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jdk1-8都有哪些新特性","aria-hidden":"true"},"#"),e(" JDK1.8都有哪些新特性？")],-1),r=l(`<ul><li>接口的默认方法和静态方法 <ul><li>在Java 8中，接口可以包含默认方法和静态方法</li></ul></li><li>Lambda 表达式和函数式接口 <ul><li>Lambda 表达式本质上是一段匿名内部类，可以传递一段代码</li><li>Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁</li><li>但是也不要滥用，否则会有可读性等问题</li><li>《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过3行</li></ul></li><li>Stream API <ul><li>Stream API提供了一种更简洁、更易于并行处理数据集合的方式</li><li>通过Stream API，我们可以对集合进行过滤、映射、排序、聚合等操作，提高了代码的可读性和简洁性</li></ul></li><li>新的日期和时间API <ul><li>Java 8引入了新的日期和时间API（java.time包），提供了更好的日期和时间处理方式</li><li>新的API解决了旧的Date和Calendar类在处理日期和时间时的一些问题，并提供了更多的功能和灵活性</li></ul></li><li>Optional 类 <ul><li>Optional类是一个容器类，用于表示一个值可能存在或不存在</li><li>通过Optional类，我们可以避免空指针异常，并更好地处理可能为空的值</li></ul></li></ul><h2 id="lambda-表达式了解多少" tabindex="-1"><a class="header-anchor" href="#lambda-表达式了解多少" aria-hidden="true">#</a> Lambda 表达式了解多少？</h2><ul><li>Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码</li><li>只有函数式接口（FunctionalInterface）才能缩写成 Lambda 表示式</li></ul><h2 id="java8有哪些内置函数式接口" tabindex="-1"><a class="header-anchor" href="#java8有哪些内置函数式接口" aria-hidden="true">#</a> Java8有哪些内置函数式接口？</h2><ul><li>添加了 @FunctionalInterface 注解的接口 <ul><li>Comparator</li><li>Runnable</li><li>Callable</li><li>Predicate</li><li>Function</li><li>Supplier</li><li>Consumer</li></ul></li></ul><h2 id="optional了解吗" tabindex="-1"><a class="header-anchor" href="#optional了解吗" aria-hidden="true">#</a> Optional了解吗？</h2><ul><li><p>Optional 是用于防范 NullPointerException</p></li><li><p>可以将 Optional 看做是包装对象（可能是 null , 也有可能非 null ）的容器</p><ul><li><p>当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 Optional 来包装它，这也是在 Java 8 被推荐使用的做法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;bam&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;bam&quot;</span>
        optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;fallback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;bam&quot;</span>
        optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="stream-流用过吗" tabindex="-1"><a class="header-anchor" href="#stream-流用过吗" aria-hidden="true">#</a> Stream 流用过吗？</h2><ul><li><p>Stream 流，简单来说，使用 java.util.Stream 对一个包含一个或多个元素的集合做各种操作</p></li><li><p>这些操作可能是 中间操作 亦或是 终端操作</p></li><li><p>终端操作会返回一个结果，而中间操作会返回一个 Stream 流</p></li><li><p>Stream流一般用于集合，Stream的常用操作有</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Filter 过滤</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringCollection
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Sorted 排序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        stringCollection
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Map 转换</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        stringCollection
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Match 匹配</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true</span>
<span class="token keyword">boolean</span> anyStartsWithA <span class="token operator">=</span>
        stringCollection
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">boolean</span> allStartsWithA <span class="token operator">=</span>
        stringCollection
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// 验证 list 中 string 是否都不是以 z 开头的,</span>
<span class="token keyword">boolean</span> noneStartsWithZ <span class="token operator">=</span>
        stringCollection
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Count 计数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 先对 list 中字符串开头为 b 进行过滤，让后统计数量</span>
<span class="token keyword">long</span> startsWithB <span class="token operator">=</span>
        stringCollection
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>count 是一个终端操作，它能够统计 stream 流中的元素总数，返回值是 long类型</li></ul></li><li><p>Reduce归约</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> reduced <span class="token operator">=</span>
                stringCollection
                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s1 <span class="token operator">+</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Reduce 中文翻译为：减少、缩小。通过入参的 Function ，我们能够将 list归约成一个值。它的返回类型是 Optional 类型</li></ul></li></ul></li><li><p>Stream的常用API</p><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul>',9);function d(v,m){const s=t("Mermaid");return p(),o("div",null,[k,c(s,{id:"mermaid-3",code:"eJxNkF1OwkAUhd9dRRcAWzABUUAQSPRtwkONRk1ECWEBYPjVQhGFEEFSBKU+UGpELbTAZnpn2l1YZ4LpPJ7vu5Nz71mGT59zR4Etznk+FOVTxye8NZCt1QoMMcl5vducH0F5iVuqExCjTeS7JLX9FO4g/DjFQv5fwfVXEIduJYCIkgOhbepDIuUZCVCyi1iGuzMyG0P53g33ELz0wViAOLWmOs6NGfRRGESH2cwpn+J8iTDLgzQPIfyV/2vxUDOXPbtbgkaF8RDlYWSty1gfeXBHArXggWWTLN7IpMoG3Or+ZrP5tzUQYFQgjZK7QgTZesdSRrg9x58tRiKURBE7AiPkqcBEUPqkrjIxSsUDBD2ZuaY2wT863Eq4rbI5KyeYWo1IM3gWnTncq7o/YB1iKJ7OXlxf8ZfkQ2cgRkEc2fk1FGvkfYGFst2sgHEDmuZWEgiLDXPVdY4PShWKslN0c4VfwQYC5g=="}),r])}const f=a(u,[["render",d],["__file","JDK1.8新特性.html.vue"]]);export{f as default};
