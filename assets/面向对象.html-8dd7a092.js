const e=JSON.parse('{"key":"v-95dc3ca2","path":"/Java/Java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html","title":"面向对象","lang":"zh-CN","frontmatter":{"title":"面向对象","order":3,"isTimeLine":true,"date":"2024-05-10T00:00:00.000Z","description":"⾯向对象和⾯向过程的区别? ⾯向过程 面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。 ⾯向对象 面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。 目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。 面向对象有哪些特性? 封装 封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法 继承 继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用 多态 所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定 即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定 在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）","head":[["meta",{"property":"og:url","content":"https://muchfish.github.io/blogs/blogs/Java/Java%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"鱼塘"}],["meta",{"property":"og:title","content":"面向对象"}],["meta",{"property":"og:description","content":"⾯向对象和⾯向过程的区别? ⾯向过程 面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。 ⾯向对象 面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。 目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。 面向对象有哪些特性? 封装 封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法 继承 继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用 多态 所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定 即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定 在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-13T04:08:54.000Z"}],["meta",{"property":"article:author","content":"摸鱼散人"}],["meta",{"property":"article:published_time","content":"2024-05-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-13T04:08:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-13T04:08:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"摸鱼散人\\",\\"url\\":\\"https://github.com/muchfish\\"}]}"]]},"headers":[{"level":2,"title":"⾯向对象和⾯向过程的区别?","slug":"面向对象和面向过程的区别","link":"#面向对象和面向过程的区别","children":[]},{"level":2,"title":"面向对象有哪些特性?","slug":"面向对象有哪些特性","link":"#面向对象有哪些特性","children":[]},{"level":2,"title":"重载（overload）和重写（override）的区别？","slug":"重载-overload-和重写-override-的区别","link":"#重载-overload-和重写-override-的区别","children":[]},{"level":2,"title":"访问修饰符public、private、protected、以及不写（默认）时的 区别?","slug":"访问修饰符public、private、protected、以及不写-默认-时的-区别","link":"#访问修饰符public、private、protected、以及不写-默认-时的-区别","children":[]},{"level":2,"title":"this关键字有什么作用？","slug":"this关键字有什么作用","link":"#this关键字有什么作用","children":[]},{"level":2,"title":"抽象类(abstract class)和接口(interface)有什么区别？","slug":"抽象类-abstract-class-和接口-interface-有什么区别","link":"#抽象类-abstract-class-和接口-interface-有什么区别","children":[]},{"level":2,"title":"成员变量与局部变量的区别有哪些？","slug":"成员变量与局部变量的区别有哪些","link":"#成员变量与局部变量的区别有哪些","children":[]},{"level":2,"title":"静态变量和实例变量的区别？静态方法、实例方法呢？","slug":"静态变量和实例变量的区别-静态方法、实例方法呢","link":"#静态变量和实例变量的区别-静态方法、实例方法呢","children":[]},{"level":2,"title":"final关键字有什么作用？","slug":"final关键字有什么作用","link":"#final关键字有什么作用","children":[]},{"level":2,"title":"final、finally、finalize的区别？","slug":"final、finally、finalize的区别","link":"#final、finally、finalize的区别","children":[]},{"level":2,"title":"==和 equals 的区别？","slug":"和-equals-的区别","link":"#和-equals-的区别","children":[]},{"level":2,"title":"hashCode与 equals?","slug":"hashcode与-equals","link":"#hashcode与-equals","children":[]},{"level":2,"title":"Java是值传递，还是引用传递？","slug":"java是值传递-还是引用传递","link":"#java是值传递-还是引用传递","children":[]},{"level":2,"title":"什么是深拷贝和浅拷贝?","slug":"什么是深拷贝和浅拷贝","link":"#什么是深拷贝和浅拷贝","children":[]},{"level":2,"title":"Java 创建对象有哪几种方式？","slug":"java-创建对象有哪几种方式","link":"#java-创建对象有哪几种方式","children":[]}],"git":{"createdTime":1715573334000,"updatedTime":1715573334000,"contributors":[{"name":"daiwencheng","email":"1319105206@qq.com","commits":1}]},"readingTime":{"minutes":9.53,"words":2860},"filePathRelative":"Java/Java基础/面向对象.md","localizedDate":"2024年5月10日","excerpt":"<h2> ⾯向对象和⾯向过程的区别?</h2>\\n<ul>\\n<li>\\n<p>⾯向过程</p>\\n<ul>\\n<li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。</li>\\n</ul>\\n</li>\\n<li>\\n<p>⾯向对象</p>\\n<ul>\\n<li>面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。 目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。</li>\\n</ul>\\n</li>\\n</ul>\\n<h2> 面向对象有哪些特性?</h2>\\n<ul>\\n<li>封装\\n<ul>\\n<li>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法</li>\\n</ul>\\n</li>\\n<li>继承\\n<ul>\\n<li>继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用</li>\\n</ul>\\n</li>\\n<li>多态\\n<ul>\\n<li>所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定</li>\\n<li>即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定</li>\\n<li>在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
