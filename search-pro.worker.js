const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":86,\"nextId\":86,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-8daa1a0e#关于网站\",\"2\":\"v-8daa1a0e#关于作者\",\"3\":\"v-8daa1a0e#占个位\",\"4\":\"v-8daa1a0e#star-趋势\",\"5\":\"v-184f4da6\",\"6\":\"v-2e3eac9e\",\"7\":\"v-4bc4557f\",\"8\":\"v-4bc4557f#三分钟搭建一个博客网站\",\"9\":\"v-4bc4557f#准备运行环境\",\"10\":\"v-4bc4557f#创建项目模板\",\"11\":\"v-4bc4557f#创建过程\",\"12\":\"v-4bc4557f#访问\",\"13\":\"v-4bc4557f#效果\",\"14\":\"v-4bc4557f#项目启动命令\",\"15\":\"v-4bc4557f#发布到github\",\"16\":\"v-4bc4557f#修改deploy-docs-yml\",\"17\":\"v-4bc4557f#修改config-ts\",\"18\":\"v-4bc4557f#共享项目到github\",\"19\":\"v-4bc4557f#从master新建分支gh-pages-推送新分支到github\",\"20\":\"v-4bc4557f#github上开源\",\"21\":\"v-4bc4557f#配置github-pages\",\"22\":\"v-4bc4557f#更新博客只在master分支上改-不要动gh-pages分支\",\"23\":\"v-4bc4557f#修复-编辑此页-功能链接跳转不对问题\",\"24\":\"v-4bc4557f#踩坑\",\"25\":\"v-4bc4557f@0\",\"26\":\"v-4bc4557f@1\",\"27\":\"v-6124e2da\",\"28\":\"v-6124e2da#基础概念与常识\",\"29\":\"v-6124e2da#java-语言有哪些特点\",\"30\":\"v-6124e2da#java-se-vs-java-ee\",\"31\":\"v-6124e2da#jvm-vs-jdk-vs-jre\",\"32\":\"v-6124e2da#jvm\",\"33\":\"v-6124e2da#jdk-和-jre\",\"34\":\"v-6124e2da#什么是字节码-采用字节码的好处是什么\",\"35\":\"v-6124e2da#为什么说-java-语言-编译与解释并存\",\"36\":\"v-6124e2da#aot-有什么优点-为什么不全部使用-aot-呢\",\"37\":\"v-6124e2da#oracle-jdk-vs-openjdk\",\"38\":\"v-6124e2da#java-和-c-的区别\",\"39\":\"v-6124e2da#基本语法\",\"40\":\"v-6124e2da#注释有哪几种形式\",\"41\":\"v-6124e2da#标识符和关键字的区别是什么\",\"42\":\"v-6124e2da#java-语言关键字有哪些\",\"43\":\"v-6124e2da#自增自减运算符\",\"44\":\"v-6124e2da#移位运算符\",\"45\":\"v-6124e2da#continue、break-和-return-的区别是什么\",\"46\":\"v-6124e2da#基本数据类型\",\"47\":\"v-6124e2da#java-中的几种基本数据类型了解么\",\"48\":\"v-6124e2da#基本类型和包装类型的区别\",\"49\":\"v-6124e2da#包装类型的缓存机制了解么\",\"50\":\"v-6124e2da#自动装箱与拆箱了解吗-原理是什么\",\"51\":\"v-6124e2da#为什么浮点数运算的时候会有精度丢失的风险\",\"52\":\"v-6124e2da#如何解决浮点数运算的精度丢失问题\",\"53\":\"v-6124e2da#超过-long-整型的数据应该如何表示\",\"54\":\"v-6124e2da#变量\",\"55\":\"v-6124e2da#成员变量与局部变量的区别\",\"56\":\"v-6124e2da#静态变量有什么作用\",\"57\":\"v-6124e2da#字符型常量和字符串常量的区别\",\"58\":\"v-6124e2da#方法\",\"59\":\"v-6124e2da#什么是方法的返回值-方法有哪几种类型\",\"60\":\"v-6124e2da#静态方法为什么不能调用非静态成员\",\"61\":\"v-6124e2da#静态方法和实例方法有何不同\",\"62\":\"v-6124e2da#重载和重写有什么区别\",\"63\":\"v-6124e2da#重载\",\"64\":\"v-6124e2da#重写\",\"65\":\"v-6124e2da#总结\",\"66\":\"v-6124e2da#什么是可变长参数\",\"67\":\"v-6124e2da#参考\",\"68\":\"v-6124e2da@0\",\"69\":\"v-6124e2da@1\",\"70\":\"v-8c7d3d56\",\"71\":\"v-8c7d3d56#形参-实参\",\"72\":\"v-8c7d3d56#值传递-引用传递\",\"73\":\"v-8c7d3d56#为什么-java-只有值传递\",\"74\":\"v-8c7d3d56#案例-1-传递基本类型参数\",\"75\":\"v-8c7d3d56#案例-2-传递引用类型参数-1\",\"76\":\"v-8c7d3d56#案例-3-传递引用类型参数-2\",\"77\":\"v-8c7d3d56#引用传递是怎么样的\",\"78\":\"v-8c7d3d56#为什么-java-不引入引用传递呢\",\"79\":\"v-8c7d3d56#总结\",\"80\":\"v-8c7d3d56#参考\",\"81\":\"v-8c7d3d56@0\",\"82\":\"v-8c7d3d56@1\",\"83\":\"v-e1e3da16\",\"84\":\"v-ffb970b6\",\"85\":\"v-14c69af4\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,6],\"2\":[1,1],\"3\":[1,1],\"4\":[2,1],\"5\":[1],\"6\":[1],\"7\":[1],\"8\":[1,6],\"9\":[1,4],\"10\":[1,8],\"11\":[1,154],\"12\":[1,4],\"13\":[1],\"14\":[1,7],\"15\":[1],\"16\":[4,6],\"17\":[3,23],\"18\":[1],\"19\":[3],\"20\":[1,8],\"21\":[2,12],\"22\":[3,8],\"23\":[3,7],\"24\":[1,2],\"25\":[null,null,1],\"26\":[null,null,1],\"27\":[3,3],\"28\":[1],\"29\":[3,81],\"30\":[4,54],\"31\":[4],\"32\":[1,51],\"33\":[3,121],\"34\":[3,74],\"35\":[5,59],\"36\":[5,114],\"37\":[4,235],\"38\":[5,31],\"39\":[1],\"40\":[2,57],\"41\":[2,30],\"42\":[3,105],\"43\":[1,42],\"44\":[1,128],\"45\":[6,58],\"46\":[1],\"47\":[3,111],\"48\":[2,64],\"49\":[2,105],\"50\":[3,61],\"51\":[2,45],\"52\":[2,31],\"53\":[4,30],\"54\":[1],\"55\":[2,95],\"56\":[2,30],\"57\":[2,55],\"58\":[1],\"59\":[3,37],\"60\":[2,41],\"61\":[2,43],\"62\":[2,6],\"63\":[1,36],\"64\":[1,15],\"65\":[1,66],\"66\":[2,69],\"67\":[1,36],\"68\":[null,null,1],\"69\":[null,null,1],\"70\":[2,6],\"71\":[2,30],\"72\":[2,20],\"73\":[4,8],\"74\":[3,42],\"75\":[4,44],\"76\":[4,40],\"77\":[2,43],\"78\":[4,37],\"79\":[1,13],\"80\":[1,30],\"81\":[null,null,1],\"82\":[null,null,1],\"83\":[1],\"84\":[1],\"85\":[1]},\"averageFieldLength\":[2.0980738376315196,38.6889497689445,0.12220309810671255],\"storedFields\":{\"0\":{\"h\":\"鱼塘\"},\"1\":{\"h\":\"关于网站\",\"t\":[\"欢迎来到鱼塘\",\"传送门：GitHub | Gitee。\",\"项目介绍\"]},\"2\":{\"h\":\"关于作者\",\"t\":[\"关于作者\"]},\"3\":{\"h\":\"占个位\",\"t\":[\"占个位\"]},\"4\":{\"h\":\"Star 趋势\",\"t\":[\"Stars\"]},\"5\":{\"h\":\"主页\"},\"6\":{\"h\":\"幻灯片页\"},\"7\":{\"h\":\"三分钟搭建一个博客网站\"},\"8\":{\"h\":\"三分钟搭建一个博客网站\",\"t\":[\"基于vuepress-theme-hope 和 github pages搭建\"]},\"9\":{\"h\":\"准备运行环境\",\"t\":[\"安装nodejs 下载地址\",\"安装pnpm 参考资料\"]},\"10\":{\"h\":\"创建项目模板\",\"t\":[\"pnpm create vuepress-theme-hope my-docs \"]},\"11\":{\"h\":\"创建过程\",\"t\":[\"PowerShell 7.4.0 PS C:\\\\Users\\\\daiwencheng\\\\Documents\\\\BaiduSyncdisk\\\\ob\\\\ob\\\\blogs> pnpm create vuepress-theme-hope my-docs .../Local/pnpm/store/v3/tmp/dlx-7428 | +83 ++++++++ .../Local/pnpm/store/v3/tmp/dlx-7428 | Progress: resolved 83, reused 61, downloaded 22, added 83, done ? Select a language to display / 选择显示语言 简体中文 ? 选择包管理器 pnpm 生成 package.json... ? 设置应用名称 vuepress-theme-hope-template ? 设置应用版本号 2.0.0 ? 设置应用描述 A project of vuepress-theme-hope ? 设置协议 MIT ? 项目需要用到多语言么? No ? 是否需要一个自动部署文档到 GitHub Pages 的工作流？ Yes ? 你想要创建什么类型的项目？ blog 生成模板... ? 是否初始化 Git 仓库? Yes 安装依赖... 这可能需要数分钟，请耐心等待. 我们无法正确输出子进程的进度条，所以进程可能会看似未响应 WARN 2 deprecated subdependencies found: rollup-plugin-terser@7.0.2, sourcemap-codec@1.4.8 Packages: +606 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Progress: resolved 639, reused 409, downloaded 197, added 606, done node_modules/.pnpm/esbuild@0.19.8/node_modules/esbuild: Running postinstall script, done in 825ms devDependencies: + @vuepress/client 2.0.0-rc.0 + vue 3.3.10 + vuepress 2.0.0-rc.0 + vuepress-theme-hope 2.0.0-rc.2 The dependency was already listed in devDependencies. If you want to make it a prod dependency, then move it manually. Done in 25.3s 模板已成功生成! ? 是否想要现在启动 Demo 查看? Yes 启动开发服务器... 启动成功后，请在浏览器输入给出的开发服务器地址(默认为 'localhost:8080') > vuepress-theme-hope-template@2.0.0 docs:dev C:\\\\Users\\\\daiwencheng\\\\Documents\\\\BaiduSyncdisk\\\\ob\\\\ob\\\\blogs\\\\my-docs > vuepress dev src vite v5.0.6 dev server running at: ➜ Local: http://localhost:8080/ ➜ Network: http://10.246.84.128:8080/ \"]},\"12\":{\"h\":\"访问\",\"t\":[\"打开http://localhost:8080/ 访问\"]},\"13\":{\"h\":\"效果\"},\"14\":{\"h\":\"项目启动命令\",\"t\":[\"需要先进入项目目录 my-docs\",\"npm run docs:dev \"]},\"15\":{\"h\":\"发布到github\"},\"16\":{\"h\":\"修改 deploy-docs.yml\",\"t\":[\"on: push: branches: # 确保这是你正在使用的分支名称 - master \"]},\"17\":{\"h\":\"修改 config.ts\",\"t\":[\"export default defineUserConfig({ base: \\\"/my-docs/\\\", lang: \\\"zh-CN\\\", title: \\\"博客演示\\\", description: \\\"vuepress-theme-hope 的博客演示\\\", theme, // Enable it with pwa // shouldPrefetch: false, }); \"]},\"18\":{\"h\":\"共享项目到GitHub\"},\"19\":{\"h\":\"从master新建分支gh-pages,推送新分支到github\"},\"20\":{\"h\":\"GitHub上开源\",\"t\":[\"打开仓库my-docs\",\"打开Settings\",\"底部设置Change visibility 为change to public\"]},\"21\":{\"h\":\"配置Github Pages\",\"t\":[\"打开仓库my-docs的Settings项,选中侧边栏pages,配置部署分支为gh-pages,点击save.\",\"在actions菜单栏中应该会触发自动发布,没有的话随便修改下master分支代码,就会触发自动发布\",\"发布完成后,此时pages页会显示访问域名,点击访问即可\"]},\"22\":{\"h\":\"更新博客只在master分支上改,不要动gh-pages分支\",\"t\":[\"master 是源码分支 gh-pages是发布分支 master的代码都是ts和一些markdown文件,需要build成html文件和js才行,即gh-pages\"]},\"23\":{\"h\":\"修复\\\"编辑此页\\\"功能链接跳转不对问题\",\"t\":[\"修改theme.ts\",\"docsBranch: 文档所在分支,默认值: \\\"main\\\"\"]},\"24\":{\"h\":\"踩坑\",\"t\":[\"踩了一些坑,可以看提交记录\"]},\"25\":{\"c\":[\"前端\"]},\"26\":{\"c\":[\"JavaScript\"]},\"27\":{\"h\":\"Java基础常见面试题总结(上)\",\"t\":[\"File not found\"]},\"28\":{\"h\":\"基础概念与常识\"},\"29\":{\"h\":\"Java 语言有哪些特点?\",\"t\":[\"简单易学；\",\"面向对象（封装，继承，多态）；\",\"平台无关性（ Java 虚拟机实现平台无关性）；\",\"支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；\",\"可靠性（具备异常处理和自动内存管理机制）；\",\"安全性（Java 语言本身的设计就提供了多重安全防护机制如访问权限修饰符、限制程序直接访问操作系统资源）；\",\"高效性（通过 Just In Time 编译器等技术的优化，Java 语言的运行效率还是非常不错的）；\",\"支持网络编程并且很方便；\",\"编译与解释并存；\",\"……\",\"🐛 修正（参见：issue#544）：C++11 开始（2011 年的时候）,C++就引入了多线程库，在 windows、linux、macos 都可以使用std::thread和std::async来创建线程。参考链接：http://www.cplusplus.com/reference/thread/thread/?kw=thread\",\"🌈 拓展一下：\",\"“Write Once, Run Anywhere（一次编写，随处运行）”这句宣传口号，真心经典，流传了好多年！以至于，直到今天，依然有很多人觉得跨平台是 Java 语言最大的优势。实际上，跨平台已经不是 Java 最大的卖点了，各种 JDK 新特性也不是。目前市面上虚拟化技术已经非常成熟，比如你通过 Docker 就很容易实现跨平台了。在我看来，Java 强大的生态才是！\"]},\"30\":{\"h\":\"Java SE vs Java EE\",\"t\":[\"Java SE（Java Platform，Standard Edition）: Java 平台标准版，Java 编程语言的基础，它包含了支持 Java 应用程序开发和运行的核心类库以及虚拟机等核心组件。Java SE 可以用于构建桌面应用程序或简单的服务器应用程序。\",\"Java EE（Java Platform, Enterprise Edition ）：Java 平台企业版，建立在 Java SE 的基础上，包含了支持企业级应用程序开发和部署的标准和规范（比如 Servlet、JSP、EJB、JDBC、JPA、JTA、JavaMail、JMS）。 Java EE 可以用于构建分布式、可移植、健壮、可伸缩和安全的服务端 Java 应用程序，例如 Web 应用程序。\",\"简单来说，Java SE 是 Java 的基础版本，Java EE 是 Java 的高级版本。Java SE 更适合开发桌面应用程序或简单的服务器应用程序，Java EE 更适合开发复杂的企业级应用程序或 Web 应用程序。\",\"除了 Java SE 和 Java EE，还有一个 Java ME（Java Platform，Micro Edition）。Java ME 是 Java 的微型版本，主要用于开发嵌入式消费电子设备的应用程序，例如手机、PDA、机顶盒、冰箱、空调等。Java ME 无需重点关注，知道有这个东西就好了，现在已经用不上了。\"]},\"31\":{\"h\":\"JVM vs JDK vs JRE\"},\"32\":{\"h\":\"JVM\",\"t\":[\"Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。\",\"运行在 Java 虚拟机之上的编程语言\",\"JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。 也就是说我们平时接触到的 HotSpot VM 仅仅是是 JVM 规范的一种实现而已。\",\"除了我们平时最常用的 HotSpot VM 外，还有 J9 VM、Zing VM、JRockit VM 等 JVM 。维基百科上就有常见 JVM 的对比：Comparison of Java virtual machines ，感兴趣的可以去看看。并且，你可以在 Java SE Specifications 上找到各个版本的 JDK 对应的 JVM 规范。\"]},\"33\":{\"h\":\"JDK 和 JRE\",\"t\":[\"JDK（Java Development Kit），它是功能齐全的 Java SDK，是提供给开发者使用，能够创建和编译 Java 程序的开发套件。它包含了 JRE，同时还包含了编译 java 源码的编译器 javac 以及一些其他工具比如 javadoc（文档注释工具）、jdb（调试器）、jconsole（基于 JMX 的可视化监控⼯具）、javap（反编译工具）等等。\",\"JRE（Java Runtime Environment） 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，主要包括 Java 虚拟机（JVM）、Java 基础类库（Class Library）。\",\"也就是说，JRE 是 Java 运行时环境，仅包含 Java 应用程序的运行时环境和必要的类库。而 JDK 则包含了 JRE，同时还包括了 javac、javadoc、jdb、jconsole、javap 等工具，可以用于 Java 应用程序的开发和调试。如果需要进行 Java 编程工作，比如编写和编译 Java 程序、使用 Java API 文档等，就需要安装 JDK。而对于某些需要使用 Java 特性的应用程序，如 JSP 转换为 Java Servlet、使用反射等，也需要 JDK 来编译和运行 Java 代码。因此，即使不打算进行 Java 应用程序的开发工作，也有可能需要安装 JDK。\",\"JDK 包含 JRE\",\"不过，从 JDK 9 开始，就不需要区分 JDK 和 JRE 的关系了，取而代之的是模块系统（JDK 被重新组织成 94 个模块）+ jlink 工具 (随 Java 9 一起发布的新命令行工具，用于生成自定义 Java 运行时映像，该映像仅包含给定应用程序所需的模块) 。并且，从 JDK 11 开始，Oracle 不再提供单独的 JRE 下载。\",\"在 Java 9 新特性概览这篇文章中，我在介绍模块化系统的时候提到：\",\"在引入了模块系统之后，JDK 被重新组织成 94 个模块。Java 应用可以通过新增的 jlink 工具，创建出只包含所依赖的 JDK 模块的自定义运行时镜像。这样可以极大的减少 Java 运行时环境的大小。\",\"也就是说，可以用 jlink 根据自己的需求，创建一个更小的 runtime（运行时），而不是不管什么应用，都是同样的 JRE。\",\"定制的、模块化的 Java 运行时映像有助于简化 Java 应用的部署和节省内存并增强安全性和可维护性。这对于满足现代应用程序架构的需求，如虚拟化、容器化、微服务和云原生开发，是非常重要的。\"]},\"34\":{\"h\":\"什么是字节码?采用字节码的好处是什么?\",\"t\":[\"在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以， Java 程序运行时相对来说还是高效的（不过，和 C、 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。\",\"Java 程序从源代码到运行的过程如下图所示：\",\"Java程序转变为机器代码的过程\",\"我们需要格外注意的是 .class->机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（Just in Time Compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言 。\",\"Java程序转变为机器代码的过程\",\"HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。\",\"JDK、JRE、JVM、JIT 这四者的关系如下图所示。\",\"JDK、JRE、JVM、JIT 这四者的关系\",\"下面这张图是 JVM 的大致结构模型。\",\"JVM 的大致结构模型\"]},\"35\":{\"h\":\"为什么说 Java 语言“编译与解释并存”？\",\"t\":[\"其实这个问题我们讲字节码的时候已经提到过，因为比较重要，所以我们这里再提一下。\",\"我们可以将高级编程语言按照程序的执行方式分为两种：\",\"编译型：编译型语言 会通过编译器将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。\",\"解释型：解释型语言会通过解释器一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。\",\"编译型语言和解释型语言\",\"根据维基百科介绍：\",\"为了改善编译语言的效率而发展出的即时编译技术，已经缩小了这两种语言间的差距。这种技术混合了编译语言与解释型语言的优点，它像编译语言一样，先把程序源代码编译成字节码。到执行期时，再将字节码直译，之后执行。Java与LLVM是这种技术的代表产物。\",\"相关阅读：基本功 | Java 即时编译器原理解析及实践\",\"为什么说 Java 语言“编译与解释并存”？\",\"这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 Java 解释器来解释执行。\"]},\"36\":{\"h\":\"AOT 有什么优点？为什么不全部使用 AOT 呢？\",\"t\":[\"JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation) 。和 JIT 不同的是，这种编译模式会在程序被执行前就将其编译成机器码，属于静态编译（C、 C++，Rust，Go 等语言就是静态编译）。AOT 避免了 JIT 预热等各方面的开销，可以提高 Java 程序的启动速度，避免预热时间长。并且，AOT 还能减少内存占用和增强 Java 程序的安全性（AOT 编译后的代码不容易被反编译和修改），特别适合云原生场景。\",\"JIT 与 AOT 两者的关键指标对比:\",\"JIT vs AOT\",\"可以看出，AOT 的主要优势在于启动时间、内存占用和打包体积。JIT 的主要优势在于具备更高的极限处理能力，可以降低请求的最大延迟。\",\"提到 AOT 就不得不提 GraalVM 了！GraalVM 是一种高性能的 JDK（完整的 JDK 发行版本），它可以运行 Java 和其他 JVM 语言，以及 JavaScript、Python 等非 JVM 语言。 GraalVM 不仅能提供 AOT 编译，还能提供 JIT 编译。感兴趣的同学，可以去看看 GraalVM 的官方文档：https://www.graalvm.org/latest/docs/。如果觉得官方文档看着比较难理解的话，也可以找一些文章来看看，比如：\",\"基于静态编译构建微服务应用\",\"走向 Native 化：Spring&Dubbo AOT 技术示例与原理讲解\",\"既然 AOT 这么多优点，那为什么不全部使用这种编译方式呢？\",\"我们前面也对比过 JIT 与 AOT，两者各有优点，只能说 AOT 更适合当下的云原生场景，对微服务架构的支持也比较友好。除此之外，AOT 编译无法支持 Java 的一些动态特性，如反射、动态代理、动态加载、JNI（Java Native Interface）等。然而，很多框架和库（如 Spring、CGLIB）都用到了这些特性。如果只使用 AOT 编译，那就没办法使用这些框架和库了，或者说需要针对性地去做适配和优化。举个例子，CGLIB 动态代理使用的是 ASM 技术，而这种技术大致原理是运行时直接在内存中生成并加载修改后的字节码文件也就是 .class 文件，如果全部使用 AOT 提前编译，也就不能使用 ASM 技术了。为了支持类似的动态特性，所以选择使用 JIT 即时编译器。\"]},\"37\":{\"h\":\"Oracle JDK vs OpenJDK\",\"t\":[\"可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么 Oracle JDK 和 OpenJDK 之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。\",\"首先，2006 年 SUN 公司将 Java 开源，也就有了 OpenJDK。2009 年 Oracle 收购了 Sun 公司，于是自己在 OpenJDK 的基础上搞了一个 Oracle JDK。Oracle JDK 是不开源的，并且刚开始的几个版本（Java8 ~ Java11）还会相比于 OpenJDK 添加一些特有的功能和工具。\",\"其次，对于 Java 7 而言，OpenJDK 和 Oracle JDK 是十分接近的。 Oracle JDK 是基于 OpenJDK 7 构建的，只添加了一些小功能，由 Oracle 工程师参与维护。\",\"下面这段话摘自 Oracle 官方在 2012 年发表的一个博客：\",\"问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？\",\"答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些闭源的第三方组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。\",\"最后，简单总结一下 Oracle JDK 和 OpenJDK 的区别：\",\"是否开源：OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是基于 OpenJDK 实现的，并不是完全开源的（个人观点：众所周知，JDK 原来是 SUN 公司开发的，后来 SUN 公司又卖给了 Oracle 公司，Oracle 公司以 Oracle 数据库而著名，而 Oracle 数据库又是闭源的，这个时候 Oracle 公司就不想完全开源了，但是原来的 SUN 公司又把 JDK 给开源了，如果这个时候 Oracle 收购回来之后就把他给闭源，必然会引起很多 Java 开发者的不满，导致大家对 Java 失去信心，那 Oracle 公司收购回来不就把 Java 烂在手里了吗！然后，Oracle 公司就想了个骚操作，这样吧，我把一部分核心代码开源出来给你们玩，并且我要和你们自己搞的 JDK 区分下，你们叫 OpenJDK，我叫 Oracle JDK，我发布我的，你们继续玩你们的，要是你们搞出来什么好玩的东西，我后续发布 Oracle JDK 也会拿来用一下，一举两得！）OpenJDK 开源项目：https://github.com/openjdk/jdk 。\",\"是否免费：Oracle JDK 会提供免费版本，但一般有时间限制。JDK17 之后的版本可以免费分发和商用，但是仅有 3 年时间，3 年后无法免费商用。不过，JDK8u221 之前只要不升级可以无限期免费。OpenJDK 是完全免费的。\",\"功能性：Oracle JDK 在 OpenJDK 的基础上添加了一些特有的功能和工具，比如 Java Flight Recorder（JFR，一种监控工具）、Java Mission Control（JMC，一种监控工具）等工具。不过，在 Java 11 之后，OracleJDK 和 OpenJDK 的功能基本一致，之前 OracleJDK 中的私有组件大多数也已经被捐赠给开源组织。\",\"稳定性：OpenJDK 不提供 LTS 服务，而 OracleJDK 大概每三年都会推出一个 LTS 版进行长期支持。不过，很多公司都基于 OpenJDK 提供了对应的和 OracleJDK 周期相同的 LTS 版。因此，两者稳定性其实也是差不多的。\",\"协议：Oracle JDK 使用 BCL/OTN 协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。\",\"既然 Oracle JDK 这么好，那为什么还要有 OpenJDK？\",\"答：\",\"OpenJDK 是开源的，开源意味着你可以对它根据你自己的需要进行修改、优化，比如 Alibaba 基于 OpenJDK 开发了 Dragonwell8：https://github.com/alibaba/dragonwell8\",\"OpenJDK 是商业免费的（这也是为什么通过 yum 包管理器上默认安装的 JDK 是 OpenJDK 而不是 Oracle JDK）。虽然 Oracle JDK 也是商业免费（比如 JDK 8），但并不是所有版本都是免费的。\",\"OpenJDK 更新频率更快。Oracle JDK 一般是每 6 个月发布一个新版本，而 OpenJDK 一般是每 3 个月发布一个新版本。（现在你知道为啥 Oracle JDK 更稳定了吧，先在 OpenJDK 试试水，把大部分问题都解决掉了才在 Oracle JDK 上发布）\",\"基于以上这些原因，OpenJDK 还是有存在的必要的！\",\"oracle jdk release cadence\",\"Oracle JDK 和 OpenJDK 如何选择？\",\"建议选择 OpenJDK 或者基于 OpenJDK 的发行版，比如 AWS 的 Amazon Corretto，阿里巴巴的 Alibaba Dragonwell。\",\"🌈 拓展一下：\",\"BCL 协议（Oracle Binary Code License Agreement）：可以使用 JDK（支持商用），但是不能进行修改。\",\"OTN 协议（Oracle Technology Network License Agreement）：11 及之后新发布的 JDK 用的都是这个协议，可以自己私下用，但是商用需要付费。\"]},\"38\":{\"h\":\"Java 和 C++ 的区别?\",\"t\":[\"我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过 C++，也要记下来。\",\"虽然，Java 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但是，它们还是有挺多不相同的地方：\",\"Java 不提供指针来直接访问内存，程序内存更加安全\",\"Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。\",\"Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。\",\"C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。\",\"……\"]},\"39\":{\"h\":\"基本语法\"},\"40\":{\"h\":\"注释有哪几种形式？\",\"t\":[\"Java 中的注释有三种：\",\"Java 注释类型总结\",\"单行注释：通常用于解释方法内某单行代码的作用。\",\"多行注释：通常用于解释一段代码的作用。\",\"文档注释：通常用于生成 Java 开发文档。\",\"用的比较多的还是单行注释和文档注释，多行注释在实际开发中使用的相对较少。\",\"在我们编写代码的时候，如果代码量比较少，我们自己或者团队其他成员还可以很轻易地看懂代码，但是当项目结构一旦复杂起来，我们就需要用到注释了。注释并不会执行(编译器在编译代码之前会把代码中的所有注释抹掉,字节码中不保留注释)，是我们程序员写给自己看的，注释是你的代码说明书，能够帮助看代码的人快速地理清代码之间的逻辑关系。因此，在写程序的时候随手加上注释是一个非常好的习惯。\",\"《Clean Code》这本书明确指出：\",\"代码的注释不是越详细越好。实际上好的代码本身就是注释，我们要尽量规范和美化自己的代码来减少不必要的注释。\",\"若编程语言足够有表达力，就不需要注释，尽量通过代码来阐述。\",\"举个例子：\",\"去掉下面复杂的注释，只需要创建一个与注释所言同一事物的函数即可\",\"// check to see if the employee is eligible for full benefits if ((employee.flags & HOURLY_FLAG) && (employee.age > 65)) \",\"应替换为\",\"if (employee.isEligibleForFullBenefits()) \"]},\"41\":{\"h\":\"标识符和关键字的区别是什么？\",\"t\":[\"在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了 标识符 。简单来说， 标识符就是一个名字 。\",\"有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是 关键字 。简单来说，关键字是被赋予特殊含义的标识符 。比如，在我们的日常生活中，如果我们想要开一家店，则要给这个店起一个名字，起的这个“名字”就叫标识符。但是我们店的名字不能叫“警察局”，因为“警察局”这个名字已经被赋予了特殊的含义，而“警察局”就是我们日常生活中的关键字。\"]},\"42\":{\"h\":\"Java 语言关键字有哪些？\",\"t\":[\"分类\",\"关键字\",\"访问控制\",\"private\",\"protected\",\"public\",\"类，方法和变量修饰符\",\"abstract\",\"class\",\"extends\",\"final\",\"implements\",\"interface\",\"native\",\"new\",\"static\",\"strictfp\",\"synchronized\",\"transient\",\"volatile\",\"enum\",\"程序控制\",\"break\",\"continue\",\"return\",\"do\",\"while\",\"if\",\"else\",\"for\",\"instanceof\",\"switch\",\"case\",\"default\",\"assert\",\"错误处理\",\"try\",\"catch\",\"throw\",\"throws\",\"finally\",\"包相关\",\"import\",\"package\",\"基本类型\",\"boolean\",\"byte\",\"char\",\"double\",\"float\",\"int\",\"long\",\"short\",\"变量引用\",\"super\",\"this\",\"void\",\"保留字\",\"goto\",\"const\",\"Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。\",\"default 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。\",\"在程序控制中，当在 switch 中匹配不到任何情况时，可以使用 default 来编写默认匹配的情况。\",\"在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 default 关键字来定义一个方法的默认实现。\",\"在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 default，但是这个修饰符加上了就会报错。\",\"⚠️ 注意：虽然 true, false, 和 null 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用。\",\"官方文档：https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html\"]},\"43\":{\"h\":\"自增自减运算符\",\"t\":[\"在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（--）。\",\"++ 和 -- 运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。例如，当 b = ++a 时，先自增（自己增加 1），再赋值（赋值给 b）；当 b = a++ 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。\"]},\"44\":{\"h\":\"移位运算符\",\"t\":[\"移位运算符是最基本的运算符之一，几乎每种编程语言都包含这一运算符。移位操作中，被操作的数据被视为二进制数，移位就是将其向左或向右移动若干位的运算。\",\"移位运算符在各种框架以及 JDK 自身的源码中使用还是挺广泛的，HashMap（JDK1.8） 中的 hash 方法的源码就用到了移位运算符：\",\"static final int hash(Object key) { int h; // key.hashCode()：返回散列值也就是hashcode // ^：按位异或 // >>>:无符号右移，忽略符号位，空位都以0补齐 return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } \",\"在 Java 代码里使用 <<、 >> 和>>>转换成的指令码运行起来会更高效些。\",\"掌握最基本的移位运算符知识还是很有必要的，这不光可以帮助我们在代码中使用，还可以帮助我们理解源码中涉及到移位运算符的代码。\",\"Java 中有三种移位运算符：\",\"Java 移位运算符总结\",\"<< :左移运算符，向左移若干位，高位丢弃，低位补零。x << 1,相当于 x 乘以 2(不溢出的情况下)。\",\">> :带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。x >> 1,相当于 x 除以 2。\",\">>> :无符号右移，忽略符号位，空位都以 0 补齐。\",\"由于 double，float 在二进制中的表现比较特殊，因此不能来进行移位操作。\",\"移位操作符实际上支持的类型只有int和long，编译器在对short、byte、char类型进行移位前，都会将其转换为int类型再操作。\",\"如果移位的位数超过数值所占有的位数会怎样？\",\"当 int 类型左移/右移位数大于等于 32 位操作时，会先求余（%）后再进行左移/右移操作。也就是说左移/右移 32 位相当于不进行移位操作（32%32=0），左移/右移 42 位相当于左移/右移 10 位（42%32=10）。当 long 类型进行左移/右移操作时，由于 long 对应的二进制是 64 位，因此求余操作的基数也变成了 64。\",\"也就是说：x<<42等同于x<<10，x>>42等同于x>>10，x >>>42等同于x >>> 10。\",\"左移运算符代码示例：\",\"int i = -1; System.out.println(\\\"初始数据：\\\" + i); System.out.println(\\\"初始数据对应的二进制字符串：\\\" + Integer.toBinaryString(i)); i <<= 10; System.out.println(\\\"左移 10 位后的数据 \\\" + i); System.out.println(\\\"左移 10 位后的数据对应的二进制字符 \\\" + Integer.toBinaryString(i)); \",\"输出：\",\"初始数据：-1 初始数据对应的二进制字符串：11111111111111111111111111111111 左移 10 位后的数据 -1024 左移 10 位后的数据对应的二进制字符 11111111111111111111110000000000 \",\"由于左移位数大于等于 32 位操作时，会先求余（%）后再进行左移操作，所以下面的代码左移 42 位相当于左移 10 位（42%32=10），输出结果和前面的代码一样。\",\"int i = -1; System.out.println(\\\"初始数据：\\\" + i); System.out.println(\\\"初始数据对应的二进制字符串：\\\" + Integer.toBinaryString(i)); i <<= 42; System.out.println(\\\"左移 10 位后的数据 \\\" + i); System.out.println(\\\"左移 10 位后的数据对应的二进制字符 \\\" + Integer.toBinaryString(i)); \",\"右移运算符使用类似，篇幅问题，这里就不做演示了。\"]},\"45\":{\"h\":\"continue、break 和 return 的区别是什么？\",\"t\":[\"在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：\",\"continue：指跳出当前的这一次循环，继续下一次循环。\",\"break：指跳出整个循环体，继续执行循环下面的语句。\",\"return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：\",\"return;：直接使用 return 结束方法执行，用于没有返回值函数的方法\",\"return value;：return 一个特定值，用于有返回值函数的方法\",\"思考一下：下列语句的运行结果是什么？\",\" public static void main(String[] args) { boolean flag = false; for (int i = 0; i <= 3; i++) { if (i == 0) { System.out.println(\\\"0\\\"); } else if (i == 1) { System.out.println(\\\"1\\\"); continue; } else if (i == 2) { System.out.println(\\\"2\\\"); flag = true; } else if (i == 3) { System.out.println(\\\"3\\\"); break; } else if (i == 4) { System.out.println(\\\"4\\\"); } System.out.println(\\\"xixi\\\"); } if (flag) { System.out.println(\\\"haha\\\"); return; } System.out.println(\\\"heihei\\\"); } \",\"运行结果：\",\"0 xixi 1 2 xixi 3 haha \"]},\"46\":{\"h\":\"基本数据类型\"},\"47\":{\"h\":\"Java 中的几种基本数据类型了解么？\",\"t\":[\"Java 中有 8 种基本数据类型，分别为：\",\"6 种数字类型： \",\"4 种整数型：byte、short、int、long\",\"2 种浮点型：float、double\",\"1 种字符类型：char\",\"1 种布尔型：boolean。\",\"这 8 种基本数据类型的默认值以及所占空间的大小如下：\",\"基本类型\",\"位数\",\"字节\",\"默认值\",\"取值范围\",\"byte\",\"8\",\"1\",\"0\",\"-128 ~ 127\",\"short\",\"16\",\"2\",\"0\",\"-32768（-2^15） ~ 32767（2^15 - 1）\",\"int\",\"32\",\"4\",\"0\",\"-2147483648 ~ 2147483647\",\"long\",\"64\",\"8\",\"0L\",\"-9223372036854775808（-2^63） ~ 9223372036854775807（2^63 -1）\",\"char\",\"16\",\"2\",\"'u0000'\",\"0 ~ 65535（2^16 - 1）\",\"float\",\"32\",\"4\",\"0f\",\"1.4E-45 ~ 3.4028235E38\",\"double\",\"64\",\"8\",\"0d\",\"4.9E-324 ~ 1.7976931348623157E308\",\"boolean\",\"1\",\"false\",\"true、false\",\"可以看到，像 byte、short、int、long能表示的最大正数都减 1 了。这是为什么呢？这是因为在二进制补码表示法中，最高位是用来表示符号的（0 表示正数，1 表示负数），其余位表示数值部分。所以，如果我们要表示最大的正数，我们需要把除了最高位之外的所有位都设为 1。如果我们再加 1，就会导致溢出，变成一个负数。\",\"对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。\",\"另外，Java 的每种基本类型所占存储空间的大小不会像其他大多数语言那样随机器硬件架构的变化而变化。这种所占存储空间大小的不变性是 Java 程序比用其他大多数语言编写的程序更具可移植性的原因之一（《Java 编程思想》2.2 节有提到）。\",\"注意：\",\"Java 里使用 long 类型的数据一定要在数值后面加上 L，否则将作为整型解析。\",\"char a = 'h'char :单引号，String a = \\\"hello\\\" :双引号。\",\"这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean 。\"]},\"48\":{\"h\":\"基本类型和包装类型的区别？\",\"t\":[\"基本类型 vs 包装类型\",\"用途：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。\",\"存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 static 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。\",\"占用空间：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。\",\"默认值：成员变量包装类型不赋值就是 null ，而基本类型有默认值且不是 null。\",\"比较方式：对于基本数据类型来说，== 比较的是值。对于包装数据类型来说，== 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 equals() 方法。\",\"为什么说是几乎所有对象实例都存在于堆中呢？ 这是因为 HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存\",\"⚠️ 注意：基本数据类型存放在栈中是一个常见的误区！ 基本数据类型的成员变量如果没有被 static 修饰的话（不建议这么使用，应该要使用基本数据类型对应的包装类型），就存放在堆中。\",\"class BasicTypeVar{ private int x; } \"]},\"49\":{\"h\":\"包装类型的缓存机制了解么？\",\"t\":[\"Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。\",\"Byte,Short,Integer,Long 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，Character 创建了数值在 [0,127] 范围的缓存数据，Boolean 直接返回 True or False。\",\"Integer 缓存源码：\",\"public static Integer valueOf(int i) { if (i >= IntegerCache.low && i <= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } private static class IntegerCache { static final int low = -128; static final int high; static { // high value may be configured by property int h = 127; } } \",\"Character 缓存源码:\",\"public static Character valueOf(char c) { if (c <= 127) { // must cache return CharacterCache.cache[(int)c]; } return new Character(c); } private static class CharacterCache { private CharacterCache(){} static final Character cache[] = new Character[127 + 1]; static { for (int i = 0; i < cache.length; i++) cache[i] = new Character((char)i); } } \",\"Boolean 缓存源码：\",\"public static Boolean valueOf(boolean b) { return (b ? TRUE : FALSE); } \",\"如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。\",\"两种浮点数类型的包装类 Float,Double 并没有实现缓存机制。\",\"Integer i1 = 33; Integer i2 = 33; System.out.println(i1 == i2);// 输出 true Float i11 = 333f; Float i22 = 333f; System.out.println(i11 == i22);// 输出 false Double i3 = 1.2; Double i4 = 1.2; System.out.println(i3 == i4);// 输出 false \",\"下面我们来看一个问题：下面的代码的输出结果是 true 还是 false 呢？\",\"Integer i1 = 40; Integer i2 = new Integer(40); System.out.println(i1==i2); \",\"Integer i1=40 这一行代码会发生装箱，也就是说这行代码等价于 Integer i1=Integer.valueOf(40) 。因此，i1 直接使用的是缓存中的对象。而Integer i2 = new Integer(40) 会直接创建新的对象。\",\"因此，答案是 false 。你答对了吗？\",\"记住：所有整型包装类对象之间值的比较，全部使用 equals 方法比较。\"]},\"50\":{\"h\":\"自动装箱与拆箱了解吗？原理是什么？\",\"t\":[\"什么是自动拆装箱？\",\"装箱：将基本类型用它们对应的引用类型包装起来；\",\"拆箱：将包装类型转换为基本数据类型；\",\"举例：\",\"Integer i = 10; //装箱 int n = i; //拆箱 \",\"上面这两行代码对应的字节码为：\",\" L1 LINENUMBER 8 L1 ALOAD 0 BIPUSH 10 INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer; PUTFIELD AutoBoxTest.i : Ljava/lang/Integer; L2 LINENUMBER 9 L2 ALOAD 0 ALOAD 0 GETFIELD AutoBoxTest.i : Ljava/lang/Integer; INVOKEVIRTUAL java/lang/Integer.intValue ()I PUTFIELD AutoBoxTest.n : I RETURN \",\"从字节码中，我们发现装箱其实就是调用了 包装类的valueOf()方法，拆箱其实就是调用了 xxxValue()方法。\",\"因此，\",\"Integer i = 10 等价于 Integer i = Integer.valueOf(10)\",\"int n = i 等价于 int n = i.intValue();\",\"注意：如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。\",\"private static long sum() { // 应该使用 long 而不是 Long Long sum = 0L; for (long i = 0; i <= Integer.MAX_VALUE; i++) sum += i; return sum; } \"]},\"51\":{\"h\":\"为什么浮点数运算的时候会有精度丢失的风险？\",\"t\":[\"浮点数运算精度丢失代码演示：\",\"float a = 2.0f - 1.9f; float b = 1.8f - 1.7f; System.out.println(a);// 0.100000024 System.out.println(b);// 0.099999905 System.out.println(a == b);// false \",\"为什么会出现这个问题呢？\",\"这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。\",\"就比如说十进制下的 0.2 就没办法精确转换成二进制小数：\",\"// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止， // 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。 0.2 * 2 = 0.4 -> 0 0.4 * 2 = 0.8 -> 0 0.8 * 2 = 1.6 -> 1 0.6 * 2 = 1.2 -> 1 0.2 * 2 = 0.4 -> 0（发生循环） ... \",\"关于浮点数的更多内容，建议看一下计算机系统基础（四）浮点数这篇文章。\"]},\"52\":{\"h\":\"如何解决浮点数运算的精度丢失问题？\",\"t\":[\"BigDecimal 可以实现对浮点数的运算，不会造成精度丢失。通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 BigDecimal 来做的。\",\"BigDecimal a = new BigDecimal(\\\"1.0\\\"); BigDecimal b = new BigDecimal(\\\"0.9\\\"); BigDecimal c = new BigDecimal(\\\"0.8\\\"); BigDecimal x = a.subtract(b); BigDecimal y = b.subtract(c); System.out.println(x); /* 0.1 */ System.out.println(y); /* 0.1 */ System.out.println(Objects.equals(x, y)); /* true */ \",\"关于 BigDecimal 的详细介绍，可以看看我写的这篇文章：BigDecimal 详解。\"]},\"53\":{\"h\":\"超过 long 整型的数据应该如何表示？\",\"t\":[\"基本数值类型都有一个表达范围，如果超过这个范围就会有数值溢出的风险。\",\"在 Java 中，64 位 long 整型是最大的整数类型。\",\"long l = Long.MAX_VALUE; System.out.println(l + 1); // -9223372036854775808 System.out.println(l + 1 == Long.MIN_VALUE); // true \",\"BigInteger 内部使用 int[] 数组来存储任意大小的整形数据。\",\"相对于常规整数类型的运算来说，BigInteger 运算的效率会相对较低。\"]},\"54\":{\"h\":\"变量\"},\"55\":{\"h\":\"成员变量与局部变量的区别？\",\"t\":[\"成员变量 vs 局部变量\",\"语法形式：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\",\"存储方式：从变量在内存中的存储方式来看，如果成员变量是使用 static 修饰的，那么这个成员变量是属于类的，如果没有使用 static 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。\",\"生存时间：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。\",\"默认值：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。\",\"为什么成员变量有默认值？\",\"先不考虑变量类型，如果没有默认值会怎样？变量存储的是内存地址对应的任意随机值，程序读取该值运行会出现意外。\",\"默认值有两种设置方式：手动和自动，根据第一点，没有手动赋值一定要自动赋值。成员变量在运行时可借助反射等方法手动赋值，而局部变量不行。\",\"对于编译器（javac）来说，局部变量没赋值很好判断，可以直接报错。而成员变量可能是运行时赋值，无法判断，误报“没默认值”又会影响用户体验，所以采用自动赋默认值。\",\"成员变量与局部变量代码示例：\",\"public class VariableExample { // 成员变量 private String name; private int age; // 方法中的局部变量 public void method() { int num1 = 10; // 栈中分配的局部变量 String str = \\\"Hello, world!\\\"; // 栈中分配的局部变量 System.out.println(num1); System.out.println(str); } // 带参数的方法中的局部变量 public void method2(int num2) { int sum = num2 + 10; // 栈中分配的局部变量 System.out.println(sum); } // 构造方法中的局部变量 public VariableExample(String name, int age) { this.name = name; // 对成员变量进行赋值 this.age = age; // 对成员变量进行赋值 int num3 = 20; // 栈中分配的局部变量 String str2 = \\\"Hello, \\\" + this.name + \\\"!\\\"; // 栈中分配的局部变量 System.out.println(num3); System.out.println(str2); } } \"]},\"56\":{\"h\":\"静态变量有什么作用？\",\"t\":[\"静态变量也就是被 static 关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，静态变量只会被分配一次内存，即使创建多个对象，这样可以节省内存。\",\"静态变量是通过类名来访问的，例如StaticVariableExample.staticVar（如果被 private关键字修饰就无法这样访问了）。\",\"public class StaticVariableExample { // 静态变量 public static int staticVar = 0; } \",\"通常情况下，静态变量会被 final 关键字修饰成为常量。\",\"public class ConstantVariableExample { // 常量 public static final int constantVar = 0; } \"]},\"57\":{\"h\":\"字符型常量和字符串常量的区别?\",\"t\":[\"形式 : 字符常量是单引号引起的一个字符，字符串常量是双引号引起的 0 个或若干个字符。\",\"含义 : 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)。\",\"占内存大小：字符常量只占 2 个字节; 字符串常量占若干个字节。\",\"⚠️ 注意 char 在 Java 中占两个字节。\",\"字符型常量和字符串常量代码示例：\",\"public class StringExample { // 字符型常量 public static final char LETTER_A = 'A'; // 字符串常量 public static final String GREETING_MESSAGE = \\\"Hello, world!\\\"; public static void main(String[] args) { System.out.println(\\\"字符型常量占用的字节数为：\\\"+Character.BYTES); System.out.println(\\\"字符串常量占用的字节数为：\\\"+GREETING_MESSAGE.getBytes().length); } } \",\"输出：\",\"字符型常量占用的字节数为：2 字符串常量占用的字节数为：13 \"]},\"58\":{\"h\":\"方法\"},\"59\":{\"h\":\"什么是方法的返回值?方法有哪几种类型？\",\"t\":[\"方法的返回值 是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作！\",\"我们可以按照方法的返回值和参数类型将方法分为下面这几种：\",\"1、无参数无返回值的方法\",\"public void f1() { //...... } // 下面这个方法也没有返回值，虽然用到了 return public void f(int a) { if (...) { // 表示结束方法的执行,下方的输出语句不会执行 return; } System.out.println(a); } \",\"2、有参数无返回值的方法\",\"public void f2(Parameter 1, ..., Parameter n) { //...... } \",\"3、有返回值无参数的方法\",\"public int f3() { //...... return x; } \",\"4、有返回值有参数的方法\",\"public int f4(int a, int b) { return a * b; } \"]},\"60\":{\"h\":\"静态方法为什么不能调用非静态成员?\",\"t\":[\"这个需要结合 JVM 的相关知识，主要原因如下：\",\"静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。\",\"在类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。\",\"public class Example { // 定义一个字符型常量 public static final char LETTER_A = 'A'; // 定义一个字符串常量 public static final String GREETING_MESSAGE = \\\"Hello, world!\\\"; public static void main(String[] args) { // 输出字符型常量的值 System.out.println(\\\"字符型常量的值为：\\\" + LETTER_A); // 输出字符串常量的值 System.out.println(\\\"字符串常量的值为：\\\" + GREETING_MESSAGE); } } \"]},\"61\":{\"h\":\"静态方法和实例方法有何不同？\",\"t\":[\"1、调用方式\",\"在外部调用静态方法时，可以使用 类名.方法名 的方式，也可以使用 对象.方法名 的方式，而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象 。\",\"不过，需要注意的是一般不建议使用 对象.方法名 的方式来调用静态方法。这种方式非常容易造成混淆，静态方法不属于类的某个对象而是属于这个类。\",\"因此，一般建议使用 类名.方法名 的方式来调用静态方法。\",\"public class Person { public void method() { //...... } public static void staicMethod(){ //...... } public static void main(String[] args) { Person person = new Person(); // 调用实例方法 person.method(); // 调用静态方法 Person.staicMethod() } } \",\"2、访问类成员是否存在限制\",\"静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。\"]},\"62\":{\"h\":\"重载和重写有什么区别？\",\"t\":[\"重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理\",\"重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法\"]},\"63\":{\"h\":\"重载\",\"t\":[\"发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。\",\"《Java 核心技术》这本书是这样介绍重载的：\",\"如果多个方法(比如 StringBuilder 的构造方法)有相同的名字、不同的参数， 便产生了重载。\",\"StringBuilder sb = new StringBuilder(); StringBuilder sb2 = new StringBuilder(\\\"HelloWorld\\\"); \",\"编译器必须挑选出具体执行哪个方法，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。 如果编译器找不到匹配的参数， 就会产生编译时错误， 因为根本不存在匹配， 或者没有一个比其他的更好(这个过程被称为重载解析(overloading resolution))。\",\"Java 允许重载任何方法， 而不只是构造器方法。\",\"综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\"]},\"64\":{\"h\":\"重写\",\"t\":[\"重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。\",\"方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。\",\"如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。\",\"构造方法无法被重写\"]},\"65\":{\"h\":\"总结\",\"t\":[\"综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\",\"区别点\",\"重载方法\",\"重写方法\",\"发生范围\",\"同一个类\",\"子类\",\"参数列表\",\"必须修改\",\"一定不能修改\",\"返回类型\",\"可修改\",\"子类方法返回值类型应比父类方法返回值类型更小或相等\",\"异常\",\"可修改\",\"子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；\",\"访问修饰符\",\"可修改\",\"一定不能做更严格的限制（可以降低限制）\",\"发生阶段\",\"编译期\",\"运行期\",\"方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂 Java 讲义》，issue#892 ）：\",\"“两同”即方法名相同、形参列表相同；\",\"“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；\",\"“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。\",\"⭐️ 关于 重写的返回值类型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。\",\"public class Hero { public String name() { return \\\"超级英雄\\\"; } } public class SuperMan extends Hero{ @Override public String name() { return \\\"超人\\\"; } public Hero hero() { return new Hero(); } } public class SuperSuperMan extends SuperMan { public String name() { return \\\"超级超级英雄\\\"; } @Override public SuperMan hero() { return new SuperMan(); } } \"]},\"66\":{\"h\":\"什么是可变长参数？\",\"t\":[\"从 Java5 开始，Java 支持定义可变长参数，所谓可变长参数就是允许在调用方法时传入不定长度的参数。就比如下面的这个 printVariable 方法就可以接受 0 个或者多个参数。\",\"public static void method1(String... args) { //...... } \",\"另外，可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数。\",\"public static void method2(String arg1, String... args) { //...... } \",\"遇到方法重载的情况怎么办呢？会优先匹配固定参数还是可变参数的方法呢？\",\"答案是会优先匹配固定参数的方法，因为固定参数的方法匹配度更高。\",\"我们通过下面这个例子来证明一下。\",\"/** * 微信搜 JavaGuide 回复\\\"面试突击\\\"即可免费领取个人原创的 Java 面试手册 * * @author Guide哥 * @date 2021/12/13 16:52 **/ public class VariableLengthArgument { public static void printVariable(String... args) { for (String s : args) { System.out.println(s); } } public static void printVariable(String arg1, String arg2) { System.out.println(arg1 + arg2); } public static void main(String[] args) { printVariable(\\\"a\\\", \\\"b\\\"); printVariable(\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"); } } \",\"输出：\",\"ab a b c d \",\"另外，Java 的可变参数编译后实际会被转换成一个数组，我们看编译后生成的 class文件就可以看出来了。\",\"public class VariableLengthArgument { public static void printVariable(String... args) { String[] var1 = args; int var2 = args.length; for(int var3 = 0; var3 < var2; ++var3) { String s = var1[var3]; System.out.println(s); } } // ...... } \"]},\"67\":{\"h\":\"参考\",\"t\":[\"What is the difference between JDK and JRE?：https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre\",\"Oracle vs OpenJDK：https://www.educba.com/oracle-vs-openjdk/\",\"Differences between Oracle JDK and OpenJDK：https://stackoverflow.com/questions/22358071/differences-between-oracle-jdk-and-openjdk\",\"彻底弄懂 Java 的移位操作符：https://juejin.cn/post/6844904025880526861\",\"File not found\"]},\"68\":{\"c\":[\"Java\"]},\"69\":{\"c\":[\"Java基础\"]},\"70\":{\"h\":\"Java 值传递详解\",\"t\":[\"开始之前，我们先来搞懂下面这两个概念：\",\"形参&实参\",\"值传递&引用传递\"]},\"71\":{\"h\":\"形参&实参\",\"t\":[\"方法的定义可能会用到 参数（有参的方法），参数在程序语言中分为：\",\"实参（实际参数，Arguments）：用于传递给函数/方法的参数，必须有确定的值。\",\"形参（形式参数，Parameters）：用于定义函数/方法，接收实参，不需要有确定的值。\",\"String hello = \\\"Hello!\\\"; // hello 为实参 sayHello(hello); // str 为形参 void sayHello(String str) { System.out.println(str); } \"]},\"72\":{\"h\":\"值传递&引用传递\",\"t\":[\"程序设计语言将实参传递给方法（或函数）的方式分为两种：\",\"值传递：方法接收的是实参值的拷贝，会创建副本。\",\"引用传递：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。\",\"很多程序设计语言（比如 C++、 Pascal )提供了两种参数传递的方式，不过，在 Java 中只有值传递。\"]},\"73\":{\"h\":\"为什么 Java 只有值传递？\",\"t\":[\"为什么说 Java 只有值传递呢？ 不需要太多废话，我通过 3 个例子来给大家证明。\"]},\"74\":{\"h\":\"案例 1：传递基本类型参数\",\"t\":[\"代码：\",\"public static void main(String[] args) { int num1 = 10; int num2 = 20; swap(num1, num2); System.out.println(\\\"num1 = \\\" + num1); System.out.println(\\\"num2 = \\\" + num2); } public static void swap(int a, int b) { int temp = a; a = b; b = temp; System.out.println(\\\"a = \\\" + a); System.out.println(\\\"b = \\\" + b); } \",\"输出：\",\"a = 20 b = 10 num1 = 10 num2 = 20 \",\"解析：\",\"在 swap() 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。\",\"通过上面例子，我们已经知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看案例 2。\"]},\"75\":{\"h\":\"案例 2：传递引用类型参数 1\",\"t\":[\"代码：\",\" public static void main(String[] args) { int[] arr = { 1, 2, 3, 4, 5 }; System.out.println(arr[0]); change(arr); System.out.println(arr[0]); } public static void change(int[] array) { // 将数组的第一个元素变为0 array[0] = 0; } \",\"输出：\",\"1 0 \",\"解析：\",\"看了这个案例很多人肯定觉得 Java 对引用类型的参数采用的是引用传递。\",\"实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！\",\"也就是说 change 方法的参数拷贝的是 arr （实参）的地址，因此，它和 arr 指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。\",\"为了更强有力地反驳 Java 对引用类型的参数采用的不是引用传递，我们再来看下面这个案例！\"]},\"76\":{\"h\":\"案例 3：传递引用类型参数 2\",\"t\":[\"public class Person { private String name; // 省略构造函数、Getter&Setter方法 } public static void main(String[] args) { Person xiaoZhang = new Person(\\\"小张\\\"); Person xiaoLi = new Person(\\\"小李\\\"); swap(xiaoZhang, xiaoLi); System.out.println(\\\"xiaoZhang:\\\" + xiaoZhang.getName()); System.out.println(\\\"xiaoLi:\\\" + xiaoLi.getName()); } public static void swap(Person person1, Person person2) { Person temp = person1; person1 = person2; person2 = temp; System.out.println(\\\"person1:\\\" + person1.getName()); System.out.println(\\\"person2:\\\" + person2.getName()); } \",\"输出:\",\"person1:小李 person2:小张 xiaoZhang:小张 xiaoLi:小李 \",\"解析：\",\"怎么回事？？？两个引用类型的形参互换并没有影响实参啊！\",\"swap 方法的参数 person1 和 person2 只是拷贝的实参 xiaoZhang 和 xiaoLi 的地址。因此， person1 和 person2 的互换只是拷贝的两个地址的互换罢了，并不会影响到实参 xiaoZhang 和 xiaoLi 。\"]},\"77\":{\"h\":\"引用传递是怎么样的？\",\"t\":[\"看到这里，相信你已经知道了 Java 中只有值传递，是没有引用传递的。 但是，引用传递到底长什么样呢？下面以 C++ 的代码为例，让你看一下引用传递的庐山真面目。\",\"#include <iostream> void incr(int& num) { std::cout << \\\"incr before: \\\" << num << \\\"\\\\n\\\"; num++; std::cout << \\\"incr after: \\\" << num << \\\"\\\\n\\\"; } int main() { int age = 10; std::cout << \\\"invoke before: \\\" << age << \\\"\\\\n\\\"; incr(age); std::cout << \\\"invoke after: \\\" << age << \\\"\\\\n\\\"; } \",\"输出结果：\",\"invoke before: 10 incr before: 10 incr after: 11 invoke after: 11 \",\"分析：可以看到，在 incr 函数中对形参的修改，可以影响到实参的值。要注意：这里的 incr 形参的数据类型用的是 int& 才为引用传递，如果是用 int 的话还是值传递哦！\"]},\"78\":{\"h\":\"为什么 Java 不引入引用传递呢？\",\"t\":[\"引用传递看似很好，能在方法内就直接把实参的值修改了，但是，为什么 Java 不引入引用传递呢？\",\"注意：以下为个人观点看法，并非来自于 Java 官方：\",\"出于安全考虑，方法内部对值进行的操作，对于调用者都是未知的（把方法定义为接口，调用方不关心具体实现）。你也想象一下，如果拿着银行卡去取钱，取的是 100，扣的是 200，是不是很可怕。\",\"Java 之父 James Gosling 在设计之初就看到了 C、C++ 的许多弊端，所以才想着去设计一门新的语言 Java。在他设计 Java 的时候就遵循了简单易用的原则，摒弃了许多开发者一不留意就会造成问题的“特性”，语言本身的东西少了，开发者要学习的东西也少了。\"]},\"79\":{\"h\":\"总结\",\"t\":[\"Java 中将实参传递给方法（或函数）的方式是 值传递：\",\"如果参数是基本类型的话，很简单，传递的就是基本类型的字面量值的拷贝，会创建副本。\",\"如果参数是引用类型，传递的就是实参所引用的对象在堆中地址值的拷贝，同样也会创建副本。\"]},\"80\":{\"h\":\"参考\",\"t\":[\"《Java 核心技术卷 Ⅰ》基础知识第十版第四章 4.5 小节\",\"Java 到底是值传递还是引用传递？ - Hollis 的回答 - 知乎\",\"Oracle Java Tutorials - Passing Information to a Method or a Constructor\",\"Interview with James Gosling, Father of Java\",\"File not found\"]},\"81\":{\"c\":[\"Java\"]},\"82\":{\"c\":[\"Java基础\"]},\"83\":{\"h\":\"Posts\"},\"84\":{\"h\":\"Basis\"},\"85\":{\"h\":\"Java\"}},\"dirtCount\":0,\"index\":[[\"知乎\",{\"1\":{\"80\":1}}],[\"知道有这个东西就好了\",{\"1\":{\"30\":1}}],[\"到底是值传递还是引用传递\",{\"1\":{\"80\":1}}],[\"到执行期时\",{\"1\":{\"35\":1}}],[\"ⅰ\",{\"1\":{\"80\":1}}],[\"很简单\",{\"1\":{\"79\":1}}],[\"很多程序设计语言\",{\"1\":{\"72\":1}}],[\"很多公司都基于\",{\"1\":{\"37\":1}}],[\"很多框架和库\",{\"1\":{\"36\":1}}],[\"摒弃了许多开发者一不留意就会造成问题的\",{\"1\":{\"78\":1}}],[\"扣的是\",{\"1\":{\"78\":1}}],[\"把方法定义为接口\",{\"1\":{\"78\":1}}],[\"把大部分问题都解决掉了才在\",{\"1\":{\"37\":1}}],[\"出于安全考虑\",{\"1\":{\"78\":1}}],[\"能在方法内就直接把实参的值修改了\",{\"1\":{\"78\":1}}],[\"能够帮助看代码的人快速地理清代码之间的逻辑关系\",{\"1\":{\"40\":1}}],[\"能够创建和编译\",{\"1\":{\"33\":1}}],[\"才为引用传递\",{\"1\":{\"77\":1}}],[\"要注意\",{\"1\":{\"77\":1}}],[\"要是你们搞出来什么好玩的东西\",{\"1\":{\"37\":1}}],[\"函数中对形参的修改\",{\"1\":{\"77\":1}}],[\"让你看一下引用传递的庐山真面目\",{\"1\":{\"77\":1}}],[\"怎么回事\",{\"1\":{\"76\":1}}],[\"小节\",{\"1\":{\"80\":1}}],[\"小李\",{\"1\":{\"76\":3}}],[\"小张\",{\"1\":{\"76\":3}}],[\"省略构造函数\",{\"1\":{\"76\":1}}],[\"看到这里\",{\"1\":{\"77\":1}}],[\"看了这个案例很多人肯定觉得\",{\"1\":{\"75\":1}}],[\"看起来像关键字但实际上他们是字面值\",{\"1\":{\"42\":1}}],[\"副本的内容无论怎么修改\",{\"1\":{\"74\":1}}],[\"解析\",{\"1\":{\"74\":1,\"75\":1,\"76\":1}}],[\"解释器来解释执行\",{\"1\":{\"35\":1}}],[\"解释器的\",{\"1\":{\"34\":1}}],[\"解释型语言开发效率比较快\",{\"1\":{\"35\":1}}],[\"解释型语言会通过解释器一句一句的将代码解释\",{\"1\":{\"35\":1}}],[\"解释型\",{\"1\":{\"35\":1}}],[\"传递的就是实参所引用的对象在堆中地址值的拷贝\",{\"1\":{\"79\":1}}],[\"传递的就是基本类型的字面量值的拷贝\",{\"1\":{\"79\":1}}],[\"传递引用类型参数\",{\"0\":{\"75\":1,\"76\":1}}],[\"传递基本类型参数\",{\"0\":{\"74\":1}}],[\"传送门\",{\"1\":{\"1\":1}}],[\"案例\",{\"0\":{\"74\":1,\"75\":1,\"76\":1}}],[\"接收实参\",{\"1\":{\"71\":1}}],[\"引用传递看似很好\",{\"1\":{\"78\":1}}],[\"引用传递到底长什么样呢\",{\"1\":{\"77\":1}}],[\"引用传递是怎么样的\",{\"0\":{\"77\":1}}],[\"引用传递\",{\"0\":{\"72\":1},\"1\":{\"70\":1,\"72\":1}}],[\"引入了一种新的编译模式\",{\"1\":{\"36\":1}}],[\"彻底弄懂\",{\"1\":{\"67\":1}}],[\"questions\",{\"1\":{\"67\":2}}],[\"5\",{\"1\":{\"75\":1,\"80\":1}}],[\"52\",{\"1\":{\"66\":1}}],[\"544\",{\"1\":{\"29\":1}}],[\"面试手册\",{\"1\":{\"66\":1}}],[\"面试突击\",{\"1\":{\"66\":1}}],[\"面向对象\",{\"1\":{\"29\":1}}],[\"回复\",{\"1\":{\"66\":1}}],[\"微信搜\",{\"1\":{\"66\":1}}],[\"微服务和云原生开发\",{\"1\":{\"33\":1}}],[\"遇到方法重载的情况怎么办呢\",{\"1\":{\"66\":1}}],[\"超级超级英雄\",{\"1\":{\"65\":1}}],[\"超级英雄\",{\"1\":{\"65\":1}}],[\"超人\",{\"1\":{\"65\":1}}],[\"超过\",{\"0\":{\"53\":1}}],[\"⭐️\",{\"1\":{\"65\":1}}],[\"指向的是同一个数组对象\",{\"1\":{\"75\":1}}],[\"指的是子类方法的访问权限应比父类方法的访问权限更大或相等\",{\"1\":{\"65\":1}}],[\"指的是子类方法返回值类型应比父类方法返回值类型更小或相等\",{\"1\":{\"65\":1}}],[\"指跳出整个循环体\",{\"1\":{\"45\":1}}],[\"指跳出当前的这一次循环\",{\"1\":{\"45\":1}}],[\"形参的数据类型用的是\",{\"1\":{\"77\":1}}],[\"形参\",{\"0\":{\"71\":1},\"1\":{\"70\":1,\"71\":1}}],[\"形参列表相同\",{\"1\":{\"65\":1}}],[\"形式参数\",{\"1\":{\"71\":1}}],[\"形式\",{\"1\":{\"57\":1}}],[\"讲义\",{\"1\":{\"65\":1}}],[\"疯狂\",{\"1\":{\"65\":1}}],[\"异常\",{\"1\":{\"65\":1}}],[\"必须有确定的值\",{\"1\":{\"71\":1}}],[\"必须修改\",{\"1\":{\"65\":1}}],[\"必然会引起很多\",{\"1\":{\"37\":1}}],[\"子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等\",{\"1\":{\"65\":2}}],[\"子类方法返回值类型应比父类方法返回值类型更小或相等\",{\"1\":{\"64\":1,\"65\":1}}],[\"子类\",{\"1\":{\"65\":1}}],[\"同样也会创建副本\",{\"1\":{\"79\":1}}],[\"同一个类\",{\"1\":{\"65\":1}}],[\"同时你也不可以作为标识符来使用\",{\"1\":{\"42\":1}}],[\"同时又保留了解释型语言可移植的特点\",{\"1\":{\"34\":1}}],[\"同时还包括了\",{\"1\":{\"33\":1}}],[\"同时还包含了编译\",{\"1\":{\"33\":1}}],[\"区别点\",{\"1\":{\"65\":1}}],[\"区分下\",{\"1\":{\"37\":1}}],[\"总结\",{\"0\":{\"65\":1,\"79\":1}}],[\"抛出的异常范围小于等于父类\",{\"1\":{\"64\":1}}],[\"综上\",{\"1\":{\"63\":1,\"65\":1}}],[\"允许重载任何方法\",{\"1\":{\"63\":1}}],[\"便产生了重载\",{\"1\":{\"63\":1}}],[\"核心技术卷\",{\"1\":{\"80\":1}}],[\"核心技术\",{\"1\":{\"63\":1}}],[\"顺序不同\",{\"1\":{\"63\":1}}],[\"输入数据一样\",{\"1\":{\"62\":1}}],[\"输出结果\",{\"1\":{\"77\":1}}],[\"输出结果和前面的代码一样\",{\"1\":{\"44\":1}}],[\"输出字符串常量的值\",{\"1\":{\"60\":1}}],[\"输出字符型常量的值\",{\"1\":{\"60\":1}}],[\"输出\",{\"1\":{\"44\":1,\"49\":3,\"57\":1,\"66\":1,\"74\":1,\"75\":1,\"76\":1}}],[\"输出的是\",{\"1\":{\"43\":1}}],[\"重写时是可以返回该引用类型的子类的\",{\"1\":{\"65\":1}}],[\"重写的返回值类型\",{\"1\":{\"65\":1}}],[\"重写方法\",{\"1\":{\"65\":1}}],[\"重写就是子类对父类方法的重新改造\",{\"1\":{\"65\":1}}],[\"重写就是当子类继承自父类的相同方法\",{\"1\":{\"62\":1}}],[\"重写发生在运行期\",{\"1\":{\"64\":1}}],[\"重写\",{\"0\":{\"64\":1}}],[\"重载方法\",{\"1\":{\"65\":1}}],[\"重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理\",{\"1\":{\"63\":1}}],[\"重载就是同样的一个方法能够根据输入数据的不同\",{\"1\":{\"62\":1}}],[\"重载\",{\"0\":{\"63\":1}}],[\"重载和重写有什么区别\",{\"0\":{\"62\":1}}],[\"做出不同的处理\",{\"1\":{\"62\":1}}],[\"调用方不关心具体实现\",{\"1\":{\"78\":1}}],[\"调用方式\",{\"1\":{\"61\":1}}],[\"调用静态方法\",{\"1\":{\"61\":1}}],[\"调用静态方法可以无需创建对象\",{\"1\":{\"61\":1}}],[\"调用实例方法\",{\"1\":{\"61\":1}}],[\"调试器\",{\"1\":{\"33\":1}}],[\"定义一个字符串常量\",{\"1\":{\"60\":1}}],[\"定义一个字符型常量\",{\"1\":{\"60\":1}}],[\"定制的\",{\"1\":{\"33\":1}}],[\"此时调用在内存中还不存在的非静态成员\",{\"1\":{\"60\":1}}],[\"此时pages页会显示访问域名\",{\"1\":{\"21\":1}}],[\"静态方法在访问本类的成员时\",{\"1\":{\"61\":1}}],[\"静态方法不属于类的某个对象而是属于这个类\",{\"1\":{\"61\":1}}],[\"静态方法和实例方法有何不同\",{\"0\":{\"61\":1}}],[\"静态方法是属于类的\",{\"1\":{\"60\":1}}],[\"静态方法为什么不能调用非静态成员\",{\"0\":{\"60\":1}}],[\"静态变量会被\",{\"1\":{\"56\":1}}],[\"静态变量\",{\"1\":{\"56\":1}}],[\"静态变量是通过类名来访问的\",{\"1\":{\"56\":1}}],[\"静态变量只会被分配一次内存\",{\"1\":{\"56\":1}}],[\"静态变量也就是被\",{\"1\":{\"56\":1}}],[\"静态变量有什么作用\",{\"0\":{\"56\":1}}],[\"使得它可以用于其他的操作\",{\"1\":{\"59\":1}}],[\"使用反射等\",{\"1\":{\"33\":1}}],[\"使用\",{\"1\":{\"33\":1,\"37\":1}}],[\"返回类型\",{\"1\":{\"65\":1}}],[\"返回值的作用是接收出结果\",{\"1\":{\"59\":1}}],[\"返回散列值也就是hashcode\",{\"1\":{\"44\":1}}],[\"该字符串在内存中存放位置\",{\"1\":{\"57\":1}}],[\"该映像仅包含给定应用程序所需的模块\",{\"1\":{\"33\":1}}],[\"含义\",{\"1\":{\"57\":1}}],[\"字符型常量的值为\",{\"1\":{\"60\":1}}],[\"字符型常量占用的字节数为\",{\"1\":{\"57\":2}}],[\"字符型常量\",{\"1\":{\"57\":1}}],[\"字符型常量和字符串常量代码示例\",{\"1\":{\"57\":1}}],[\"字符型常量和字符串常量的区别\",{\"0\":{\"57\":1}}],[\"字符串常量的值为\",{\"1\":{\"60\":1}}],[\"字符串常量占用的字节数为\",{\"1\":{\"57\":2}}],[\"字符串常量占若干个字节\",{\"1\":{\"57\":1}}],[\"字符串常量\",{\"1\":{\"57\":1}}],[\"字符串常量代表一个地址值\",{\"1\":{\"57\":1}}],[\"字符串常量是双引号引起的\",{\"1\":{\"57\":1}}],[\"字符常量只占\",{\"1\":{\"57\":1}}],[\"字符常量相当于一个整型值\",{\"1\":{\"57\":1}}],[\"字符常量是单引号引起的一个字符\",{\"1\":{\"57\":1}}],[\"字节\",{\"1\":{\"47\":1}}],[\"字节码中不保留注释\",{\"1\":{\"40\":1}}],[\"字节码和不同系统的\",{\"1\":{\"32\":1}}],[\"字节码的虚拟机\",{\"1\":{\"32\":1}}],[\"常量\",{\"1\":{\"56\":1}}],[\"常见的一种情况是需要某个整数类型变量增加\",{\"1\":{\"43\":1}}],[\"常见的解释性语言有\",{\"1\":{\"35\":1}}],[\"常见的编译性语言有\",{\"1\":{\"35\":1}}],[\"构造方法无法被重写\",{\"1\":{\"64\":1}}],[\"构造方法中的局部变量\",{\"1\":{\"55\":1}}],[\"构建\",{\"1\":{\"37\":1}}],[\"构建的\",{\"1\":{\"37\":1}}],[\"带参数的方法中的局部变量\",{\"1\":{\"55\":1}}],[\"带符号右移\",{\"1\":{\"44\":1}}],[\"栈中分配的局部变量\",{\"1\":{\"55\":5}}],[\"又会影响用户体验\",{\"1\":{\"55\":1}}],[\"误报\",{\"1\":{\"55\":1}}],[\"手动和自动\",{\"1\":{\"55\":1}}],[\"生存时间\",{\"1\":{\"55\":1}}],[\"生成字节码\",{\"1\":{\"35\":1}}],[\"生成模板\",{\"1\":{\"11\":1}}],[\"生成\",{\"1\":{\"11\":1}}],[\"语法形式\",{\"1\":{\"55\":1}}],[\"语言本身的东西少了\",{\"1\":{\"78\":1}}],[\"语言本身的设计就提供了多重安全防护机制如访问权限修饰符\",{\"1\":{\"29\":1}}],[\"语言关键字有哪些\",{\"0\":{\"42\":1}}],[\"语言已经赋予了其特殊的含义\",{\"1\":{\"41\":1}}],[\"语言既具有编译型语言的特征\",{\"1\":{\"35\":1}}],[\"语言通过字节码的方式\",{\"1\":{\"34\":1}}],[\"语言\",{\"0\":{\"35\":1},\"1\":{\"32\":1,\"35\":1,\"36\":2}}],[\"语言最大的优势\",{\"1\":{\"29\":1}}],[\"语言的运行效率还是非常不错的\",{\"1\":{\"29\":1}}],[\"语言却提供了多线程支持\",{\"1\":{\"29\":1}}],[\"语言没有内置的多线程机制\",{\"1\":{\"29\":1}}],[\"语言有哪些特点\",{\"0\":{\"29\":1}}],[\"局部变量没赋值很好判断\",{\"1\":{\"55\":1}}],[\"局部变量则存在于栈内存\",{\"1\":{\"55\":1}}],[\"局部变量\",{\"1\":{\"55\":1}}],[\"成员变量与局部变量代码示例\",{\"1\":{\"55\":1}}],[\"成员变量与局部变量的区别\",{\"0\":{\"55\":1}}],[\"成员变量在运行时可借助反射等方法手动赋值\",{\"1\":{\"55\":1}}],[\"成员变量如果没有被赋初始值\",{\"1\":{\"55\":1}}],[\"成员变量是对象的一部分\",{\"1\":{\"55\":1}}],[\"成员变量是属于类的\",{\"1\":{\"55\":1}}],[\"成员变量和局部变量都能被\",{\"1\":{\"55\":1}}],[\"成员变量可以被\",{\"1\":{\"55\":1}}],[\"成员变量\",{\"1\":{\"55\":2}}],[\"成员变量包装类型不赋值就是\",{\"1\":{\"48\":1}}],[\"数组来存储任意大小的整形数据\",{\"1\":{\"53\":1}}],[\"数据库又是闭源的\",{\"1\":{\"37\":1}}],[\"数据库而著名\",{\"1\":{\"37\":1}}],[\"内部逻辑可以改变\",{\"1\":{\"65\":1}}],[\"内部使用\",{\"1\":{\"53\":1}}],[\"内存占用和打包体积\",{\"1\":{\"36\":1}}],[\"整型是最大的整数类型\",{\"1\":{\"53\":1}}],[\"整型的数据应该如何表示\",{\"0\":{\"53\":1}}],[\"详解\",{\"1\":{\"52\":1}}],[\"来说\",{\"1\":{\"55\":1}}],[\"来做的\",{\"1\":{\"52\":1}}],[\"来编写默认匹配的情况\",{\"1\":{\"42\":1}}],[\"来编译和运行\",{\"1\":{\"33\":1}}],[\"大部分需要浮点数精确运算结果的业务场景\",{\"1\":{\"52\":1}}],[\"大概每三年都会推出一个\",{\"1\":{\"37\":1}}],[\"浮点数这篇文章\",{\"1\":{\"51\":1}}],[\"浮点数运算精度丢失代码演示\",{\"1\":{\"51\":1}}],[\"四\",{\"1\":{\"51\":1}}],[\"得到的整数部分从上到下排列就是二进制的结果\",{\"1\":{\"51\":1}}],[\"宽度是有限的\",{\"1\":{\"51\":1}}],[\"举例\",{\"1\":{\"50\":1}}],[\"举个例子\",{\"1\":{\"36\":1,\"40\":1}}],[\"将数组的第一个元素变为0\",{\"1\":{\"75\":1}}],[\"将包装类型转换为基本数据类型\",{\"1\":{\"50\":1}}],[\"将基本类型用它们对应的引用类型包装起来\",{\"1\":{\"50\":1}}],[\"拆箱其实就是调用了\",{\"1\":{\"50\":1}}],[\"拆箱\",{\"1\":{\"50\":2}}],[\"装箱\",{\"1\":{\"50\":2}}],[\"什么是可变长参数\",{\"0\":{\"66\":1}}],[\"什么是方法的返回值\",{\"0\":{\"59\":1}}],[\"什么是自动拆装箱\",{\"1\":{\"50\":1}}],[\"什么是字节码\",{\"0\":{\"34\":1}}],[\"原理是什么\",{\"0\":{\"50\":1}}],[\"原来是\",{\"1\":{\"37\":1}}],[\"记住\",{\"1\":{\"49\":1}}],[\"两个引用类型的形参互换并没有影响实参啊\",{\"1\":{\"76\":1}}],[\"两小\",{\"1\":{\"65\":1}}],[\"两同\",{\"1\":{\"65\":1}}],[\"两同两小一大\",{\"1\":{\"65\":1}}],[\"两种浮点数类型的包装类\",{\"1\":{\"49\":1}}],[\"两者稳定性其实也是差不多的\",{\"1\":{\"37\":1}}],[\"两者各有优点\",{\"1\":{\"36\":1}}],[\"两者的关键指标对比\",{\"1\":{\"36\":1}}],[\"缓存的范围区间的大小只是在性能和资源之间的权衡\",{\"1\":{\"49\":1}}],[\"缓存源码\",{\"1\":{\"49\":3}}],[\"范围的缓存数据\",{\"1\":{\"49\":1}}],[\"全部使用\",{\"1\":{\"48\":1,\"49\":1}}],[\"占内存大小\",{\"1\":{\"57\":1}}],[\"占用空间\",{\"1\":{\"48\":1}}],[\"占个位\",{\"0\":{\"3\":1},\"1\":{\"3\":1}}],[\"存放在\",{\"1\":{\"48\":1}}],[\"存储方式\",{\"1\":{\"48\":1,\"55\":1}}],[\"存储库中的源代码与用于构建\",{\"1\":{\"37\":1}}],[\"未被\",{\"1\":{\"48\":1}}],[\"双引号\",{\"1\":{\"47\":1}}],[\"单引号\",{\"1\":{\"47\":1}}],[\"单行注释\",{\"1\":{\"40\":1}}],[\"否则将作为整型解析\",{\"1\":{\"47\":1}}],[\"里使用\",{\"1\":{\"47\":1}}],[\"节有提到\",{\"1\":{\"47\":1}}],[\"另外\",{\"1\":{\"47\":1,\"66\":2}}],[\"逻辑上理解是占用\",{\"1\":{\"47\":1}}],[\"厂商的具体实现\",{\"1\":{\"47\":1}}],[\"变成一个负数\",{\"1\":{\"47\":1}}],[\"变量存储的是内存地址对应的任意随机值\",{\"1\":{\"55\":1}}],[\"变量引用\",{\"1\":{\"42\":1}}],[\"变量\",{\"0\":{\"54\":1},\"1\":{\"41\":1}}],[\"表示结束方法的执行\",{\"1\":{\"59\":1}}],[\"表示负数\",{\"1\":{\"47\":1}}],[\"表示正数\",{\"1\":{\"47\":1}}],[\"像\",{\"1\":{\"47\":1}}],[\"u0000\",{\"1\":{\"47\":1}}],[\"users\",{\"1\":{\"11\":2}}],[\"取的是\",{\"1\":{\"78\":1}}],[\"取值范围\",{\"1\":{\"47\":1}}],[\"取而代之的是模块系统\",{\"1\":{\"33\":1}}],[\"种包装类默认创建了数值\",{\"1\":{\"49\":1}}],[\"种布尔型\",{\"1\":{\"47\":1}}],[\"种字符类型\",{\"1\":{\"47\":1}}],[\"种浮点型\",{\"1\":{\"47\":1}}],[\"种整数型\",{\"1\":{\"47\":1}}],[\"种数字类型\",{\"1\":{\"47\":1}}],[\"种基本数据类型的默认值以及所占空间的大小如下\",{\"1\":{\"47\":1}}],[\"种基本数据类型\",{\"1\":{\"47\":1}}],[\"分析\",{\"1\":{\"77\":1}}],[\"分别为\",{\"1\":{\"47\":1}}],[\"分类\",{\"1\":{\"42\":1}}],[\"<iostream>\",{\"1\":{\"77\":1}}],[\"<\",{\"1\":{\"49\":1,\"66\":1}}],[\"<=\",{\"1\":{\"45\":1,\"49\":2,\"50\":1}}],[\"<<=\",{\"1\":{\"44\":2}}],[\"<<\",{\"1\":{\"44\":3,\"77\":12}}],[\"思考一下\",{\"1\":{\"45\":1}}],[\"结束方法执行\",{\"1\":{\"45\":1}}],[\"结束该方法的运行\",{\"1\":{\"45\":1}}],[\"直到不存在小数为止\",{\"1\":{\"51\":1}}],[\"直到今天\",{\"1\":{\"29\":1}}],[\"直接返回\",{\"1\":{\"49\":1}}],[\"直接使用的是缓存中的对象\",{\"1\":{\"49\":1}}],[\"直接使用\",{\"1\":{\"45\":1}}],[\"继续执行循环下面的语句\",{\"1\":{\"45\":1}}],[\"继续下一次循环\",{\"1\":{\"45\":1}}],[\"继承和多态\",{\"1\":{\"38\":1}}],[\"继承\",{\"1\":{\"29\":1}}],[\"循环会正常结束\",{\"1\":{\"45\":1}}],[\"篇幅问题\",{\"1\":{\"44\":1}}],[\"初始数据对应的二进制字符串\",{\"1\":{\"44\":3}}],[\"初始数据\",{\"1\":{\"44\":3}}],[\"左移\",{\"1\":{\"44\":7}}],[\"左移运算符代码示例\",{\"1\":{\"44\":1}}],[\"左移运算符\",{\"1\":{\"44\":1}}],[\"位数\",{\"1\":{\"47\":1}}],[\"位后的数据对应的二进制字符\",{\"1\":{\"44\":3}}],[\"位后的数据\",{\"1\":{\"44\":3}}],[\"位\",{\"1\":{\"44\":3,\"47\":1,\"53\":1}}],[\"位相当于左移\",{\"1\":{\"44\":2}}],[\"位相当于不进行移位操作\",{\"1\":{\"44\":1}}],[\"位操作时\",{\"1\":{\"44\":2}}],[\"右移运算符使用类似\",{\"1\":{\"44\":1}}],[\"右移\",{\"1\":{\"44\":3}}],[\"右移操作时\",{\"1\":{\"44\":1}}],[\"右移操作\",{\"1\":{\"44\":1}}],[\"右移位数大于等于\",{\"1\":{\"44\":1}}],[\"补齐\",{\"1\":{\"44\":1}}],[\"负数高位补\",{\"1\":{\"44\":1}}],[\"正数高位补\",{\"1\":{\"44\":1}}],[\"低位丢弃\",{\"1\":{\"44\":1}}],[\"低位补零\",{\"1\":{\"44\":1}}],[\"向右移若干位\",{\"1\":{\"44\":1}}],[\"向左移若干位\",{\"1\":{\"44\":1}}],[\"乘以\",{\"1\":{\"44\":1}}],[\"相信你已经知道了\",{\"1\":{\"77\":1}}],[\"相对于常规整数类型的运算来说\",{\"1\":{\"53\":1}}],[\"相比于包装类型\",{\"1\":{\"48\":1}}],[\"相当于\",{\"1\":{\"44\":2,\"74\":1}}],[\"相关阅读\",{\"1\":{\"35\":1}}],[\"xiaoli\",{\"1\":{\"76\":7}}],[\"xiaozhang\",{\"1\":{\"76\":7}}],[\"xixi\",{\"1\":{\"45\":3}}],[\"xxxvalue\",{\"1\":{\"50\":1}}],[\"x>>42等同于x>>10\",{\"1\":{\"44\":1}}],[\"x<<42等同于x<<10\",{\"1\":{\"44\":1}}],[\"x\",{\"1\":{\"44\":5,\"48\":1,\"52\":3,\"59\":1}}],[\"高位补符号位\",{\"1\":{\"44\":1}}],[\"高位丢弃\",{\"1\":{\"44\":1}}],[\"高效性\",{\"1\":{\"29\":1}}],[\"掌握最基本的移位运算符知识还是很有必要的\",{\"1\":{\"44\":1}}],[\"空位都以\",{\"1\":{\"44\":1}}],[\"空位都以0补齐\",{\"1\":{\"44\":1}}],[\"空调等\",{\"1\":{\"30\":1}}],[\"忽略符号位\",{\"1\":{\"44\":2}}],[\"无参数无返回值的方法\",{\"1\":{\"59\":1}}],[\"无论一个类创建了多少个对象\",{\"1\":{\"56\":1}}],[\"无法判断\",{\"1\":{\"55\":1}}],[\"无限循环的小数存储在计算机时\",{\"1\":{\"51\":1}}],[\"无符号右移\",{\"1\":{\"44\":2}}],[\"无需重点关注\",{\"1\":{\"30\":1}}],[\"按位异或\",{\"1\":{\"44\":1}}],[\"^\",{\"1\":{\"44\":2}}],[\"被\",{\"1\":{\"55\":1}}],[\"被操作的数据被视为二进制数\",{\"1\":{\"44\":1}}],[\"被重新组织成\",{\"1\":{\"33\":2}}],[\"移位操作符实际上支持的类型只有int和long\",{\"1\":{\"44\":1}}],[\"移位操作中\",{\"1\":{\"44\":1}}],[\"移位就是将其向左或向右移动若干位的运算\",{\"1\":{\"44\":1}}],[\"移位运算符总结\",{\"1\":{\"44\":1}}],[\"移位运算符在各种框架以及\",{\"1\":{\"44\":1}}],[\"移位运算符是最基本的运算符之一\",{\"1\":{\"44\":1}}],[\"移位运算符\",{\"0\":{\"44\":1}}],[\"几乎每种编程语言都包含这一运算符\",{\"1\":{\"44\":1}}],[\"符号在后就后加\",{\"1\":{\"43\":1}}],[\"符号在前就先加\",{\"1\":{\"43\":1}}],[\"值传递\",{\"0\":{\"72\":1},\"1\":{\"70\":1,\"72\":1,\"79\":1}}],[\"值传递详解\",{\"0\":{\"70\":1}}],[\"值\",{\"1\":{\"43\":1,\"57\":1}}],[\"赋值给\",{\"1\":{\"43\":2}}],[\"自动装箱与拆箱了解吗\",{\"0\":{\"50\":1}}],[\"自身的源码中使用还是挺广泛的\",{\"1\":{\"44\":1}}],[\"自己增加\",{\"1\":{\"43\":2}}],[\"自增自减运算符\",{\"0\":{\"43\":1}}],[\"时\",{\"1\":{\"43\":2}}],[\"==\",{\"1\":{\"44\":1,\"45\":5,\"48\":2,\"49\":3,\"51\":1,\"53\":1}}],[\"=\",{\"1\":{\"43\":2,\"44\":3,\"45\":3,\"47\":2,\"49\":14,\"50\":8,\"51\":7,\"52\":5,\"53\":1,\"55\":7,\"56\":2,\"57\":2,\"60\":2,\"61\":1,\"63\":2,\"66\":4,\"71\":1,\"74\":13,\"75\":2,\"76\":5,\"77\":1}}],[\"再自增\",{\"1\":{\"43\":2}}],[\"再赋值\",{\"1\":{\"43\":2}}],[\"再将字节码直译\",{\"1\":{\"35\":1}}],[\"减\",{\"1\":{\"43\":4}}],[\"前提是该方法可能产生结果\",{\"1\":{\"59\":1}}],[\"前缀\",{\"1\":{\"43\":1}}],[\"前端\",{\"2\":{\"25\":1}}],[\"运算的效率会相对较低\",{\"1\":{\"53\":1}}],[\"运算符可以放在变量之前\",{\"1\":{\"43\":1}}],[\"运行期\",{\"1\":{\"65\":1}}],[\"运行结果\",{\"1\":{\"45\":1}}],[\"运行时\",{\"1\":{\"33\":1}}],[\"运行时映像有助于简化\",{\"1\":{\"33\":1}}],[\"运行时映像\",{\"1\":{\"33\":1}}],[\"运行时环境的大小\",{\"1\":{\"33\":1}}],[\"运行时环境\",{\"1\":{\"33\":2}}],[\"运行在\",{\"1\":{\"32\":1}}],[\"叫做自增运算符\",{\"1\":{\"43\":1}}],[\"或函数\",{\"1\":{\"72\":1,\"79\":1}}],[\"或减少\",{\"1\":{\"43\":1}}],[\"或者没有一个比其他的更好\",{\"1\":{\"63\":1}}],[\"或者父类和子类之间\",{\"1\":{\"63\":1}}],[\"或者基于\",{\"1\":{\"37\":1}}],[\"或者说需要针对性地去做适配和优化\",{\"1\":{\"36\":1}}],[\"官方\",{\"1\":{\"78\":1}}],[\"官方文档未明确定义\",{\"1\":{\"47\":1}}],[\"官方文档\",{\"1\":{\"42\":1}}],[\"官方在\",{\"1\":{\"37\":1}}],[\"注意\",{\"1\":{\"42\":1,\"47\":1,\"48\":1,\"50\":1,\"57\":1,\"78\":1}}],[\"注释是你的代码说明书\",{\"1\":{\"40\":1}}],[\"注释并不会执行\",{\"1\":{\"40\":1}}],[\"注释类型总结\",{\"1\":{\"40\":1}}],[\"注释有哪几种形式\",{\"0\":{\"40\":1}}],[\"⚠️\",{\"1\":{\"42\":1,\"48\":1,\"57\":1}}],[\"既属于程序控制\",{\"1\":{\"42\":1}}],[\"既然\",{\"1\":{\"36\":1,\"37\":1}}],[\"保留字\",{\"1\":{\"42\":1}}],[\"错误处理\",{\"1\":{\"42\":1}}],[\"方法内部对值进行的操作\",{\"1\":{\"78\":1}}],[\"方法中\",{\"1\":{\"74\":1}}],[\"方法中的局部变量\",{\"1\":{\"55\":1}}],[\"方法接收的直接是实参所引用的对象在堆中的地址\",{\"1\":{\"72\":1}}],[\"方法接收的是实参值的拷贝\",{\"1\":{\"72\":1}}],[\"方法就可以接受\",{\"1\":{\"66\":1}}],[\"方法返回值和访问修饰符可以不同\",{\"1\":{\"63\":1}}],[\"方法名必须相同\",{\"1\":{\"63\":1}}],[\"方法名\",{\"1\":{\"61\":4,\"64\":1}}],[\"方法的参数拷贝的是\",{\"1\":{\"75\":1}}],[\"方法的参数\",{\"1\":{\"71\":1,\"76\":1}}],[\"方法的定义可能会用到\",{\"1\":{\"71\":1}}],[\"方法的重写要遵循\",{\"1\":{\"65\":1}}],[\"方法的返回值\",{\"1\":{\"59\":1}}],[\"方法的源码就用到了移位运算符\",{\"1\":{\"44\":1}}],[\"方法有哪几种类型\",{\"0\":{\"59\":1}}],[\"方法比较\",{\"1\":{\"49\":1}}],[\"方法\",{\"0\":{\"58\":1},\"1\":{\"48\":1,\"50\":2,\"71\":1}}],[\"方法和变量修饰符中\",{\"1\":{\"42\":1}}],[\"方法和变量修饰符\",{\"1\":{\"42\":2}}],[\"方法等取名字\",{\"1\":{\"41\":1}}],[\"警察局\",{\"1\":{\"41\":3}}],[\"名字\",{\"1\":{\"41\":1}}],[\"起的这个\",{\"1\":{\"41\":1}}],[\"则返回值重写时不可修改\",{\"1\":{\"65\":1}}],[\"则子类就不能重写该方法\",{\"1\":{\"64\":1}}],[\"则会自动以类型的默认值而赋值\",{\"1\":{\"55\":1}}],[\"则默认会有一个修饰符\",{\"1\":{\"42\":1}}],[\"则要给这个店起一个名字\",{\"1\":{\"41\":1}}],[\"则包含了\",{\"1\":{\"33\":1}}],[\"关键字修饰成为常量\",{\"1\":{\"56\":1}}],[\"关键字修饰的变量\",{\"1\":{\"56\":1}}],[\"关键字来定义一个方法的默认实现\",{\"1\":{\"42\":1}}],[\"关键字是被赋予特殊含义的标识符\",{\"1\":{\"41\":1}}],[\"关键字\",{\"1\":{\"41\":1,\"42\":1}}],[\"关于\",{\"1\":{\"52\":1,\"65\":1}}],[\"关于浮点数的更多内容\",{\"1\":{\"51\":1}}],[\"关于作者\",{\"0\":{\"2\":1},\"1\":{\"2\":1}}],[\"关于网站\",{\"0\":{\"1\":1}}],[\"标识符就是一个名字\",{\"1\":{\"41\":1}}],[\"标识符\",{\"1\":{\"41\":1}}],[\"标识符和关键字的区别是什么\",{\"0\":{\"41\":1}}],[\"于是就有了\",{\"1\":{\"41\":1}}],[\"于是自己在\",{\"1\":{\"37\":1}}],[\"类名\",{\"1\":{\"61\":2}}],[\"类型的数据一定要在数值后面加上\",{\"1\":{\"47\":1}}],[\"类型进行左移\",{\"1\":{\"44\":1}}],[\"类型左移\",{\"1\":{\"44\":1}}],[\"类\",{\"1\":{\"41\":1,\"42\":1}}],[\"类加载器首先加载字节码文件\",{\"1\":{\"34\":1}}],[\"应该使用\",{\"1\":{\"50\":1}}],[\"应该要使用基本数据类型对应的包装类型\",{\"1\":{\"48\":1}}],[\"应替换为\",{\"1\":{\"40\":1}}],[\"应用的部署和节省内存并增强安全性和可维护性\",{\"1\":{\"33\":1}}],[\"应用可以通过新增的\",{\"1\":{\"33\":1}}],[\"应用程序的开发工作\",{\"1\":{\"33\":1}}],[\"应用程序的开发和调试\",{\"1\":{\"33\":1}}],[\"应用程序的运行时环境和必要的类库\",{\"1\":{\"33\":1}}],[\"应用程序\",{\"1\":{\"30\":3}}],[\"应用程序开发和运行的核心类库以及虚拟机等核心组件\",{\"1\":{\"30\":1}}],[\"去掉下面复杂的注释\",{\"1\":{\"40\":1}}],[\"尽量通过代码来阐述\",{\"1\":{\"40\":1}}],[\"若编程语言足够有表达力\",{\"1\":{\"40\":1}}],[\"多行注释在实际开发中使用的相对较少\",{\"1\":{\"40\":1}}],[\"多行注释\",{\"1\":{\"40\":1}}],[\"多态\",{\"1\":{\"29\":1}}],[\"通常情况下\",{\"1\":{\"52\":1,\"56\":1}}],[\"通常用于生成\",{\"1\":{\"40\":1}}],[\"通常用于解释一段代码的作用\",{\"1\":{\"40\":1}}],[\"通常用于解释方法内某单行代码的作用\",{\"1\":{\"40\":1}}],[\"通过上面例子\",{\"1\":{\"74\":1}}],[\"通过\",{\"1\":{\"29\":1}}],[\"操作符重载增加了复杂性\",{\"1\":{\"38\":1}}],[\"没默认值\",{\"1\":{\"55\":1}}],[\"没有手动赋值一定要自动赋值\",{\"1\":{\"55\":1}}],[\"没有的话随便修改下master分支代码\",{\"1\":{\"21\":1}}],[\"没办法\",{\"1\":{\"38\":1}}],[\"比较的是对象的内存地址\",{\"1\":{\"48\":1}}],[\"比较的是值\",{\"1\":{\"48\":1}}],[\"比较方式\",{\"1\":{\"48\":1}}],[\"比呀\",{\"1\":{\"38\":1}}],[\"比如涉及到钱的场景\",{\"1\":{\"52\":1}}],[\"比如编写和编译\",{\"1\":{\"33\":1}}],[\"比如\",{\"1\":{\"30\":1,\"36\":1,\"37\":4,\"41\":1,\"63\":1,\"72\":1}}],[\"比如你通过\",{\"1\":{\"29\":1}}],[\"用途\",{\"1\":{\"48\":1}}],[\"用一句口诀就是\",{\"1\":{\"43\":1}}],[\"用于定义函数\",{\"1\":{\"71\":1}}],[\"用于传递给函数\",{\"1\":{\"71\":1}}],[\"用于有返回值函数的方法\",{\"1\":{\"45\":1}}],[\"用于没有返回值函数的方法\",{\"1\":{\"45\":1}}],[\"用于跳出所在方法\",{\"1\":{\"45\":1}}],[\"用于这种表达式\",{\"1\":{\"43\":1}}],[\"用于生成自定义\",{\"1\":{\"33\":1}}],[\"用的比较多的还是单行注释和文档注释\",{\"1\":{\"40\":1}}],[\"用的都是这个协议\",{\"1\":{\"37\":1}}],[\"及之后新发布的\",{\"1\":{\"37\":1}}],[\"阿里巴巴的\",{\"1\":{\"37\":1}}],[\"建议看一下计算机系统基础\",{\"1\":{\"51\":1}}],[\"建议选择\",{\"1\":{\"37\":1}}],[\"建立在\",{\"1\":{\"30\":1}}],[\"试试水\",{\"1\":{\"37\":1}}],[\"先不考虑变量类型\",{\"1\":{\"55\":1}}],[\"先赋值\",{\"1\":{\"43\":2}}],[\"先自增\",{\"1\":{\"43\":2}}],[\"先在\",{\"1\":{\"37\":1}}],[\"先把程序源代码编译成字节码\",{\"1\":{\"35\":1}}],[\"现在你知道为啥\",{\"1\":{\"37\":1}}],[\"现在已经用不上了\",{\"1\":{\"30\":1}}],[\"虽然用到了\",{\"1\":{\"59\":1}}],[\"虽然\",{\"1\":{\"37\":1,\"38\":2,\"42\":1}}],[\"包装类的valueof\",{\"1\":{\"50\":1}}],[\"包装类型的缓存机制了解么\",{\"0\":{\"49\":1}}],[\"包装类型属于对象类型\",{\"1\":{\"48\":1}}],[\"包装类型可用于泛型\",{\"1\":{\"48\":1}}],[\"包装类型\",{\"1\":{\"48\":1}}],[\"包相关\",{\"1\":{\"42\":1}}],[\"包管理器上默认安装的\",{\"1\":{\"37\":1}}],[\"包含\",{\"1\":{\"33\":1}}],[\"包含了支持企业级应用程序开发和部署的标准和规范\",{\"1\":{\"30\":1}}],[\"优化之后\",{\"1\":{\"48\":1}}],[\"优化\",{\"1\":{\"37\":1}}],[\"许可获得许可\",{\"1\":{\"37\":1}}],[\"协议获得许可\",{\"1\":{\"37\":1}}],[\"协议\",{\"1\":{\"37\":3}}],[\"周期相同的\",{\"1\":{\"37\":1}}],[\"版\",{\"1\":{\"37\":1}}],[\"版进行长期支持\",{\"1\":{\"37\":1}}],[\"版本构建过程基于\",{\"1\":{\"37\":1}}],[\"服务\",{\"1\":{\"37\":1}}],[\"稳定性\",{\"1\":{\"37\":1}}],[\"功能性\",{\"1\":{\"37\":1}}],[\"功能链接跳转不对问题\",{\"0\":{\"23\":1}}],[\"但其前面可以有也可以没有任何其他参数\",{\"1\":{\"66\":1}}],[\"但要做出有别于父类的响应时\",{\"1\":{\"62\":1}}],[\"但并不是所有版本都是免费的\",{\"1\":{\"37\":1}}],[\"但是如果方法的返回值是引用类型\",{\"1\":{\"65\":1}}],[\"但是被\",{\"1\":{\"64\":1}}],[\"但是实际中会考虑计算机高效存储因素\",{\"1\":{\"47\":1}}],[\"但是这个修饰符加上了就会报错\",{\"1\":{\"42\":1}}],[\"但是我们店的名字不能叫\",{\"1\":{\"41\":1}}],[\"但是当项目结构一旦复杂起来\",{\"1\":{\"40\":1}}],[\"但是接口可以多继承\",{\"1\":{\"38\":1}}],[\"但是\",{\"1\":{\"38\":2,\"45\":1,\"55\":1,\"77\":1,\"78\":1}}],[\"但是面试官就是没事喜欢拿咱们\",{\"1\":{\"38\":1}}],[\"但是商用需要付费\",{\"1\":{\"37\":1}}],[\"但是不能进行修改\",{\"1\":{\"37\":1}}],[\"但是仅有\",{\"1\":{\"37\":1}}],[\"但是原来的\",{\"1\":{\"37\":1}}],[\"但一般有时间限制\",{\"1\":{\"37\":1}}],[\"烂在手里了吗\",{\"1\":{\"37\":1}}],[\"失去信心\",{\"1\":{\"37\":1}}],[\"导致大家对\",{\"1\":{\"37\":1}}],[\"收购回来之后就把他给闭源\",{\"1\":{\"37\":1}}],[\"收购了\",{\"1\":{\"37\":1}}],[\"给开源了\",{\"1\":{\"37\":1}}],[\"后再进行左移操作\",{\"1\":{\"44\":1}}],[\"后再进行左移\",{\"1\":{\"44\":1}}],[\"后缀\",{\"1\":{\"43\":1}}],[\"后来\",{\"1\":{\"37\":1}}],[\"后解释两个步骤\",{\"1\":{\"35\":1}}],[\"众所周知\",{\"1\":{\"37\":1}}],[\"个例子来给大家证明\",{\"1\":{\"73\":1}}],[\"个或者多个参数\",{\"1\":{\"66\":1}}],[\"个或若干个字符\",{\"1\":{\"57\":1}}],[\"个数不同\",{\"1\":{\"63\":1}}],[\"个字节\",{\"1\":{\"57\":1}}],[\"个月发布一个新版本\",{\"1\":{\"37\":2}}],[\"个人观点\",{\"1\":{\"37\":1}}],[\"个模块\",{\"1\":{\"33\":2}}],[\"最高位是用来表示符号的\",{\"1\":{\"47\":1}}],[\"最初的设计思想不符\",{\"1\":{\"38\":1}}],[\"最后\",{\"1\":{\"37\":1}}],[\"最大的卖点了\",{\"1\":{\"29\":1}}],[\"展望未来\",{\"1\":{\"37\":1}}],[\"插件和\",{\"1\":{\"37\":1}}],[\"非常接近\",{\"1\":{\"37\":1}}],[\"答案是会优先匹配固定参数的方法\",{\"1\":{\"66\":1}}],[\"答案是\",{\"1\":{\"49\":1}}],[\"答\",{\"1\":{\"37\":2}}],[\"问\",{\"1\":{\"37\":1}}],[\"工程师参与维护\",{\"1\":{\"37\":1}}],[\"工具\",{\"1\":{\"33\":2}}],[\"添加一些特有的功能和工具\",{\"1\":{\"37\":1}}],[\"~\",{\"1\":{\"37\":1,\"47\":7}}],[\"公司就想了个骚操作\",{\"1\":{\"37\":1}}],[\"公司就不想完全开源了\",{\"1\":{\"37\":1}}],[\"公司收购回来不就把\",{\"1\":{\"37\":1}}],[\"公司又把\",{\"1\":{\"37\":1}}],[\"公司又卖给了\",{\"1\":{\"37\":1}}],[\"公司以\",{\"1\":{\"37\":1}}],[\"公司开发的\",{\"1\":{\"37\":1}}],[\"公司\",{\"1\":{\"37\":2}}],[\"公司将\",{\"1\":{\"37\":1}}],[\"年后无法免费商用\",{\"1\":{\"37\":1}}],[\"年时间\",{\"1\":{\"37\":1}}],[\"年发表的一个博客\",{\"1\":{\"37\":1}}],[\"年\",{\"1\":{\"37\":2}}],[\"年的时候\",{\"1\":{\"29\":1}}],[\"首先\",{\"1\":{\"37\":1}}],[\"之父\",{\"1\":{\"78\":1}}],[\"之前\",{\"1\":{\"37\":1}}],[\"之前只要不升级可以无限期免费\",{\"1\":{\"37\":1}}],[\"之后\",{\"1\":{\"37\":1}}],[\"之后的版本可以免费分发和商用\",{\"1\":{\"37\":1}}],[\"之后执行\",{\"1\":{\"35\":1}}],[\"之间是否存在重大差异\",{\"1\":{\"37\":1}}],[\"提前终止循环\",{\"1\":{\"45\":1}}],[\"提前编译\",{\"1\":{\"36\":1}}],[\"提供了两种参数传递的方式\",{\"1\":{\"72\":1}}],[\"提供了一种特殊的运算符\",{\"1\":{\"43\":1}}],[\"提供了对应的和\",{\"1\":{\"37\":1}}],[\"提到\",{\"1\":{\"36\":1}}],[\"技术了\",{\"1\":{\"36\":1}}],[\"技术\",{\"1\":{\"36\":1}}],[\"技术示例与原理讲解\",{\"1\":{\"36\":1}}],[\"那为什么还要有\",{\"1\":{\"37\":1}}],[\"那为什么不全部使用这种编译方式呢\",{\"1\":{\"36\":1}}],[\"那\",{\"1\":{\"37\":1}}],[\"那么这个成员变量是属于类的\",{\"1\":{\"55\":1}}],[\"那么就可能通过标量替换来实现栈上分配\",{\"1\":{\"48\":1}}],[\"那么\",{\"1\":{\"37\":1}}],[\"那就没办法使用这些框架和库了\",{\"1\":{\"36\":1}}],[\"然后\",{\"1\":{\"37\":1}}],[\"然后通过解释器逐行解释执行\",{\"1\":{\"34\":1}}],[\"然而\",{\"1\":{\"36\":1}}],[\"动态加载\",{\"1\":{\"36\":1}}],[\"动态代理使用的是\",{\"1\":{\"36\":1}}],[\"动态代理\",{\"1\":{\"36\":1}}],[\"除以\",{\"1\":{\"44\":1}}],[\"除此之外\",{\"1\":{\"36\":1}}],[\"除了定义一些常量和局部变量之外\",{\"1\":{\"48\":1}}],[\"除了我们考虑商业功能的部分\",{\"1\":{\"37\":1}}],[\"除了我们平时最常用的\",{\"1\":{\"32\":1}}],[\"除了\",{\"1\":{\"30\":1}}],[\"对引用类型的参数采用的不是引用传递\",{\"1\":{\"75\":1}}],[\"对引用类型的参数采用的是引用传递\",{\"1\":{\"75\":1}}],[\"对形参的修改将影响到实参\",{\"1\":{\"72\":1}}],[\"对成员变量进行赋值\",{\"1\":{\"55\":2}}],[\"对象\",{\"1\":{\"61\":2}}],[\"对象类型\",{\"1\":{\"48\":1}}],[\"对象属性中很少会使用基本类型来定义变量\",{\"1\":{\"48\":1}}],[\"对于调用者都是未知的\",{\"1\":{\"78\":1}}],[\"对于编译器\",{\"1\":{\"55\":1}}],[\"对于包装数据类型来说\",{\"1\":{\"48\":1}}],[\"对于基本数据类型来说\",{\"1\":{\"48\":1}}],[\"对于\",{\"1\":{\"37\":1,\"47\":1}}],[\"对微服务架构的支持也比较友好\",{\"1\":{\"36\":1}}],[\"对应的二进制是\",{\"1\":{\"44\":1}}],[\"对应的\",{\"1\":{\"32\":1}}],[\"化\",{\"1\":{\"36\":1}}],[\"走向\",{\"1\":{\"36\":1}}],[\"感兴趣的同学\",{\"1\":{\"36\":1}}],[\"感兴趣的可以去看看\",{\"1\":{\"32\":1}}],[\"发生阶段\",{\"1\":{\"65\":1}}],[\"发生范围\",{\"1\":{\"65\":1}}],[\"发生在同一个类中\",{\"1\":{\"63\":1}}],[\"发生循环\",{\"1\":{\"51\":1}}],[\"发行版本\",{\"1\":{\"36\":1}}],[\"发布完成后\",{\"1\":{\"21\":1}}],[\"发布到github\",{\"0\":{\"15\":1}}],[\"完整的\",{\"1\":{\"36\":1}}],[\"了\",{\"1\":{\"36\":1,\"47\":1}}],[\"与\",{\"1\":{\"36\":2}}],[\"特性\",{\"1\":{\"78\":1}}],[\"特性的应用程序\",{\"1\":{\"33\":1}}],[\"特别适合云原生场景\",{\"1\":{\"36\":1}}],[\"还是\",{\"1\":{\"49\":1}}],[\"还是有存在的必要的\",{\"1\":{\"37\":1}}],[\"还可以帮助我们理解源码中涉及到移位运算符的代码\",{\"1\":{\"44\":1}}],[\"还属于访问控制\",{\"1\":{\"42\":1}}],[\"还会相比于\",{\"1\":{\"37\":1}}],[\"还能提供\",{\"1\":{\"36\":1}}],[\"还能减少内存占用和增强\",{\"1\":{\"36\":1}}],[\"还有\",{\"1\":{\"32\":1}}],[\"还有一个\",{\"1\":{\"30\":1}}],[\"避免预热时间长\",{\"1\":{\"36\":1}}],[\"避免了\",{\"1\":{\"36\":1}}],[\"预热等各方面的开销\",{\"1\":{\"36\":1}}],[\"属于非法操作\",{\"1\":{\"60\":1}}],[\"属于静态编译\",{\"1\":{\"36\":1}}],[\"属于运行时编译\",{\"1\":{\"34\":1}}],[\"呢\",{\"0\":{\"36\":1},\"1\":{\"49\":1}}],[\"文件\",{\"1\":{\"35\":1,\"36\":1}}],[\"文档注释\",{\"1\":{\"40\":1}}],[\"文档注释工具\",{\"1\":{\"33\":1}}],[\"文档等\",{\"1\":{\"33\":1}}],[\"文档所在分支\",{\"1\":{\"23\":1}}],[\"由于左移位数大于等于\",{\"1\":{\"44\":1}}],[\"由于\",{\"1\":{\"44\":2}}],[\"由于字节码并不针对一种特定的机器\",{\"1\":{\"34\":1}}],[\"由\",{\"1\":{\"35\":1,\"37\":1}}],[\"已经缩小了这两种语言间的差距\",{\"1\":{\"35\":1}}],[\"执行速度比较慢\",{\"1\":{\"35\":1}}],[\"开发者要学习的东西也少了\",{\"1\":{\"78\":1}}],[\"开发者的不满\",{\"1\":{\"37\":1}}],[\"开发文档\",{\"1\":{\"40\":1}}],[\"开发了\",{\"1\":{\"37\":1}}],[\"开发效率比较低\",{\"1\":{\"35\":1}}],[\"开源意味着你可以对它根据你自己的需要进行修改\",{\"1\":{\"37\":1}}],[\"开源项目\",{\"1\":{\"37\":1}}],[\"开源\",{\"1\":{\"37\":1}}],[\"开始之前\",{\"1\":{\"70\":1}}],[\"开始引入了默认方法\",{\"1\":{\"42\":1}}],[\"开始\",{\"1\":{\"29\":1,\"33\":2,\"66\":1}}],[\"会创建副本\",{\"1\":{\"72\":1,\"79\":1}}],[\"会优先匹配固定参数还是可变参数的方法呢\",{\"1\":{\"66\":1}}],[\"会直接创建新的对象\",{\"1\":{\"49\":1}}],[\"会对对象进行逃逸分析\",{\"1\":{\"48\":1}}],[\"会先求余\",{\"1\":{\"44\":2}}],[\"会提供免费版本\",{\"1\":{\"37\":1}}],[\"会通过编译器将源代码一次性翻译成可被该平台执行的机器码\",{\"1\":{\"35\":1}}],[\"会根据代码每次被执行的情况收集信息并相应地做出一些优化\",{\"1\":{\"34\":1}}],[\"因为固定参数的方法匹配度更高\",{\"1\":{\"66\":1}}],[\"因为根本不存在匹配\",{\"1\":{\"63\":1}}],[\"因为\",{\"1\":{\"35\":1,\"41\":1,\"74\":1}}],[\"因为比较重要\",{\"1\":{\"35\":1}}],[\"因此求余操作的基数也变成了\",{\"1\":{\"44\":1}}],[\"因此不能来进行移位操作\",{\"1\":{\"44\":1}}],[\"因此执行的次数越多\",{\"1\":{\"34\":1}}],[\"因此\",{\"1\":{\"33\":1,\"34\":1,\"37\":1,\"40\":1,\"49\":2,\"50\":1,\"61\":1,\"75\":1,\"76\":1}}],[\"因此必须调用操作系统的多线程功能来进行多线程程序设计\",{\"1\":{\"29\":1}}],[\"其余位表示数值部分\",{\"1\":{\"47\":1}}],[\"其中包括\",{\"1\":{\"37\":1}}],[\"其次\",{\"1\":{\"37\":1}}],[\"其实这个问题我们讲字节码的时候已经提到过\",{\"1\":{\"35\":1}}],[\"其会将字节码对应的机器码保存下来\",{\"1\":{\"34\":1}}],[\"为形参\",{\"1\":{\"71\":1}}],[\"为实参\",{\"1\":{\"71\":1}}],[\"为你解答这个被很多人忽视的问题\",{\"1\":{\"37\":1}}],[\"为了更强有力地反驳\",{\"1\":{\"75\":1}}],[\"为了支持类似的动态特性\",{\"1\":{\"36\":1}}],[\"为了改善编译语言的效率而发展出的即时编译技术\",{\"1\":{\"35\":1}}],[\"为什么\",{\"0\":{\"73\":1,\"78\":1},\"1\":{\"78\":1}}],[\"为什么成员变量有默认值\",{\"1\":{\"55\":1}}],[\"为什么会出现这个问题呢\",{\"1\":{\"51\":1}}],[\"为什么浮点数运算的时候会有精度丢失的风险\",{\"0\":{\"51\":1}}],[\"为什么不全部使用\",{\"0\":{\"36\":1}}],[\"为什么说是几乎所有对象实例都存在于堆中呢\",{\"1\":{\"48\":1}}],[\"为什么说\",{\"0\":{\"35\":1},\"1\":{\"35\":1,\"73\":1}}],[\"为机器代码后再执行\",{\"1\":{\"35\":1}}],[\"为change\",{\"1\":{\"20\":1}}],[\"所谓可变长参数就是允许在调用方法时传入不定长度的参数\",{\"1\":{\"66\":1}}],[\"所修饰\",{\"1\":{\"55\":2}}],[\"所有整型包装类对象之间值的比较\",{\"1\":{\"48\":1,\"49\":1}}],[\"所有的关键字都是小写的\",{\"1\":{\"42\":1}}],[\"所需要编译的部分\",{\"1\":{\"34\":1}}],[\"所以才想着去设计一门新的语言\",{\"1\":{\"78\":1}}],[\"所以采用自动赋默认值\",{\"1\":{\"55\":1}}],[\"所以就会导致小数精度发生损失的情况\",{\"1\":{\"51\":1}}],[\"所以下面的代码左移\",{\"1\":{\"44\":1}}],[\"所以选择使用\",{\"1\":{\"36\":1}}],[\"所以我们这里再提一下\",{\"1\":{\"35\":1}}],[\"所以后面引进了\",{\"1\":{\"34\":1}}],[\"所以\",{\"1\":{\"34\":1,\"47\":1}}],[\"所以进程可能会看似未响应\",{\"1\":{\"11\":1}}],[\"热点代码\",{\"1\":{\"34\":1}}],[\"消耗大部分系统资源的只有那一小部分的代码\",{\"1\":{\"34\":1}}],[\"根据第一点\",{\"1\":{\"55\":1}}],[\"根据\",{\"1\":{\"37\":1}}],[\"根据维基百科介绍\",{\"1\":{\"35\":1}}],[\"根据二八定律\",{\"1\":{\"34\":1}}],[\"根据自己的需求\",{\"1\":{\"33\":1}}],[\"采用了惰性评估\",{\"1\":{\"34\":1}}],[\"采用字节码的好处是什么\",{\"0\":{\"34\":1}}],[\"机器码的运行效率肯定是高于\",{\"1\":{\"34\":1}}],[\"机顶盒\",{\"1\":{\"30\":1}}],[\"下方的输出语句不会执行\",{\"1\":{\"59\":1}}],[\"下列语句的运行结果是什么\",{\"1\":{\"45\":1}}],[\"下面以\",{\"1\":{\"77\":1}}],[\"下面的代码的输出结果是\",{\"1\":{\"49\":1}}],[\"下面我们来看一个问题\",{\"1\":{\"49\":1}}],[\"下面我通过收集到的一些资料\",{\"1\":{\"37\":1}}],[\"下面这个方法也没有返回值\",{\"1\":{\"59\":1}}],[\"下面这段话摘自\",{\"1\":{\"37\":1}}],[\"下面这张图是\",{\"1\":{\"34\":1}}],[\"下次可以直接使用\",{\"1\":{\"34\":1}}],[\"下载\",{\"1\":{\"33\":1}}],[\"下载地址\",{\"1\":{\"9\":1}}],[\"当发生了某种条件之后\",{\"1\":{\"45\":1}}],[\"当循环条件不满足或者循环次数达到要求时\",{\"1\":{\"45\":1}}],[\"当运算符放在变量之后时\",{\"1\":{\"43\":1}}],[\"当运算符放在变量之前时\",{\"1\":{\"43\":1}}],[\"当在\",{\"1\":{\"42\":1}}],[\"当\",{\"1\":{\"34\":1,\"43\":2,\"44\":2}}],[\"有参的方法\",{\"1\":{\"71\":1}}],[\"有参数无返回值的方法\",{\"1\":{\"59\":1}}],[\"有相同的名字\",{\"1\":{\"63\":1}}],[\"有返回值有参数的方法\",{\"1\":{\"59\":1}}],[\"有返回值无参数的方法\",{\"1\":{\"59\":1}}],[\"有时候可能需要在循环的过程中\",{\"1\":{\"45\":1}}],[\"有一些标识符\",{\"1\":{\"41\":1}}],[\"有自动内存管理垃圾回收机制\",{\"1\":{\"38\":1}}],[\"有什么优点\",{\"0\":{\"36\":1}}],[\"有些方法和代码块是经常需要被调用的\",{\"1\":{\"34\":1}}],[\"有针对不同系统的特定实现\",{\"1\":{\"32\":1}}],[\"只是拷贝的实参\",{\"1\":{\"76\":1}}],[\"只是从\",{\"1\":{\"74\":1}}],[\"只有值传递呢\",{\"1\":{\"73\":1}}],[\"只有值传递\",{\"0\":{\"73\":1}}],[\"只有在对象实例化之后才存在\",{\"1\":{\"60\":1}}],[\"只允许访问静态成员\",{\"1\":{\"61\":1}}],[\"只能被截断\",{\"1\":{\"51\":1}}],[\"只能用于特定的地方\",{\"1\":{\"41\":1}}],[\"只能说\",{\"1\":{\"36\":1}}],[\"只需要创建一个与注释所言同一事物的函数即可\",{\"1\":{\"40\":1}}],[\"只支持方法重载\",{\"1\":{\"38\":1}}],[\"只添加了几个部分\",{\"1\":{\"37\":1}}],[\"只添加了一些小功能\",{\"1\":{\"37\":1}}],[\"只面向虚拟机\",{\"1\":{\"34\":1}}],[\"只要满足\",{\"1\":{\"32\":1}}],[\"中将实参传递给方法\",{\"1\":{\"79\":1}}],[\"中只有值传递\",{\"1\":{\"72\":1,\"77\":1}}],[\"中占两个字节\",{\"1\":{\"57\":1}}],[\"中有\",{\"1\":{\"47\":1}}],[\"中有三种移位运算符\",{\"1\":{\"44\":1}}],[\"中匹配不到任何情况时\",{\"1\":{\"42\":1}}],[\"中会以特殊颜色显示\",{\"1\":{\"42\":1}}],[\"中的几种基本数据类型了解么\",{\"0\":{\"47\":1}}],[\"中的\",{\"1\":{\"44\":1}}],[\"中的注释有三种\",{\"1\":{\"40\":1}}],[\"中的私有组件大多数也已经被捐赠给开源组织\",{\"1\":{\"37\":1}}],[\"中\",{\"1\":{\"34\":1,\"53\":1}}],[\"容器化\",{\"1\":{\"33\":1}}],[\"都不会影响到原件本身\",{\"1\":{\"74\":1}}],[\"都会将其转换为int类型再操作\",{\"1\":{\"44\":1}}],[\"都支持封装\",{\"1\":{\"38\":1}}],[\"都是通过\",{\"1\":{\"52\":1}}],[\"都是面向对象的语言\",{\"1\":{\"38\":1}}],[\"都是同样的\",{\"1\":{\"33\":1}}],[\"都用到了这些特性\",{\"1\":{\"36\":1}}],[\"都可以使用std\",{\"1\":{\"29\":1}}],[\"模块化的\",{\"1\":{\"33\":1}}],[\"模块的自定义运行时镜像\",{\"1\":{\"33\":1}}],[\"模板已成功生成\",{\"1\":{\"11\":1}}],[\"我通过\",{\"1\":{\"73\":1}}],[\"我知道很多人没学过\",{\"1\":{\"38\":1}}],[\"我后续发布\",{\"1\":{\"37\":1}}],[\"我发布我的\",{\"1\":{\"37\":1}}],[\"我叫\",{\"1\":{\"37\":1}}],[\"我把一部分核心代码开源出来给你们玩\",{\"1\":{\"37\":1}}],[\"我们再来看下面这个案例\",{\"1\":{\"75\":1}}],[\"我们已经知道了一个方法不能修改一个基本数据类型的参数\",{\"1\":{\"74\":1}}],[\"我们先来搞懂下面这两个概念\",{\"1\":{\"70\":1}}],[\"我们看编译后生成的\",{\"1\":{\"66\":1}}],[\"我们通过下面这个例子来证明一下\",{\"1\":{\"66\":1}}],[\"我们可以按照方法的返回值和参数类型将方法分为下面这几种\",{\"1\":{\"59\":1}}],[\"我们可以将高级编程语言按照程序的执行方式分为两种\",{\"1\":{\"35\":1}}],[\"我们知道计算机是二进制的\",{\"1\":{\"51\":1}}],[\"我们知道几乎所有对象实例都存在于堆中\",{\"1\":{\"48\":1}}],[\"我们应该尽量避免不必要的拆装箱操作\",{\"1\":{\"50\":1}}],[\"我们发现装箱其实就是调用了\",{\"1\":{\"50\":1}}],[\"我们在其他地方比如方法参数\",{\"1\":{\"48\":1}}],[\"我们需要把除了最高位之外的所有位都设为\",{\"1\":{\"47\":1}}],[\"我们需要格外注意的是\",{\"1\":{\"34\":1}}],[\"我们要尽量规范和美化自己的代码来减少不必要的注释\",{\"1\":{\"40\":1}}],[\"我们就需要用到注释了\",{\"1\":{\"40\":1}}],[\"我们自己或者团队其他成员还可以很轻易地看懂代码\",{\"1\":{\"40\":1}}],[\"我们的目的是开源\",{\"1\":{\"37\":1}}],[\"我们的\",{\"1\":{\"37\":1}}],[\"我们前面也对比过\",{\"1\":{\"36\":1}}],[\"我们无法正确输出子进程的进度条\",{\"1\":{\"11\":1}}],[\"我在介绍模块化系统的时候提到\",{\"1\":{\"33\":1}}],[\"新特性概览这篇文章中\",{\"1\":{\"33\":1}}],[\"新特性也不是\",{\"1\":{\"29\":1}}],[\"一大\",{\"1\":{\"65\":1}}],[\"一定不能做更严格的限制\",{\"1\":{\"65\":1}}],[\"一定不能修改\",{\"1\":{\"65\":1}}],[\"一种情况例外\",{\"1\":{\"55\":1}}],[\"一种监控工具\",{\"1\":{\"37\":2}}],[\"一个特定值\",{\"1\":{\"45\":1}}],[\"一般建议使用\",{\"1\":{\"61\":1}}],[\"一般有两种用法\",{\"1\":{\"45\":1}}],[\"一般是每\",{\"1\":{\"37\":2}}],[\"一般情况下\",{\"1\":{\"35\":1}}],[\"一举两得\",{\"1\":{\"37\":1}}],[\"一些开源的第三方组件\",{\"1\":{\"37\":1}}],[\"一起发布的新命令行工具\",{\"1\":{\"33\":1}}],[\"一次编译\",{\"1\":{\"32\":1}}],[\"一次编写\",{\"1\":{\"29\":1}}],[\"随着方法的调用结束而消亡\",{\"1\":{\"55\":1}}],[\"随\",{\"1\":{\"33\":1}}],[\"随处可以运行\",{\"1\":{\"32\":1}}],[\"随处运行\",{\"1\":{\"29\":1}}],[\"9f\",{\"1\":{\"51\":1}}],[\"9e\",{\"1\":{\"47\":1}}],[\"9223372036854775807\",{\"1\":{\"47\":1}}],[\"9223372036854775808\",{\"1\":{\"47\":1,\"53\":1}}],[\"94\",{\"1\":{\"33\":2}}],[\"9\",{\"1\":{\"33\":3,\"36\":1,\"50\":1,\"52\":1}}],[\"从变量是否有默认值来看\",{\"1\":{\"55\":1}}],[\"从变量在内存中的生存时间上看\",{\"1\":{\"55\":1}}],[\"从变量在内存中的存储方式来看\",{\"1\":{\"55\":1}}],[\"从语法形式上看\",{\"1\":{\"55\":1}}],[\"从字节码中\",{\"1\":{\"50\":1}}],[\"从\",{\"1\":{\"33\":2,\"42\":1,\"66\":1}}],[\"从master新建分支gh\",{\"0\":{\"19\":1}}],[\"不引入引用传递呢\",{\"0\":{\"78\":1},\"1\":{\"78\":1}}],[\"不会创建副本\",{\"1\":{\"72\":1}}],[\"不会造成精度丢失\",{\"1\":{\"52\":1}}],[\"不需要太多废话\",{\"1\":{\"73\":1}}],[\"不需要有确定的值\",{\"1\":{\"71\":1}}],[\"不需要程序员手动释放无用内存\",{\"1\":{\"38\":1}}],[\"不同的参数\",{\"1\":{\"63\":1}}],[\"不同的是\",{\"1\":{\"36\":1}}],[\"不允许访问实例成员\",{\"1\":{\"61\":1}}],[\"不断乘以\",{\"1\":{\"51\":1}}],[\"不建议这么使用\",{\"1\":{\"48\":1}}],[\"不溢出的情况下\",{\"1\":{\"44\":1}}],[\"不提供指针来直接访问内存\",{\"1\":{\"38\":1}}],[\"不提供\",{\"1\":{\"37\":1}}],[\"不仅能提供\",{\"1\":{\"36\":1}}],[\"不再提供单独的\",{\"1\":{\"33\":1}}],[\"不过\",{\"1\":{\"33\":1,\"34\":1,\"37\":3,\"61\":1,\"72\":1,\"75\":1}}],[\"不要动gh\",{\"0\":{\"22\":1}}],[\"即可免费领取个人原创的\",{\"1\":{\"66\":1}}],[\"即方法名相同\",{\"1\":{\"65\":1}}],[\"即实例成员变量和实例方法\",{\"1\":{\"61\":1}}],[\"即静态成员变量和静态方法\",{\"1\":{\"61\":1}}],[\"即使创建多个对象\",{\"1\":{\"56\":1}}],[\"即使不打算进行\",{\"1\":{\"33\":1}}],[\"即时编译器\",{\"1\":{\"36\":1}}],[\"即时编译器原理解析及实践\",{\"1\":{\"35\":1}}],[\"即扩展名为\",{\"1\":{\"34\":1}}],[\"即gh\",{\"1\":{\"22\":1}}],[\"代码里使用\",{\"1\":{\"44\":1}}],[\"代码的注释不是越详细越好\",{\"1\":{\"40\":1}}],[\"代码\",{\"1\":{\"33\":1,\"74\":1,\"75\":1}}],[\"也会严重影响系统的性能\",{\"1\":{\"50\":1}}],[\"也会拿来用一下\",{\"1\":{\"37\":1}}],[\"也可以使用\",{\"1\":{\"61\":1}}],[\"也可以放在变量之后\",{\"1\":{\"43\":1}}],[\"也可以找一些文章来看看\",{\"1\":{\"36\":1}}],[\"也属于类\",{\"1\":{\"42\":1}}],[\"也要记下来\",{\"1\":{\"38\":1}}],[\"也是商业免费\",{\"1\":{\"37\":1}}],[\"也就有了\",{\"1\":{\"37\":1}}],[\"也就不能使用\",{\"1\":{\"36\":1}}],[\"也就是\",{\"1\":{\"43\":1}}],[\"也就是所谓的热点代码\",{\"1\":{\"34\":1}}],[\"也就是说这行代码等价于\",{\"1\":{\"49\":1}}],[\"也就是说左移\",{\"1\":{\"44\":1}}],[\"也就是说\",{\"1\":{\"33\":2,\"44\":1,\"56\":1,\"61\":1,\"74\":1,\"75\":1}}],[\"也就是说我们平时接触到的\",{\"1\":{\"32\":1}}],[\"也具有解释型语言的特征\",{\"1\":{\"35\":1}}],[\"也有可能需要安装\",{\"1\":{\"33\":1}}],[\"也需要\",{\"1\":{\"33\":1}}],[\"转换为二进制数的过程为\",{\"1\":{\"51\":1}}],[\"转换为\",{\"1\":{\"33\":1}}],[\"如何解决浮点数运算的精度丢失问题\",{\"0\":{\"52\":1}}],[\"如何选择\",{\"1\":{\"37\":1}}],[\"如附加文档或第三方字体\",{\"1\":{\"37\":1}}],[\"如图形光栅化器\",{\"1\":{\"37\":1}}],[\"如反射\",{\"1\":{\"36\":1}}],[\"如果参数是引用类型\",{\"1\":{\"79\":1}}],[\"如果参数是基本类型的话\",{\"1\":{\"79\":1}}],[\"如果拿着银行卡去取钱\",{\"1\":{\"78\":1}}],[\"如果是用\",{\"1\":{\"77\":1}}],[\"如果方法的返回类型是\",{\"1\":{\"65\":1}}],[\"如果父类方法访问修饰符为\",{\"1\":{\"64\":1}}],[\"如果编译器找不到匹配的参数\",{\"1\":{\"63\":1}}],[\"如果多个方法\",{\"1\":{\"63\":1}}],[\"如果被\",{\"1\":{\"56\":1}}],[\"如果没有默认值会怎样\",{\"1\":{\"55\":1}}],[\"如果没有使用\",{\"1\":{\"55\":1}}],[\"如果成员变量是使用\",{\"1\":{\"55\":1}}],[\"如果超过这个范围就会有数值溢出的风险\",{\"1\":{\"53\":1}}],[\"如果超出对应范围仍然会去创建新的对象\",{\"1\":{\"49\":1}}],[\"如果频繁拆装箱的话\",{\"1\":{\"50\":1}}],[\"如果发现某一个对象并没有逃逸到方法外部\",{\"1\":{\"48\":1}}],[\"如果我们再加\",{\"1\":{\"47\":1}}],[\"如果我们要表示最大的正数\",{\"1\":{\"47\":1}}],[\"如果我们想要开一家店\",{\"1\":{\"41\":1}}],[\"如果移位的位数超过数值所占有的位数会怎样\",{\"1\":{\"44\":1}}],[\"如果一个方法前没有任何修饰符\",{\"1\":{\"42\":1}}],[\"如果代码量比较少\",{\"1\":{\"40\":1}}],[\"如果这个时候\",{\"1\":{\"37\":1}}],[\"如果全部使用\",{\"1\":{\"36\":1}}],[\"如果只使用\",{\"1\":{\"36\":1}}],[\"如果觉得官方文档看着比较难理解的话\",{\"1\":{\"36\":1}}],[\"如果需要进行\",{\"1\":{\"33\":1}}],[\"如虚拟化\",{\"1\":{\"33\":1}}],[\"如\",{\"1\":{\"33\":1,\"36\":1,\"37\":1}}],[\"仅包含\",{\"1\":{\"33\":1}}],[\"仅仅是是\",{\"1\":{\"32\":1}}],[\"程序设计语言将实参传递给方法\",{\"1\":{\"72\":1}}],[\"程序读取该值运行会出现意外\",{\"1\":{\"55\":1}}],[\"程序比用其他大多数语言编写的程序更具可移植性的原因之一\",{\"1\":{\"47\":1}}],[\"程序控制\",{\"1\":{\"42\":1}}],[\"程序内存更加安全\",{\"1\":{\"38\":1}}],[\"程序的安全性\",{\"1\":{\"36\":1}}],[\"程序的启动速度\",{\"1\":{\"36\":1}}],[\"程序的开发套件\",{\"1\":{\"33\":1}}],[\"程序要经过先编译\",{\"1\":{\"35\":1}}],[\"程序从源代码到运行的过程如下图所示\",{\"1\":{\"34\":1}}],[\"程序无须重新编译便可在多种不同操作系统的计算机上运行\",{\"1\":{\"34\":1}}],[\"程序运行时相对来说还是高效的\",{\"1\":{\"34\":1}}],[\"程序\",{\"1\":{\"33\":1}}],[\"程序所需的所有内容的集合\",{\"1\":{\"33\":1}}],[\"反编译工具\",{\"1\":{\"33\":1}}],[\"以下为个人观点看法\",{\"1\":{\"78\":1}}],[\"以下内容摘录自\",{\"1\":{\"65\":1}}],[\"以及一些零碎的东西\",{\"1\":{\"37\":1}}],[\"以及一些闭源的第三方组件\",{\"1\":{\"37\":1}}],[\"以及一些其他工具比如\",{\"1\":{\"33\":1}}],[\"以及\",{\"1\":{\"36\":1}}],[\"以至于\",{\"1\":{\"29\":1}}],[\"源码的编译器\",{\"1\":{\"33\":1}}],[\"key\",{\"1\":{\"44\":4}}],[\"keywords\",{\"1\":{\"42\":1}}],[\"kit\",{\"1\":{\"33\":1}}],[\"kw=thread\",{\"1\":{\"29\":1}}],[\"你也想象一下\",{\"1\":{\"78\":1}}],[\"你就要覆盖父类方法\",{\"1\":{\"62\":1}}],[\"你答对了吗\",{\"1\":{\"49\":1}}],[\"你们继续玩你们的\",{\"1\":{\"37\":1}}],[\"你们叫\",{\"1\":{\"37\":1}}],[\"你可以在\",{\"1\":{\"32\":1}}],[\"你想要创建什么类型的项目\",{\"1\":{\"11\":1}}],[\"并非来自于\",{\"1\":{\"78\":1}}],[\"并不会影响到实参\",{\"1\":{\"76\":1}}],[\"并不会影响到\",{\"1\":{\"74\":1}}],[\"并不是的\",{\"1\":{\"75\":1}}],[\"并不是完全开源的\",{\"1\":{\"37\":1}}],[\"并不是只有一种\",{\"1\":{\"32\":1}}],[\"并没有实现缓存机制\",{\"1\":{\"49\":1}}],[\"并且我要和你们自己搞的\",{\"1\":{\"37\":1}}],[\"并且刚开始的几个版本\",{\"1\":{\"37\":1}}],[\"并且\",{\"1\":{\"32\":1,\"33\":1,\"36\":1,\"48\":1}}],[\"维基百科上就有常见\",{\"1\":{\"32\":1}}],[\"等修饰符所修饰\",{\"1\":{\"55\":1}}],[\"等价于\",{\"1\":{\"50\":2}}],[\"等非\",{\"1\":{\"36\":1}}],[\"等语言就是静态编译\",{\"1\":{\"36\":1}}],[\"等语言还是有一定差距的\",{\"1\":{\"34\":1}}],[\"等工具\",{\"1\":{\"33\":1,\"37\":1}}],[\"等等\",{\"1\":{\"33\":1,\"35\":2}}],[\"等\",{\"1\":{\"32\":1,\"36\":1}}],[\"zing\",{\"1\":{\"32\":1}}],[\"zh\",{\"1\":{\"17\":1}}],[\"外部样子不能改变\",{\"1\":{\"65\":1}}],[\"外\",{\"1\":{\"32\":1}}],[\"组织或者个人都可以开发自己的专属\",{\"1\":{\"32\":1}}],[\"每个公司\",{\"1\":{\"32\":1}}],[\"规范的一种实现而已\",{\"1\":{\"32\":1}}],[\"规范\",{\"1\":{\"32\":2}}],[\"实际参数\",{\"1\":{\"71\":1}}],[\"实际上好的代码本身就是注释\",{\"1\":{\"40\":1}}],[\"实际上\",{\"1\":{\"29\":1,\"75\":1}}],[\"实参\",{\"0\":{\"71\":1},\"1\":{\"70\":1,\"71\":1,\"75\":1}}],[\"实现的\",{\"1\":{\"37\":1}}],[\"实现是\",{\"1\":{\"32\":1}}],[\"它和\",{\"1\":{\"75\":1}}],[\"它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法\",{\"1\":{\"63\":1}}],[\"它可以被类的所有实例共享\",{\"1\":{\"56\":1}}],[\"它可以运行\",{\"1\":{\"36\":1}}],[\"它随着对象的创建而存在\",{\"1\":{\"55\":1}}],[\"它依赖于\",{\"1\":{\"47\":1}}],[\"它们都共享同一份静态变量\",{\"1\":{\"56\":1}}],[\"它们都会给出相同的结果\",{\"1\":{\"32\":1}}],[\"它们还是有挺多不相同的地方\",{\"1\":{\"38\":1}}],[\"它像编译语言一样\",{\"1\":{\"35\":1}}],[\"它的速度就越快\",{\"1\":{\"34\":1}}],[\"它不面向任何特定的处理器\",{\"1\":{\"34\":1}}],[\"它是运行已编译\",{\"1\":{\"33\":1}}],[\"它是功能齐全的\",{\"1\":{\"33\":1}}],[\"它包含了\",{\"1\":{\"33\":1}}],[\"它包含了支持\",{\"1\":{\"30\":1}}],[\"目的是使用相同的字节码\",{\"1\":{\"32\":1}}],[\"目前市面上虚拟化技术已经非常成熟\",{\"1\":{\"29\":1}}],[\"虚拟机引入了\",{\"1\":{\"48\":1}}],[\"虚拟机的堆中\",{\"1\":{\"48\":1}}],[\"虚拟机栈中的局部变量表中\",{\"1\":{\"48\":1}}],[\"虚拟机之上的编程语言\",{\"1\":{\"32\":1}}],[\"虚拟机\",{\"1\":{\"32\":1,\"33\":1}}],[\"虚拟机实现平台无关性\",{\"1\":{\"29\":1}}],[\"冰箱\",{\"1\":{\"30\":1}}],[\"主要原因如下\",{\"1\":{\"60\":1}}],[\"主要包括\",{\"1\":{\"33\":1}}],[\"主要用于开发嵌入式消费电子设备的应用程序\",{\"1\":{\"30\":1}}],[\"主页\",{\"0\":{\"5\":1}}],[\"更稳定了吧\",{\"1\":{\"37\":1}}],[\"更新频率更快\",{\"1\":{\"37\":1}}],[\"更新博客只在master分支上改\",{\"0\":{\"22\":1}}],[\"更适合当下的云原生场景\",{\"1\":{\"36\":1}}],[\"更适合开发复杂的企业级应用程序或\",{\"1\":{\"30\":1}}],[\"更适合开发桌面应用程序或简单的服务器应用程序\",{\"1\":{\"30\":1}}],[\"例如staticvariableexample\",{\"1\":{\"56\":1}}],[\"例如部署代码\",{\"1\":{\"37\":1}}],[\"例如手机\",{\"1\":{\"30\":1}}],[\"例如\",{\"1\":{\"30\":1,\"43\":1}}],[\"健壮\",{\"1\":{\"30\":1}}],[\"平台企业版\",{\"1\":{\"30\":1}}],[\"平台标准版\",{\"1\":{\"30\":1}}],[\"平台无关性\",{\"1\":{\"29\":1}}],[\"强大的生态才是\",{\"1\":{\"29\":1}}],[\"就比如下面的这个\",{\"1\":{\"66\":1}}],[\"就比如说十进制下的\",{\"1\":{\"51\":1}}],[\"就没办法精确转换成二进制小数\",{\"1\":{\"51\":1}}],[\"就存放在堆中\",{\"1\":{\"48\":1}}],[\"就会产生编译时错误\",{\"1\":{\"63\":1}}],[\"就会导致溢出\",{\"1\":{\"47\":1}}],[\"就会触发自动发布\",{\"1\":{\"21\":1}}],[\"就是我们日常生活中的关键字\",{\"1\":{\"41\":1}}],[\"就叫标识符\",{\"1\":{\"41\":1}}],[\"就算没学过\",{\"1\":{\"38\":1}}],[\"就不需要注释\",{\"1\":{\"40\":1}}],[\"就不需要区分\",{\"1\":{\"33\":1}}],[\"就不得不提\",{\"1\":{\"36\":1}}],[\"就需要安装\",{\"1\":{\"33\":1}}],[\"就很容易实现跨平台了\",{\"1\":{\"29\":1}}],[\"各种\",{\"1\":{\"29\":1}}],[\"跨平台已经不是\",{\"1\":{\"29\":1}}],[\"依然有很多人觉得跨平台是\",{\"1\":{\"29\":1}}],[\"流传了好多年\",{\"1\":{\"29\":1}}],[\"真心经典\",{\"1\":{\"29\":1}}],[\"这里的\",{\"1\":{\"77\":1}}],[\"这里传递的还是值\",{\"1\":{\"75\":1}}],[\"这里需要额外多说明一下\",{\"1\":{\"65\":1}}],[\"这里就不做演示了\",{\"1\":{\"44\":1}}],[\"这本书是这样介绍重载的\",{\"1\":{\"63\":1}}],[\"这本书明确指出\",{\"1\":{\"40\":1}}],[\"这一行代码会发生装箱\",{\"1\":{\"49\":1}}],[\"这一步\",{\"1\":{\"34\":1}}],[\"这八种基本类型都有对应的包装类分别为\",{\"1\":{\"47\":1}}],[\"这是为什么呢\",{\"1\":{\"47\":1}}],[\"这是因为在二进制补码表示法中\",{\"1\":{\"47\":1}}],[\"这是因为\",{\"1\":{\"35\":1,\"48\":1}}],[\"这\",{\"1\":{\"47\":1,\"49\":1}}],[\"这就需要用到下面几个关键词\",{\"1\":{\"45\":1}}],[\"这不光可以帮助我们在代码中使用\",{\"1\":{\"44\":1}}],[\"这个值是实参的地址罢了\",{\"1\":{\"75\":1}}],[\"这个过程被称为重载解析\",{\"1\":{\"63\":1}}],[\"这个需要结合\",{\"1\":{\"60\":1}}],[\"这个成员变量是属于实例的\",{\"1\":{\"55\":1}}],[\"这个和计算机保存浮点数的机制有很大关系\",{\"1\":{\"51\":1}}],[\"这个关键字很特殊\",{\"1\":{\"42\":1}}],[\"这个名字已经被赋予了特殊的含义\",{\"1\":{\"41\":1}}],[\"这个时候\",{\"1\":{\"37\":1}}],[\"这些特殊的标识符就是\",{\"1\":{\"41\":1}}],[\"这与\",{\"1\":{\"38\":1}}],[\"这也就说明了为什么方法内部对形参的修改会影响到实参\",{\"1\":{\"75\":1}}],[\"这也就是解释了为什么浮点数没有办法用二进制精确表示\",{\"1\":{\"51\":1}}],[\"这也是为什么通过\",{\"1\":{\"37\":1}}],[\"这也解释了我们为什么经常会说\",{\"1\":{\"34\":1}}],[\"这么好\",{\"1\":{\"37\":1}}],[\"这么多优点\",{\"1\":{\"36\":1}}],[\"这样可以节省内存\",{\"1\":{\"56\":1}}],[\"这样可以极大的减少\",{\"1\":{\"33\":1}}],[\"这样吧\",{\"1\":{\"37\":1}}],[\"这种方式非常容易造成混淆\",{\"1\":{\"61\":1}}],[\"这种方式的执行速度会相对比较慢\",{\"1\":{\"34\":1}}],[\"这种所占存储空间大小的不变性是\",{\"1\":{\"47\":1}}],[\"这种编译模式会在程序被执行前就将其编译成机器码\",{\"1\":{\"36\":1}}],[\"这种字节码必须由\",{\"1\":{\"35\":1}}],[\"这种技术混合了编译语言与解释型语言的优点\",{\"1\":{\"35\":1}}],[\"这四者的关系\",{\"1\":{\"34\":1}}],[\"这四者的关系如下图所示\",{\"1\":{\"34\":1}}],[\"这对于满足现代应用程序架构的需求\",{\"1\":{\"33\":1}}],[\"这句宣传口号\",{\"1\":{\"29\":1}}],[\"这可能需要数分钟\",{\"1\":{\"11\":1}}],[\"拓展一下\",{\"1\":{\"29\":1,\"37\":1}}],[\"🌈\",{\"1\":{\"29\":1,\"37\":1}}],[\"在他设计\",{\"1\":{\"78\":1}}],[\"在设计之初就看到了\",{\"1\":{\"78\":1}}],[\"在外部调用静态方法时\",{\"1\":{\"61\":1}}],[\"在这个计算过程中\",{\"1\":{\"51\":1}}],[\"在这一步\",{\"1\":{\"34\":1}}],[\"在循环结构中\",{\"1\":{\"45\":1}}],[\"在二进制中的表现比较特殊\",{\"1\":{\"44\":1}}],[\"在写代码的过程中\",{\"1\":{\"43\":1}}],[\"在写程序的时候随手加上注释是一个非常好的习惯\",{\"1\":{\"40\":1}}],[\"在访问控制中\",{\"1\":{\"42\":1}}],[\"在类的非静态成员不存在的时候静态方法就已经存在了\",{\"1\":{\"60\":1}}],[\"在类加载的时候就会分配内存\",{\"1\":{\"60\":1}}],[\"在类\",{\"1\":{\"42\":1}}],[\"在程序控制中\",{\"1\":{\"42\":1}}],[\"在我们的日常生活中\",{\"1\":{\"41\":1}}],[\"在我们编写程序的时候\",{\"1\":{\"41\":1}}],[\"在我们编写代码的时候\",{\"1\":{\"40\":1}}],[\"在我看来\",{\"1\":{\"29\":1}}],[\"在一定程度上解决了传统解释型语言执行效率低的问题\",{\"1\":{\"34\":1}}],[\"在引入了模块系统之后\",{\"1\":{\"33\":1}}],[\"在\",{\"1\":{\"29\":1,\"33\":1,\"34\":1,\"37\":2,\"42\":1,\"44\":1,\"53\":1,\"57\":1,\"72\":1,\"74\":1,\"77\":1}}],[\"在actions菜单栏中应该会触发自动发布\",{\"1\":{\"21\":1}}],[\"参数在程序语言中分为\",{\"1\":{\"71\":1}}],[\"参数\",{\"1\":{\"71\":1}}],[\"参数列表\",{\"1\":{\"65\":1}}],[\"参数列表必须相同\",{\"1\":{\"64\":1}}],[\"参数类型不同\",{\"1\":{\"63\":1}}],[\"参考\",{\"0\":{\"67\":1,\"80\":1}}],[\"参考链接\",{\"1\":{\"29\":1}}],[\"参考资料\",{\"1\":{\"9\":1}}],[\"参见\",{\"1\":{\"29\":1}}],[\"🐛\",{\"1\":{\"29\":1}}],[\"支持定义可变长参数\",{\"1\":{\"66\":1}}],[\"支持多重继承\",{\"1\":{\"38\":1}}],[\"支持多线程\",{\"1\":{\"29\":1}}],[\"支持商用\",{\"1\":{\"37\":1}}],[\"支持网络编程并且很方便\",{\"1\":{\"29\":1}}],[\"编写的程序需要先经过编译步骤\",{\"1\":{\"35\":1}}],[\"编程思想\",{\"1\":{\"47\":1}}],[\"编程工作\",{\"1\":{\"33\":1}}],[\"编程语言的基础\",{\"1\":{\"30\":1}}],[\"编译期\",{\"1\":{\"65\":1}}],[\"编译无法支持\",{\"1\":{\"36\":1}}],[\"编译\",{\"1\":{\"36\":3}}],[\"编译后的代码不容易被反编译和修改\",{\"1\":{\"36\":1}}],[\"编译语言的执行速度比较快\",{\"1\":{\"35\":1}}],[\"编译型语言和解释型语言\",{\"1\":{\"35\":1}}],[\"编译型语言\",{\"1\":{\"35\":1}}],[\"编译型\",{\"1\":{\"35\":1}}],[\"编译器必须挑选出具体执行哪个方法\",{\"1\":{\"63\":1}}],[\"编译器在对short\",{\"1\":{\"44\":1}}],[\"编译器在编译代码之前会把代码中的所有注释抹掉\",{\"1\":{\"40\":1}}],[\"编译器完成第一次编译后\",{\"1\":{\"34\":1}}],[\"编译器\",{\"1\":{\"34\":1}}],[\"编译器等技术的优化\",{\"1\":{\"29\":1}}],[\"编译与解释并存\",{\"0\":{\"35\":1},\"1\":{\"29\":1,\"35\":1}}],[\"编辑此页\",{\"0\":{\"23\":1}}],[\"限制程序直接访问操作系统资源\",{\"1\":{\"29\":1}}],[\"安全性\",{\"1\":{\"29\":1}}],[\"安装依赖\",{\"1\":{\"11\":1}}],[\"安装pnpm\",{\"1\":{\"9\":1}}],[\"安装nodejs\",{\"1\":{\"9\":1}}],[\"具备异常处理和自动内存管理机制\",{\"1\":{\"29\":1}}],[\"可变参数只能作为函数的最后一个参数\",{\"1\":{\"66\":1}}],[\"可修改\",{\"1\":{\"65\":3}}],[\"可能在看这个问题之前很多人和我一样并没有接触和使用过\",{\"1\":{\"37\":1}}],[\"可伸缩和安全的服务端\",{\"1\":{\"30\":1}}],[\"可移植\",{\"1\":{\"30\":1}}],[\"可以影响到实参的值\",{\"1\":{\"77\":1}}],[\"可以降低限制\",{\"1\":{\"65\":1}}],[\"可以降低请求的最大延迟\",{\"1\":{\"36\":1}}],[\"可以通过类名直接访问\",{\"1\":{\"60\":1}}],[\"可以参加表达式运算\",{\"1\":{\"57\":1}}],[\"可以直接报错\",{\"1\":{\"55\":1}}],[\"可以实现对浮点数的运算\",{\"1\":{\"52\":1}}],[\"可以自己私下用\",{\"1\":{\"37\":1}}],[\"可以使用\",{\"1\":{\"37\":1,\"42\":2,\"61\":1}}],[\"可以去看看\",{\"1\":{\"36\":1}}],[\"可以看看我写的这篇文章\",{\"1\":{\"52\":1}}],[\"可以看到\",{\"1\":{\"47\":1,\"77\":1}}],[\"可以看出\",{\"1\":{\"36\":1}}],[\"可以看提交记录\",{\"1\":{\"24\":1}}],[\"可以提高\",{\"1\":{\"36\":1}}],[\"可以理解的代码就叫做字节码\",{\"1\":{\"34\":1}}],[\"可以用\",{\"1\":{\"33\":1}}],[\"可以用于\",{\"1\":{\"33\":1}}],[\"可以用于构建分布式\",{\"1\":{\"30\":1}}],[\"可以用于构建桌面应用程序或简单的服务器应用程序\",{\"1\":{\"30\":1}}],[\"可靠性\",{\"1\":{\"29\":1}}],[\"而不只是构造器方法\",{\"1\":{\"63\":1}}],[\"而不是\",{\"1\":{\"37\":1,\"50\":1}}],[\"而不是不管什么应用\",{\"1\":{\"33\":1}}],[\"而实例方法不存在这个限制\",{\"1\":{\"61\":1}}],[\"而实例方法只有后面这种方式\",{\"1\":{\"61\":1}}],[\"而非静态成员属于实例对象\",{\"1\":{\"60\":1}}],[\"而成员变量可能是运行时赋值\",{\"1\":{\"55\":1}}],[\"而对象引用作为参数就不一样\",{\"1\":{\"74\":1}}],[\"而对象存在于堆内存\",{\"1\":{\"55\":1}}],[\"而对于某些需要使用\",{\"1\":{\"33\":1}}],[\"而局部变量不行\",{\"1\":{\"55\":1}}],[\"而局部变量不能被访问控制修饰符及\",{\"1\":{\"55\":1}}],[\"而局部变量则不会自动赋值\",{\"1\":{\"55\":1}}],[\"而局部变量随着方法的调用而自动生成\",{\"1\":{\"55\":1}}],[\"而局部变量是在代码块或方法中定义的变量或是方法的参数\",{\"1\":{\"55\":1}}],[\"而integer\",{\"1\":{\"49\":1}}],[\"而避免堆上分配内存\",{\"1\":{\"48\":1}}],[\"而基本类型有默认值且不是\",{\"1\":{\"48\":1}}],[\"而基本类型不可以\",{\"1\":{\"48\":1}}],[\"而言\",{\"1\":{\"37\":1}}],[\"而这种技术大致原理是运行时直接在内存中生成并加载修改后的字节码文件也就是\",{\"1\":{\"36\":1}}],[\"而这也就是\",{\"1\":{\"34\":1}}],[\"而我们知道\",{\"1\":{\"34\":1}}],[\"而且计算机在表示一个数字时\",{\"1\":{\"51\":1}}],[\"而且\",{\"1\":{\"34\":2}}],[\"而\",{\"1\":{\"29\":1,\"33\":1,\"34\":1,\"37\":5,\"41\":1}}],[\"封装\",{\"1\":{\"29\":1}}],[\"简单总结一下\",{\"1\":{\"37\":1}}],[\"简单来说\",{\"1\":{\"30\":1,\"41\":2}}],[\"简单易学\",{\"1\":{\"29\":1}}],[\"简体中文\",{\"1\":{\"11\":1}}],[\"基本数值类型都有一个表达范围\",{\"1\":{\"53\":1}}],[\"基本数据类型存放在栈中是一个常见的误区\",{\"1\":{\"48\":1}}],[\"基本数据类型占用的空间往往非常小\",{\"1\":{\"48\":1}}],[\"基本数据类型的包装类型的大部分都用到了缓存机制来提升性能\",{\"1\":{\"49\":1}}],[\"基本数据类型的成员变量如果没有被\",{\"1\":{\"48\":1}}],[\"基本数据类型的成员变量\",{\"1\":{\"48\":1}}],[\"基本数据类型的局部变量存放在\",{\"1\":{\"48\":1}}],[\"基本数据类型\",{\"0\":{\"46\":1}}],[\"基本类型和包装类型的区别\",{\"0\":{\"48\":1}}],[\"基本类型\",{\"1\":{\"42\":1,\"47\":1,\"48\":1}}],[\"基本语法\",{\"0\":{\"39\":1}}],[\"基本功\",{\"1\":{\"35\":1}}],[\"基础知识第十版第四章\",{\"1\":{\"80\":1}}],[\"基础类库\",{\"1\":{\"33\":1}}],[\"基础概念与常识\",{\"0\":{\"28\":1}}],[\"基于以上这些原因\",{\"1\":{\"37\":1}}],[\"基于静态编译构建微服务应用\",{\"1\":{\"36\":1}}],[\"基于\",{\"1\":{\"33\":1,\"37\":1}}],[\"基于vuepress\",{\"1\":{\"8\":1}}],[\"上面的表述不太清晰准确\",{\"1\":{\"65\":1}}],[\"上面这两行代码对应的字节码为\",{\"1\":{\"50\":1}}],[\"上发布\",{\"1\":{\"37\":1}}],[\"上找到各个版本的\",{\"1\":{\"32\":1}}],[\"上\",{\"0\":{\"27\":1}}],[\"james\",{\"1\":{\"78\":1,\"80\":1}}],[\"java基础\",{\"2\":{\"69\":1,\"82\":1}}],[\"java基础常见面试题总结\",{\"0\":{\"27\":1}}],[\"javaguide\",{\"1\":{\"66\":1}}],[\"java5\",{\"1\":{\"66\":1}}],[\"javase\",{\"1\":{\"42\":1}}],[\"javascript\",{\"1\":{\"35\":1,\"36\":1},\"2\":{\"26\":1}}],[\"java11\",{\"1\":{\"37\":1}}],[\"java8\",{\"1\":{\"37\":1}}],[\"java与llvm是这种技术的代表产物\",{\"1\":{\"35\":1}}],[\"java程序转变为机器代码的过程\",{\"1\":{\"34\":2}}],[\"javap\",{\"1\":{\"33\":2}}],[\"javadoc\",{\"1\":{\"33\":2}}],[\"javac\",{\"1\":{\"33\":2,\"55\":1}}],[\"javamail\",{\"1\":{\"30\":1}}],[\"java\",{\"0\":{\"29\":1,\"30\":2,\"35\":1,\"38\":1,\"42\":1,\"47\":1,\"70\":1,\"73\":1,\"78\":1,\"85\":1},\"1\":{\"29\":7,\"30\":25,\"32\":6,\"33\":26,\"34\":7,\"35\":6,\"36\":5,\"37\":10,\"38\":8,\"40\":3,\"41\":1,\"42\":1,\"43\":1,\"44\":3,\"47\":5,\"48\":2,\"49\":1,\"50\":2,\"53\":1,\"57\":1,\"63\":2,\"65\":1,\"66\":3,\"67\":1,\"72\":1,\"73\":1,\"75\":2,\"77\":1,\"78\":5,\"79\":1,\"80\":4},\"2\":{\"68\":1,\"81\":1}}],[\"juejin\",{\"1\":{\"67\":1}}],[\"just\",{\"1\":{\"29\":1,\"34\":1}}],[\"jfr\",{\"1\":{\"37\":1}}],[\"jni\",{\"1\":{\"36\":1}}],[\"jit\",{\"1\":{\"34\":6,\"36\":8,\"48\":1}}],[\"jlink\",{\"1\":{\"33\":3}}],[\"jmc\",{\"1\":{\"37\":1}}],[\"jmx\",{\"1\":{\"33\":1}}],[\"jms\",{\"1\":{\"30\":1}}],[\"jconsole\",{\"1\":{\"33\":2}}],[\"jrockit\",{\"1\":{\"32\":1}}],[\"jre\",{\"0\":{\"31\":1,\"33\":1},\"1\":{\"33\":8,\"34\":2,\"67\":2}}],[\"j9\",{\"1\":{\"32\":1}}],[\"jvm\",{\"0\":{\"31\":1,\"32\":1},\"1\":{\"32\":10,\"33\":1,\"34\":7,\"36\":2,\"47\":1,\"60\":1}}],[\"jta\",{\"1\":{\"30\":1}}],[\"jpa\",{\"1\":{\"30\":1}}],[\"jdb\",{\"1\":{\"33\":2}}],[\"jdbc\",{\"1\":{\"30\":1}}],[\"jdk1\",{\"1\":{\"44\":1}}],[\"jdk17\",{\"1\":{\"37\":1}}],[\"jdk8\",{\"1\":{\"42\":1}}],[\"jdk8u221\",{\"1\":{\"37\":1}}],[\"jdk\",{\"0\":{\"31\":1,\"33\":1,\"37\":1},\"1\":{\"29\":1,\"32\":1,\"33\":12,\"34\":2,\"36\":3,\"37\":31,\"44\":1,\"67\":4}}],[\"jsp\",{\"1\":{\"30\":1,\"33\":1}}],[\"json\",{\"1\":{\"11\":1}}],[\"踩了一些坑\",{\"1\":{\"24\":1}}],[\"踩坑\",{\"0\":{\"24\":1}}],[\"默认值有两种设置方式\",{\"1\":{\"55\":1}}],[\"默认值\",{\"1\":{\"23\":1,\"47\":1,\"48\":1,\"55\":1}}],[\"默认为\",{\"1\":{\"11\":1}}],[\"修饰的方法能够被再次声明\",{\"1\":{\"64\":1}}],[\"修饰的成员变量也必须显式地赋值\",{\"1\":{\"55\":1}}],[\"修饰的\",{\"1\":{\"55\":1}}],[\"修饰的话\",{\"1\":{\"48\":1}}],[\"修饰\",{\"1\":{\"48\":1,\"55\":1}}],[\"修正\",{\"1\":{\"29\":1}}],[\"修复\",{\"0\":{\"23\":1}}],[\"修改theme\",{\"1\":{\"23\":1}}],[\"修改\",{\"0\":{\"16\":1,\"17\":1}}],[\"需要注意的是一般不建议使用\",{\"1\":{\"61\":1}}],[\"需要通过类的实例对象去访问\",{\"1\":{\"60\":1}}],[\"需要大量地为程序\",{\"1\":{\"41\":1}}],[\"需要build成html文件和js才行\",{\"1\":{\"22\":1}}],[\"需要先进入项目目录\",{\"1\":{\"14\":1}}],[\"guide哥\",{\"1\":{\"66\":1}}],[\"getname\",{\"1\":{\"76\":4}}],[\"getter\",{\"1\":{\"76\":1}}],[\"getbytes\",{\"1\":{\"57\":1}}],[\"getfield\",{\"1\":{\"50\":1}}],[\"greeting\",{\"1\":{\"57\":1,\"60\":2}}],[\"graalvm\",{\"1\":{\"36\":5}}],[\"gc\",{\"1\":{\"38\":1}}],[\"gpl\",{\"1\":{\"37\":1}}],[\"gosling\",{\"1\":{\"78\":1,\"80\":1}}],[\"goto\",{\"1\":{\"42\":1}}],[\"go\",{\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\"gh\",{\"1\":{\"22\":1}}],[\"git\",{\"1\":{\"11\":1}}],[\"gitee\",{\"1\":{\"1\":1}}],[\"github上开源\",{\"0\":{\"20\":1}}],[\"github\",{\"1\":{\"1\":1,\"8\":1,\"11\":1,\"37\":2}}],[\"是不是很可怕\",{\"1\":{\"78\":1}}],[\"是不开源的\",{\"1\":{\"37\":1}}],[\"是没有引用传递的\",{\"1\":{\"77\":1}}],[\"是子类对父类的允许访问的方法的实现过程进行重新编写\",{\"1\":{\"64\":1}}],[\"是指我们获取到的某个方法体中的代码执行后产生的结果\",{\"1\":{\"59\":1}}],[\"是我们程序员写给自己看的\",{\"1\":{\"40\":1}}],[\"是商业免费的\",{\"1\":{\"37\":1}}],[\"是开源的\",{\"1\":{\"37\":1}}],[\"是完全免费的\",{\"1\":{\"37\":1}}],[\"是一个参考模型并且是完全开源的\",{\"1\":{\"37\":1}}],[\"是一种高性能的\",{\"1\":{\"36\":1}}],[\"是基于\",{\"1\":{\"37\":2}}],[\"是十分接近的\",{\"1\":{\"37\":1}}],[\"是编译与解释共存的语言\",{\"1\":{\"34\":1}}],[\"是非常重要的\",{\"1\":{\"33\":1}}],[\"是提供给开发者使用\",{\"1\":{\"33\":1}}],[\"是运行\",{\"1\":{\"32\":1}}],[\"是\",{\"1\":{\"30\":3,\"33\":2,\"37\":1}}],[\"是源码分支\",{\"1\":{\"22\":1}}],[\"是否免费\",{\"1\":{\"37\":1}}],[\"是否开源\",{\"1\":{\"37\":1}}],[\"是否想要现在启动\",{\"1\":{\"11\":1}}],[\"是否初始化\",{\"1\":{\"11\":1}}],[\"是否需要一个自动部署文档到\",{\"1\":{\"11\":1}}],[\"点击访问即可\",{\"1\":{\"21\":1}}],[\"点击save\",{\"1\":{\"21\":1}}],[\"配置部署分支为gh\",{\"1\":{\"21\":1}}],[\"配置github\",{\"0\":{\"21\":1}}],[\"选中侧边栏pages\",{\"1\":{\"21\":1}}],[\"选择包管理器\",{\"1\":{\"11\":1}}],[\"选择显示语言\",{\"1\":{\"11\":1}}],[\"底部设置change\",{\"1\":{\"20\":1}}],[\"打开settings\",{\"1\":{\"20\":1}}],[\"打开仓库my\",{\"1\":{\"20\":1,\"21\":1}}],[\"打开http\",{\"1\":{\"12\":1}}],[\"推送新分支到github\",{\"0\":{\"19\":1}}],[\"共享项目到github\",{\"0\":{\"18\":1}}],[\"father\",{\"1\":{\"80\":1}}],[\"false\",{\"1\":{\"17\":1,\"42\":1,\"45\":1,\"47\":2,\"49\":6,\"51\":1}}],[\"f4\",{\"1\":{\"59\":1}}],[\"f3\",{\"1\":{\"59\":1}}],[\"f2\",{\"1\":{\"59\":1}}],[\"f\",{\"1\":{\"59\":1}}],[\"f1\",{\"1\":{\"59\":1}}],[\"finally\",{\"1\":{\"42\":1}}],[\"final\",{\"1\":{\"42\":1,\"44\":1,\"49\":3,\"55\":2,\"56\":2,\"57\":2,\"60\":2,\"64\":1}}],[\"file\",{\"1\":{\"27\":1,\"67\":1,\"80\":1}}],[\"float\",{\"1\":{\"42\":1,\"44\":1,\"47\":3,\"49\":3,\"51\":2}}],[\"flag\",{\"1\":{\"40\":1,\"45\":3}}],[\"flags\",{\"1\":{\"40\":1}}],[\"flight\",{\"1\":{\"37\":1}}],[\"full\",{\"1\":{\"40\":1}}],[\"for\",{\"1\":{\"40\":1,\"42\":1,\"45\":1,\"49\":1,\"50\":1,\"66\":2}}],[\"found\",{\"1\":{\"11\":1,\"27\":1,\"67\":1,\"80\":1}}],[\"what\",{\"1\":{\"67\":2}}],[\"while\",{\"1\":{\"42\":1}}],[\"world\",{\"1\":{\"55\":1,\"57\":1,\"60\":1}}],[\"webstart\",{\"1\":{\"37\":1}}],[\"web\",{\"1\":{\"30\":2}}],[\"write\",{\"1\":{\"29\":1}}],[\"www\",{\"1\":{\"29\":1,\"36\":1,\"67\":1}}],[\"windows\",{\"1\":{\"29\":1,\"32\":1}}],[\"with\",{\"1\":{\"17\":1,\"80\":1}}],[\"want\",{\"1\":{\"11\":1}}],[\"was\",{\"1\":{\"11\":1}}],[\"warn\",{\"1\":{\"11\":1}}],[\"的回答\",{\"1\":{\"80\":1}}],[\"的时候就遵循了简单易用的原则\",{\"1\":{\"78\":1}}],[\"的许多弊端\",{\"1\":{\"78\":1}}],[\"的话还是值传递哦\",{\"1\":{\"77\":1}}],[\"的代码为例\",{\"1\":{\"77\":1}}],[\"的代码之间有什么区别\",{\"1\":{\"37\":1}}],[\"的互换只是拷贝的两个地址的互换罢了\",{\"1\":{\"76\":1}}],[\"的地址\",{\"1\":{\"75\":1,\"76\":1}}],[\"的副本\",{\"1\":{\"74\":1}}],[\"的复制过来的\",{\"1\":{\"74\":1}}],[\"的移位操作符\",{\"1\":{\"67\":1}}],[\"的可变参数编译后实际会被转换成一个数组\",{\"1\":{\"66\":1}}],[\"的可视化监控⼯具\",{\"1\":{\"33\":1}}],[\"的构造方法\",{\"1\":{\"63\":1}}],[\"的方式是\",{\"1\":{\"79\":1}}],[\"的方式分为两种\",{\"1\":{\"72\":1}}],[\"的方式来调用静态方法\",{\"1\":{\"61\":2}}],[\"的方式\",{\"1\":{\"61\":2}}],[\"的相关知识\",{\"1\":{\"60\":1}}],[\"的相应类型的缓存数据\",{\"1\":{\"49\":1}}],[\"的详细介绍\",{\"1\":{\"52\":1}}],[\"的每种基本类型所占存储空间的大小不会像其他大多数语言那样随机器硬件架构的变化而变化\",{\"1\":{\"47\":1}}],[\"的值进行交换\",{\"1\":{\"74\":1}}],[\"的值\",{\"1\":{\"43\":1,\"74\":1}}],[\"的类不可以多继承\",{\"1\":{\"38\":1}}],[\"的类是单继承的\",{\"1\":{\"38\":1}}],[\"的发行版\",{\"1\":{\"37\":1}}],[\"的功能基本一致\",{\"1\":{\"37\":1}}],[\"的区别是什么\",{\"0\":{\"45\":1}}],[\"的区别\",{\"0\":{\"38\":1},\"1\":{\"37\":1}}],[\"的所有部分\",{\"1\":{\"37\":1}}],[\"的实现\",{\"1\":{\"37\":1}}],[\"的\",{\"1\":{\"37\":2}}],[\"的一些动态特性\",{\"1\":{\"36\":1}}],[\"的官方文档\",{\"1\":{\"36\":1}}],[\"的主要优势在于具备更高的极限处理能力\",{\"1\":{\"36\":1}}],[\"的主要优势在于启动时间\",{\"1\":{\"36\":1}}],[\"的大致结构模型\",{\"1\":{\"34\":2}}],[\"的做法\",{\"1\":{\"34\":1}}],[\"的文件\",{\"1\":{\"34\":1}}],[\"的关系了\",{\"1\":{\"33\":1}}],[\"的关键所在\",{\"1\":{\"32\":1}}],[\"的对比\",{\"1\":{\"32\":1}}],[\"的微型版本\",{\"1\":{\"30\":1}}],[\"的高级版本\",{\"1\":{\"30\":1}}],[\"的基础版本\",{\"1\":{\"30\":1}}],[\"的基础上添加了一些特有的功能和工具\",{\"1\":{\"37\":1}}],[\"的基础上搞了一个\",{\"1\":{\"37\":1}}],[\"的基础上\",{\"1\":{\"30\":1}}],[\"的博客演示\",{\"1\":{\"17\":1}}],[\"的工作流\",{\"1\":{\"11\":1}}],[\"博客演示\",{\"1\":{\"17\":1}}],[\"educba\",{\"1\":{\"67\":1}}],[\"edition\",{\"1\":{\"30\":3}}],[\"equals\",{\"1\":{\"48\":1,\"49\":1,\"52\":1}}],[\"else\",{\"1\":{\"42\":1,\"45\":4}}],[\"eligible\",{\"1\":{\"40\":1}}],[\"example\",{\"1\":{\"60\":1}}],[\"extends\",{\"1\":{\"42\":1,\"65\":2}}],[\"export\",{\"1\":{\"17\":1}}],[\"employee\",{\"1\":{\"40\":4}}],[\"evaluation\",{\"1\":{\"34\":1}}],[\"ejb\",{\"1\":{\"30\":1}}],[\"enum\",{\"1\":{\"42\":1}}],[\"environment\",{\"1\":{\"33\":1}}],[\"enterprise\",{\"1\":{\"30\":1}}],[\"enable\",{\"1\":{\"17\":1}}],[\"ee\",{\"0\":{\"30\":1},\"1\":{\"30\":5}}],[\"esbuild\",{\"1\":{\"11\":2}}],[\"确保这是你正在使用的分支名称\",{\"1\":{\"16\":1}}],[\"效果\",{\"0\":{\"13\":1}}],[\"访问修饰符\",{\"1\":{\"65\":1}}],[\"访问修饰符范围大于等于父类\",{\"1\":{\"64\":1}}],[\"访问类成员是否存在限制\",{\"1\":{\"61\":1}}],[\"访问控制\",{\"1\":{\"42\":1}}],[\"访问\",{\"0\":{\"12\":1},\"1\":{\"12\":1}}],[\"name\",{\"1\":{\"55\":5,\"65\":3,\"76\":1}}],[\"native\",{\"1\":{\"36\":2,\"42\":1}}],[\"n\",{\"1\":{\"50\":4,\"59\":1,\"77\":4}}],[\"num++\",{\"1\":{\"77\":1}}],[\"num\",{\"1\":{\"77\":3}}],[\"num3\",{\"1\":{\"55\":2}}],[\"num2\",{\"1\":{\"55\":2,\"74\":8}}],[\"num1\",{\"1\":{\"55\":2,\"74\":8}}],[\"nutsandbolts\",{\"1\":{\"42\":1}}],[\"null\",{\"1\":{\"42\":1,\"44\":1,\"48\":2}}],[\"new\",{\"1\":{\"42\":1,\"49\":6,\"52\":3,\"61\":1,\"63\":2,\"65\":2,\"76\":2}}],[\"network\",{\"1\":{\"11\":1,\"37\":1}}],[\"npm\",{\"1\":{\"14\":1}}],[\"not\",{\"1\":{\"27\":1,\"67\":1,\"80\":1}}],[\"node\",{\"1\":{\"11\":2}}],[\"no\",{\"1\":{\"11\":1}}],[\"high\",{\"1\":{\"49\":3}}],[\"hero\",{\"1\":{\"65\":6}}],[\"helloworld\",{\"1\":{\"63\":1}}],[\"hello\",{\"1\":{\"47\":1,\"55\":2,\"57\":1,\"60\":1,\"71\":4}}],[\"heihei\",{\"1\":{\"45\":1}}],[\"haha\",{\"1\":{\"45\":2}}],[\"hashcode\",{\"1\":{\"44\":2}}],[\"hash\",{\"1\":{\"44\":2}}],[\"hashmap\",{\"1\":{\"44\":1}}],[\"h\",{\"1\":{\"44\":3,\"47\":1,\"49\":1}}],[\"html\",{\"1\":{\"42\":1}}],[\"https\",{\"1\":{\"36\":1,\"37\":2,\"42\":1,\"67\":4}}],[\"http\",{\"1\":{\"11\":2,\"29\":1}}],[\"hollis\",{\"1\":{\"80\":1}}],[\"hourly\",{\"1\":{\"40\":1}}],[\"hotspot\",{\"1\":{\"32\":2,\"34\":1,\"48\":1}}],[\"hope\",{\"1\":{\"8\":1,\"10\":1,\"11\":5,\"17\":1}}],[\"➜\",{\"1\":{\"11\":2}}],[\">=\",{\"1\":{\"49\":1}}],[\">>\",{\"1\":{\"44\":3}}],[\">>>42等同于x\",{\"1\":{\"44\":1}}],[\">>>\",{\"1\":{\"44\":4}}],[\">机器码\",{\"1\":{\"34\":1}}],[\">\",{\"1\":{\"11\":2,\"40\":1,\"51\":5}}],[\"请看案例\",{\"1\":{\"74\":1}}],[\"请在浏览器输入给出的开发服务器地址\",{\"1\":{\"11\":1}}],[\"请耐心等待\",{\"1\":{\"11\":1}}],[\"启动成功后\",{\"1\":{\"11\":1}}],[\"启动开发服务器\",{\"1\":{\"11\":1}}],[\"查看\",{\"1\":{\"11\":1}}],[\"y\",{\"1\":{\"52\":3}}],[\"yum\",{\"1\":{\"37\":1}}],[\"yml\",{\"0\":{\"16\":1}}],[\"you\",{\"1\":{\"11\":1}}],[\"yes\",{\"1\":{\"11\":3}}],[\"i4\",{\"1\":{\"49\":2}}],[\"i3\",{\"1\":{\"49\":2}}],[\"i22\",{\"1\":{\"49\":2}}],[\"i2\",{\"1\":{\"49\":4}}],[\"i1=integer\",{\"1\":{\"49\":1}}],[\"i1=40\",{\"1\":{\"49\":1}}],[\"i1==i2\",{\"1\":{\"49\":1}}],[\"i11\",{\"1\":{\"49\":2}}],[\"i1\",{\"1\":{\"49\":4}}],[\"i++\",{\"1\":{\"45\":1,\"49\":1,\"50\":1}}],[\"i\",{\"1\":{\"44\":12,\"45\":7,\"49\":9,\"50\":14}}],[\"ide\",{\"1\":{\"42\":1}}],[\"import\",{\"1\":{\"42\":1}}],[\"implements\",{\"1\":{\"42\":1}}],[\"iseligibleforfullbenefits\",{\"1\":{\"40\":1}}],[\"is\",{\"1\":{\"40\":1,\"67\":2}}],[\"issue\",{\"1\":{\"29\":1,\"65\":1}}],[\"it\",{\"1\":{\"11\":2,\"17\":1}}],[\"if\",{\"1\":{\"11\":1,\"40\":3,\"42\":1,\"45\":6,\"49\":2,\"59\":1}}],[\"information\",{\"1\":{\"80\":1}}],[\"incr\",{\"1\":{\"77\":8}}],[\"include\",{\"1\":{\"77\":1}}],[\"invoke\",{\"1\":{\"77\":4}}],[\"invokevirtual\",{\"1\":{\"50\":1}}],[\"invokestatic\",{\"1\":{\"50\":1}}],[\"intvalue\",{\"1\":{\"50\":2}}],[\"integercache\",{\"1\":{\"49\":5}}],[\"integer\",{\"1\":{\"44\":4,\"47\":1,\"49\":12,\"50\":10}}],[\"interview\",{\"1\":{\"80\":1}}],[\"interface\",{\"1\":{\"36\":1,\"42\":1}}],[\"interpret\",{\"1\":{\"35\":1}}],[\"int\",{\"1\":{\"42\":1,\"44\":5,\"45\":1,\"47\":3,\"48\":1,\"49\":6,\"50\":3,\"53\":1,\"55\":6,\"56\":2,\"59\":5,\"66\":2,\"74\":5,\"75\":2,\"77\":5}}],[\"instanceof\",{\"1\":{\"42\":1}}],[\"in\",{\"1\":{\"11\":3,\"29\":1,\"34\":1}}],[\"333f\",{\"1\":{\"49\":2}}],[\"33\",{\"1\":{\"49\":2}}],[\"324\",{\"1\":{\"47\":1}}],[\"32767\",{\"1\":{\"47\":1}}],[\"32768\",{\"1\":{\"47\":1}}],[\"32=10\",{\"1\":{\"44\":2}}],[\"32=0\",{\"1\":{\"44\":1}}],[\"32\",{\"1\":{\"44\":4,\"47\":2}}],[\"3s\",{\"1\":{\"11\":1}}],[\"3\",{\"0\":{\"76\":1},\"1\":{\"11\":2,\"37\":3,\"45\":4,\"47\":1,\"59\":1,\"73\":1,\"75\":1}}],[\"6844904025880526861\",{\"1\":{\"67\":1}}],[\"64\",{\"1\":{\"44\":2,\"47\":2,\"53\":1}}],[\"65535\",{\"1\":{\"47\":1}}],[\"65\",{\"1\":{\"40\":1}}],[\"6\",{\"1\":{\"11\":1,\"37\":1,\"47\":1,\"51\":2}}],[\"606\",{\"1\":{\"11\":1}}],[\"639\",{\"1\":{\"11\":1}}],[\"61\",{\"1\":{\"11\":1}}],[\"892\",{\"1\":{\"65\":1}}],[\"8f\",{\"1\":{\"51\":1}}],[\"84\",{\"1\":{\"11\":1}}],[\"8080\",{\"1\":{\"11\":3,\"12\":1}}],[\"825ms\",{\"1\":{\"11\":1}}],[\"8\",{\"1\":{\"11\":2,\"37\":1,\"44\":1,\"47\":5,\"50\":1,\"51\":2,\"52\":1}}],[\"83\",{\"1\":{\"11\":2}}],[\"13\",{\"1\":{\"57\":1,\"66\":1}}],[\"12\",{\"1\":{\"66\":1}}],[\"127\",{\"1\":{\"47\":1,\"49\":5}}],[\"128\",{\"1\":{\"11\":1,\"47\":1,\"49\":2}}],[\"16\",{\"1\":{\"44\":1,\"47\":2,\"66\":1}}],[\"11111111111111111111110000000000\",{\"1\":{\"44\":1}}],[\"11111111111111111111111111111111\",{\"1\":{\"44\":1}}],[\"11\",{\"1\":{\"33\":1,\"37\":2,\"77\":2}}],[\"100\",{\"1\":{\"78\":1}}],[\"100000024\",{\"1\":{\"51\":1}}],[\"1024\",{\"1\":{\"44\":1}}],[\"10\",{\"1\":{\"11\":2,\"44\":10,\"50\":4,\"55\":2,\"74\":3,\"77\":3}}],[\"1906445\",{\"1\":{\"67\":1}}],[\"19\",{\"1\":{\"11\":1}}],[\"197\",{\"1\":{\"11\":1}}],[\"1\",{\"0\":{\"74\":1,\"75\":1},\"1\":{\"11\":1,\"43\":4,\"44\":6,\"45\":3,\"47\":14,\"49\":3,\"51\":7,\"52\":3,\"53\":2,\"59\":2,\"61\":1,\"75\":2}}],[\"rhino\",{\"1\":{\"37\":1}}],[\"rust\",{\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\"runtime\",{\"1\":{\"33\":2}}],[\"run\",{\"1\":{\"14\":1,\"29\":1}}],[\"running\",{\"1\":{\"11\":2}}],[\"rc\",{\"1\":{\"11\":3}}],[\"rollup\",{\"1\":{\"11\":1}}],[\"resolution\",{\"1\":{\"63\":1}}],[\"resolved\",{\"1\":{\"11\":2}}],[\"return\",{\"0\":{\"45\":1},\"1\":{\"42\":1,\"44\":1,\"45\":7,\"49\":5,\"50\":2,\"59\":4,\"65\":5}}],[\"release\",{\"1\":{\"37\":1}}],[\"recorder\",{\"1\":{\"37\":1}}],[\"reference\",{\"1\":{\"29\":1}}],[\"reused\",{\"1\":{\"11\":2}}],[\"仓库\",{\"1\":{\"11\":1}}],[\"项目启动命令\",{\"0\":{\"14\":1}}],[\"项目需要用到多语言么\",{\"1\":{\"11\":1}}],[\"项目介绍\",{\"1\":{\"1\":1}}],[\"must\",{\"1\":{\"49\":1}}],[\"min\",{\"1\":{\"53\":1}}],[\"mission\",{\"1\":{\"37\":1}}],[\"micro\",{\"1\":{\"30\":1}}],[\"mit\",{\"1\":{\"11\":1}}],[\"message\",{\"1\":{\"57\":2,\"60\":2}}],[\"method1\",{\"1\":{\"66\":1}}],[\"method2\",{\"1\":{\"55\":1,\"66\":1}}],[\"method\",{\"1\":{\"55\":1,\"61\":2,\"80\":1}}],[\"me\",{\"1\":{\"30\":3}}],[\"max\",{\"1\":{\"50\":1,\"53\":1}}],[\"may\",{\"1\":{\"49\":1}}],[\"machines\",{\"1\":{\"32\":1}}],[\"macos\",{\"1\":{\"29\":1,\"32\":1}}],[\"main\",{\"1\":{\"23\":1,\"45\":1,\"57\":1,\"60\":1,\"61\":1,\"66\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1}}],[\"master的代码都是ts和一些markdown文件\",{\"1\":{\"22\":1}}],[\"master\",{\"1\":{\"16\":1,\"22\":1}}],[\"manually\",{\"1\":{\"11\":1}}],[\"make\",{\"1\":{\"11\":1}}],[\"move\",{\"1\":{\"11\":1}}],[\"modules\",{\"1\":{\"11\":2}}],[\"my\",{\"1\":{\"10\":1,\"11\":2,\"14\":1,\"17\":1}}],[\"设置协议\",{\"1\":{\"11\":1}}],[\"设置应用描述\",{\"1\":{\"11\":1}}],[\"设置应用版本号\",{\"1\":{\"11\":1}}],[\"设置应用名称\",{\"1\":{\"11\":1}}],[\"override\",{\"1\":{\"65\":2}}],[\"overloading\",{\"1\":{\"63\":1}}],[\"out\",{\"1\":{\"44\":8,\"45\":8,\"49\":4,\"51\":3,\"52\":3,\"53\":2,\"55\":5,\"57\":2,\"59\":1,\"60\":2,\"66\":3,\"71\":1,\"74\":4,\"75\":2,\"76\":4}}],[\"otn\",{\"1\":{\"37\":2}}],[\"openjdk\",{\"0\":{\"37\":1},\"1\":{\"37\":33,\"67\":4}}],[\"or\",{\"1\":{\"49\":1,\"80\":1}}],[\"org\",{\"1\":{\"36\":1}}],[\"oraclejdk\",{\"1\":{\"37\":4}}],[\"oracle\",{\"0\":{\"37\":1},\"1\":{\"33\":1,\"37\":37,\"42\":1,\"67\":4,\"80\":1}}],[\"once\",{\"1\":{\"29\":1}}],[\"on\",{\"1\":{\"16\":1}}],[\"of\",{\"1\":{\"11\":1,\"32\":1,\"36\":1,\"80\":1}}],[\"objects\",{\"1\":{\"52\":1}}],[\"object\",{\"1\":{\"44\":1}}],[\"ob\",{\"1\":{\"11\":4}}],[\"2^16\",{\"1\":{\"47\":1}}],[\"2^15\",{\"1\":{\"47\":2}}],[\"2^63\",{\"1\":{\"47\":2}}],[\"2147483647\",{\"1\":{\"47\":1}}],[\"2147483648\",{\"1\":{\"47\":1}}],[\"2021\",{\"1\":{\"66\":1}}],[\"20\",{\"1\":{\"55\":1,\"74\":3}}],[\"2012\",{\"1\":{\"37\":1}}],[\"2011\",{\"1\":{\"29\":1}}],[\"200\",{\"1\":{\"78\":1}}],[\"2009\",{\"1\":{\"37\":1}}],[\"2006\",{\"1\":{\"37\":1}}],[\"246\",{\"1\":{\"11\":1}}],[\"25\",{\"1\":{\"11\":1}}],[\"2\",{\"0\":{\"75\":1,\"76\":1},\"1\":{\"11\":8,\"44\":2,\"45\":3,\"47\":5,\"49\":2,\"51\":12,\"57\":2,\"59\":1,\"61\":1,\"74\":1,\"75\":1}}],[\"22358071\",{\"1\":{\"67\":1}}],[\"22\",{\"1\":{\"11\":1}}],[\"letter\",{\"1\":{\"57\":1,\"60\":2}}],[\"length\",{\"1\":{\"49\":1,\"57\":1,\"66\":1}}],[\"l2\",{\"1\":{\"50\":2}}],[\"ljava\",{\"1\":{\"50\":3}}],[\"l1\",{\"1\":{\"50\":2}}],[\"l\",{\"1\":{\"47\":1,\"53\":3}}],[\"low\",{\"1\":{\"49\":3}}],[\"long能表示的最大正数都减\",{\"1\":{\"47\":1}}],[\"long\",{\"0\":{\"53\":1},\"1\":{\"42\":1,\"44\":2,\"47\":4,\"49\":1,\"50\":5,\"53\":4}}],[\"localhost\",{\"1\":{\"11\":2,\"12\":1}}],[\"local\",{\"1\":{\"11\":3}}],[\"lts\",{\"1\":{\"37\":3}}],[\"latest\",{\"1\":{\"36\":1}}],[\"lazy\",{\"1\":{\"34\":1}}],[\"lang\",{\"1\":{\"17\":1,\"50\":5}}],[\"language\",{\"1\":{\"11\":1}}],[\"linenumber\",{\"1\":{\"50\":2}}],[\"linux\",{\"1\":{\"29\":1,\"32\":1}}],[\"license\",{\"1\":{\"37\":2}}],[\"library\",{\"1\":{\"33\":1}}],[\"listed\",{\"1\":{\"11\":1}}],[\"after\",{\"1\":{\"77\":4}}],[\"array\",{\"1\":{\"75\":2}}],[\"arr\",{\"1\":{\"75\":6}}],[\"arguments\",{\"1\":{\"71\":1}}],[\"arg2\",{\"1\":{\"66\":2}}],[\"arg1\",{\"1\":{\"66\":3}}],[\"args\",{\"1\":{\"45\":1,\"57\":1,\"60\":1,\"61\":1,\"66\":8,\"74\":1,\"75\":1,\"76\":1}}],[\"and\",{\"1\":{\"67\":4}}],[\"anywhere\",{\"1\":{\"29\":1}}],[\"ab\",{\"1\":{\"66\":1}}],[\"abstract\",{\"1\":{\"42\":1}}],[\"author\",{\"1\":{\"66\":1}}],[\"autoboxtest\",{\"1\":{\"50\":3}}],[\"a+1\",{\"1\":{\"43\":1}}],[\"a++输出的是\",{\"1\":{\"43\":1}}],[\"a++\",{\"1\":{\"43\":1}}],[\"age\",{\"1\":{\"40\":1,\"55\":4,\"77\":4}}],[\"agreement\",{\"1\":{\"37\":2}}],[\"amazon\",{\"1\":{\"37\":1}}],[\"aws\",{\"1\":{\"37\":1}}],[\"aload\",{\"1\":{\"50\":3}}],[\"alibaba\",{\"1\":{\"37\":3}}],[\"already\",{\"1\":{\"11\":1}}],[\"ascii\",{\"1\":{\"57\":1}}],[\"assert\",{\"1\":{\"42\":1}}],[\"asm\",{\"1\":{\"36\":2}}],[\"async来创建线程\",{\"1\":{\"29\":1}}],[\"ahead\",{\"1\":{\"36\":1}}],[\"aot\",{\"0\":{\"36\":2},\"1\":{\"36\":16}}],[\"api\",{\"1\":{\"33\":1}}],[\"at\",{\"1\":{\"11\":1}}],[\"a\",{\"1\":{\"11\":3,\"43\":1,\"47\":2,\"51\":3,\"52\":2,\"57\":2,\"59\":4,\"60\":3,\"66\":3,\"74\":9,\"80\":2}}],[\"added\",{\"1\":{\"11\":2}}],[\"swap\",{\"1\":{\"74\":3,\"76\":3}}],[\"switch\",{\"1\":{\"42\":2}}],[\"sayhello\",{\"1\":{\"71\":2}}],[\"s\",{\"1\":{\"66\":4}}],[\"sb2\",{\"1\":{\"63\":1}}],[\"sb\",{\"1\":{\"63\":1}}],[\"system\",{\"1\":{\"44\":8,\"45\":8,\"49\":4,\"51\":3,\"52\":3,\"53\":2,\"55\":5,\"57\":2,\"59\":1,\"60\":2,\"66\":3,\"71\":1,\"74\":4,\"75\":2,\"76\":4}}],[\"synchronized\",{\"1\":{\"42\":1}}],[\"short\",{\"1\":{\"42\":1,\"47\":4,\"49\":1}}],[\"shouldprefetch\",{\"1\":{\"17\":1}}],[\"subtract\",{\"1\":{\"52\":2}}],[\"subdependencies\",{\"1\":{\"11\":1}}],[\"sum\",{\"1\":{\"50\":4,\"55\":2}}],[\"supersuperman\",{\"1\":{\"65\":1}}],[\"superman\",{\"1\":{\"65\":4}}],[\"super\",{\"1\":{\"42\":1}}],[\"sun\",{\"1\":{\"37\":5}}],[\"spring\",{\"1\":{\"36\":2}}],[\"specifications\",{\"1\":{\"32\":1}}],[\"sdk\",{\"1\":{\"33\":1}}],[\"setter方法\",{\"1\":{\"76\":1}}],[\"see\",{\"1\":{\"40\":1}}],[\"servlet\",{\"1\":{\"30\":1,\"33\":1}}],[\"server\",{\"1\":{\"11\":1}}],[\"se\",{\"0\":{\"30\":1},\"1\":{\"30\":6,\"32\":1}}],[\"select\",{\"1\":{\"11\":1}}],[\"src\",{\"1\":{\"11\":1}}],[\"script\",{\"1\":{\"11\":1}}],[\"sourcemap\",{\"1\":{\"11\":1}}],[\"std\",{\"1\":{\"77\":4}}],[\"str2\",{\"1\":{\"55\":2}}],[\"str\",{\"1\":{\"55\":2,\"71\":3}}],[\"stringbuilder\",{\"1\":{\"63\":5}}],[\"stringexample\",{\"1\":{\"57\":1}}],[\"string\",{\"1\":{\"45\":1,\"47\":1,\"55\":4,\"57\":2,\"60\":2,\"61\":1,\"65\":3,\"66\":11,\"71\":2,\"74\":1,\"75\":1,\"76\":2}}],[\"strictfp\",{\"1\":{\"42\":1}}],[\"stackoverflow\",{\"1\":{\"67\":2}}],[\"staicmethod\",{\"1\":{\"61\":2}}],[\"staticvariableexample\",{\"1\":{\"56\":1}}],[\"staticvar\",{\"1\":{\"56\":2}}],[\"static\",{\"1\":{\"42\":1,\"44\":1,\"45\":1,\"48\":2,\"49\":10,\"50\":1,\"55\":4,\"56\":3,\"57\":3,\"60\":3,\"61\":2,\"64\":2,\"66\":6,\"74\":2,\"75\":2,\"76\":2}}],[\"standard\",{\"1\":{\"30\":1}}],[\"stars\",{\"1\":{\"4\":1}}],[\"star\",{\"0\":{\"4\":1}}],[\"store\",{\"1\":{\"11\":2}}],[\"+greeting\",{\"1\":{\"57\":1}}],[\"+character\",{\"1\":{\"57\":1}}],[\"+=\",{\"1\":{\"50\":1}}],[\"++var3\",{\"1\":{\"66\":1}}],[\"++a\",{\"1\":{\"43\":2}}],[\"++\",{\"1\":{\"43\":2}}],[\"++同时支持方法重载和操作符重载\",{\"1\":{\"38\":1}}],[\"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\",{\"1\":{\"11\":1}}],[\"++++++++\",{\"1\":{\"11\":1}}],[\"+\",{\"1\":{\"11\":4,\"33\":1,\"44\":8,\"49\":2,\"53\":2,\"55\":3,\"60\":2,\"66\":1,\"74\":4,\"76\":4}}],[\"+606\",{\"1\":{\"11\":1}}],[\"+83\",{\"1\":{\"11\":1}}],[\"tutorials\",{\"1\":{\"80\":1}}],[\"tutorial\",{\"1\":{\"42\":1}}],[\"true\",{\"1\":{\"42\":1,\"45\":1,\"47\":1,\"49\":4,\"52\":1,\"53\":1}}],[\"try\",{\"1\":{\"42\":1}}],[\"transient\",{\"1\":{\"42\":1}}],[\"this\",{\"1\":{\"42\":1,\"55\":3}}],[\"throws\",{\"1\":{\"42\":1}}],[\"throw\",{\"1\":{\"42\":1}}],[\"thread\",{\"1\":{\"29\":2}}],[\"thread和std\",{\"1\":{\"29\":1}}],[\"then\",{\"1\":{\"11\":1}}],[\"the\",{\"1\":{\"11\":1,\"40\":1,\"67\":2}}],[\"theme\",{\"1\":{\"8\":1,\"10\":1,\"11\":5,\"17\":2}}],[\"tips\",{\"1\":{\"42\":1}}],[\"time\",{\"1\":{\"29\":1,\"34\":1,\"36\":1}}],[\"title\",{\"1\":{\"17\":1}}],[\"ts\",{\"0\":{\"17\":1},\"1\":{\"23\":1}}],[\"temp\",{\"1\":{\"74\":2,\"76\":2}}],[\"template\",{\"1\":{\"11\":2}}],[\"technology\",{\"1\":{\"37\":1}}],[\"terser\",{\"1\":{\"11\":1}}],[\"tobinarystring\",{\"1\":{\"44\":4}}],[\"to\",{\"1\":{\"11\":2,\"20\":1,\"40\":1,\"80\":1}}],[\"tmp\",{\"1\":{\"11\":2}}],[\"var3\",{\"1\":{\"66\":3}}],[\"var2\",{\"1\":{\"66\":2}}],[\"var1\",{\"1\":{\"66\":2}}],[\"variablelengthargument\",{\"1\":{\"66\":2}}],[\"variableexample\",{\"1\":{\"55\":2}}],[\"valueof\",{\"1\":{\"49\":4,\"50\":2}}],[\"value\",{\"1\":{\"45\":1,\"49\":1,\"50\":1,\"53\":2}}],[\"void\",{\"1\":{\"42\":1,\"45\":1,\"55\":2,\"57\":1,\"59\":3,\"60\":1,\"61\":3,\"65\":1,\"66\":6,\"71\":1,\"74\":2,\"75\":2,\"76\":2,\"77\":1}}],[\"volatile\",{\"1\":{\"42\":1}}],[\"v2\",{\"1\":{\"37\":1}}],[\"vm\",{\"1\":{\"32\":5}}],[\"vs\",{\"0\":{\"30\":1,\"31\":2,\"37\":1},\"1\":{\"36\":1,\"48\":1,\"55\":1,\"67\":2}}],[\"virtual\",{\"1\":{\"32\":1}}],[\"visibility\",{\"1\":{\"20\":1}}],[\"vite\",{\"1\":{\"11\":1}}],[\"v5\",{\"1\":{\"11\":1}}],[\"vue\",{\"1\":{\"11\":1}}],[\"vuepress\",{\"1\":{\"10\":1,\"11\":8,\"17\":1}}],[\"v3\",{\"1\":{\"11\":2}}],[\"biginteger\",{\"1\":{\"53\":2}}],[\"bigdecimal\",{\"1\":{\"52\":12}}],[\"bipush\",{\"1\":{\"50\":1}}],[\"binary\",{\"1\":{\"37\":1}}],[\"by\",{\"1\":{\"49\":1}}],[\"bytes\",{\"1\":{\"57\":1}}],[\"byte\",{\"1\":{\"42\":1,\"44\":1,\"47\":4,\"49\":1}}],[\"before\",{\"1\":{\"77\":4}}],[\"between\",{\"1\":{\"67\":4}}],[\"be\",{\"1\":{\"49\":1}}],[\"benefits\",{\"1\":{\"40\":1}}],[\"b\",{\"1\":{\"43\":4,\"49\":2,\"51\":3,\"52\":3,\"59\":2,\"66\":3,\"74\":9}}],[\"boolean\",{\"1\":{\"42\":1,\"45\":1,\"47\":4,\"49\":4}}],[\"break\",{\"0\":{\"45\":1},\"1\":{\"42\":1,\"45\":2}}],[\"branches\",{\"1\":{\"16\":1}}],[\"bcl\",{\"1\":{\"37\":2}}],[\"basis\",{\"0\":{\"84\":1}}],[\"basictypevar\",{\"1\":{\"48\":1}}],[\"base\",{\"1\":{\"17\":1}}],[\"baidusyncdisk\",{\"1\":{\"11\":2}}],[\"blogs\",{\"1\":{\"11\":1}}],[\"blogs>\",{\"1\":{\"11\":1}}],[\"blog\",{\"1\":{\"11\":1}}],[\"differences\",{\"1\":{\"67\":2}}],[\"difference\",{\"1\":{\"67\":2}}],[\"display\",{\"1\":{\"11\":1}}],[\"d\",{\"1\":{\"66\":2}}],[\"date\",{\"1\":{\"66\":1}}],[\"daiwencheng\",{\"1\":{\"11\":2}}],[\"dragonwell\",{\"1\":{\"37\":1}}],[\"dragonwell8\",{\"1\":{\"37\":2}}],[\"dubbo\",{\"1\":{\"36\":1}}],[\"description\",{\"1\":{\"17\":1}}],[\"defineuserconfig\",{\"1\":{\"17\":1}}],[\"default\",{\"1\":{\"17\":1,\"42\":5}}],[\"development\",{\"1\":{\"33\":1}}],[\"dev\",{\"1\":{\"11\":3,\"14\":1}}],[\"devdependencies\",{\"1\":{\"11\":2}}],[\"demo\",{\"1\":{\"11\":1}}],[\"deploy\",{\"0\":{\"16\":1}}],[\"dependency\",{\"1\":{\"11\":2}}],[\"deprecated\",{\"1\":{\"11\":1}}],[\"double\",{\"1\":{\"42\":1,\"44\":1,\"47\":3,\"49\":3}}],[\"do\",{\"1\":{\"42\":1}}],[\"done\",{\"1\":{\"11\":4}}],[\"downloaded\",{\"1\":{\"11\":2}}],[\"docker\",{\"1\":{\"29\":1}}],[\"documents\",{\"1\":{\"11\":2}}],[\"docsbranch\",{\"1\":{\"23\":1}}],[\"docs的settings项\",{\"1\":{\"21\":1}}],[\"docs\",{\"0\":{\"16\":1},\"1\":{\"10\":1,\"11\":3,\"14\":2,\"17\":1,\"20\":1,\"36\":1,\"42\":1}}],[\"dlx\",{\"1\":{\"11\":2}}],[\"change\",{\"1\":{\"75\":3}}],[\"charactercache\",{\"1\":{\"49\":3}}],[\"character\",{\"1\":{\"47\":1,\"49\":7}}],[\"char类型进行移位前\",{\"1\":{\"44\":1}}],[\"char\",{\"1\":{\"42\":1,\"47\":4,\"49\":2,\"57\":2,\"60\":1}}],[\"check\",{\"1\":{\"40\":1}}],[\"cache\",{\"1\":{\"49\":6}}],[\"catch\",{\"1\":{\"42\":1}}],[\"case\",{\"1\":{\"42\":1}}],[\"cadence\",{\"1\":{\"37\":1}}],[\"cglib\",{\"1\":{\"36\":2}}],[\"clean\",{\"1\":{\"40\":1}}],[\"class文件就可以看出来了\",{\"1\":{\"66\":1}}],[\"class\",{\"1\":{\"33\":1,\"34\":2,\"35\":1,\"36\":1,\"42\":1,\"48\":1,\"49\":2,\"55\":1,\"56\":2,\"57\":1,\"60\":1,\"61\":1,\"65\":3,\"66\":2,\"76\":1}}],[\"client\",{\"1\":{\"11\":1}}],[\"cplusplus\",{\"1\":{\"29\":1}}],[\"c++就引入了多线程库\",{\"1\":{\"29\":1}}],[\"c++11\",{\"1\":{\"29\":1}}],[\"c++\",{\"0\":{\"38\":1},\"1\":{\"29\":1,\"34\":1,\"35\":1,\"36\":1,\"38\":5,\"72\":1,\"77\":1,\"78\":1}}],[\"cn\",{\"1\":{\"17\":1,\"67\":1}}],[\"cout\",{\"1\":{\"77\":4}}],[\"code\",{\"1\":{\"37\":1,\"40\":1}}],[\"codec\",{\"1\":{\"11\":1}}],[\"corretto\",{\"1\":{\"37\":1}}],[\"constructor\",{\"1\":{\"80\":1}}],[\"constantvar\",{\"1\":{\"56\":1}}],[\"constantvariableexample\",{\"1\":{\"56\":1}}],[\"const\",{\"1\":{\"42\":1}}],[\"continue\",{\"0\":{\"45\":1},\"1\":{\"42\":1,\"45\":2}}],[\"control\",{\"1\":{\"37\":1}}],[\"configured\",{\"1\":{\"49\":1}}],[\"config\",{\"0\":{\"17\":1}}],[\"compilation\",{\"1\":{\"34\":1,\"36\":1}}],[\"comparison\",{\"1\":{\"32\":1}}],[\"com\",{\"1\":{\"29\":1,\"37\":2,\"42\":1,\"67\":3}}],[\"c\",{\"1\":{\"11\":2,\"34\":1,\"35\":1,\"36\":1,\"38\":1,\"49\":4,\"52\":2,\"66\":2,\"78\":1}}],[\"create\",{\"1\":{\"10\":1,\"11\":1}}],[\"099999905\",{\"1\":{\"51\":1}}],[\"0d\",{\"1\":{\"47\":1}}],[\"0f\",{\"1\":{\"47\":1,\"51\":1}}],[\"0l\",{\"1\":{\"47\":1,\"50\":1}}],[\"0\",{\"1\":{\"11\":16,\"44\":3,\"45\":4,\"47\":5,\"49\":2,\"50\":4,\"51\":15,\"52\":5,\"56\":2,\"57\":1,\"66\":2,\"75\":5}}],[\"40\",{\"1\":{\"49\":4}}],[\"4028235e38\",{\"1\":{\"47\":1}}],[\"409\",{\"1\":{\"11\":1}}],[\"45\",{\"1\":{\"47\":1}}],[\"4e\",{\"1\":{\"47\":1}}],[\"42\",{\"1\":{\"44\":5}}],[\"4\",{\"1\":{\"11\":2,\"45\":2,\"47\":4,\"49\":1,\"51\":3,\"59\":1,\"75\":1,\"80\":1}}],[\"7f\",{\"1\":{\"51\":1}}],[\"7976931348623157e308\",{\"1\":{\"47\":1}}],[\"7428\",{\"1\":{\"11\":2}}],[\"7\",{\"1\":{\"11\":2,\"37\":3}}],[\"创建了数值在\",{\"1\":{\"49\":1}}],[\"创建一个更小的\",{\"1\":{\"33\":1}}],[\"创建出只包含所依赖的\",{\"1\":{\"33\":1}}],[\"创建过程\",{\"0\":{\"11\":1}}],[\"创建项目模板\",{\"0\":{\"10\":1}}],[\"person2\",{\"1\":{\"76\":8}}],[\"person1\",{\"1\":{\"76\":8}}],[\"person\",{\"1\":{\"61\":6,\"76\":8}}],[\"printvariable\",{\"1\":{\"66\":6}}],[\"println\",{\"1\":{\"44\":8,\"45\":8,\"49\":4,\"51\":3,\"52\":3,\"53\":2,\"55\":5,\"57\":2,\"59\":1,\"60\":2,\"66\":3,\"71\":1,\"74\":4,\"75\":2,\"76\":4}}],[\"private关键字修饰就无法这样访问了\",{\"1\":{\"56\":1}}],[\"private\",{\"1\":{\"42\":1,\"48\":1,\"49\":3,\"50\":1,\"55\":3,\"64\":1,\"76\":1}}],[\"property\",{\"1\":{\"49\":1}}],[\"protected\",{\"1\":{\"42\":1}}],[\"prod\",{\"1\":{\"11\":1}}],[\"project\",{\"1\":{\"11\":1}}],[\"progress\",{\"1\":{\"11\":2}}],[\"php\",{\"1\":{\"35\":1}}],[\"python\",{\"1\":{\"35\":1,\"36\":1}}],[\"pda\",{\"1\":{\"30\":1}}],[\"platform\",{\"1\":{\"30\":3}}],[\"plugin\",{\"1\":{\"11\":1}}],[\"putfield\",{\"1\":{\"50\":2}}],[\"public\",{\"1\":{\"20\":1,\"42\":1,\"45\":1,\"49\":3,\"55\":5,\"56\":4,\"57\":4,\"59\":5,\"60\":4,\"61\":4,\"65\":8,\"66\":8,\"74\":2,\"75\":2,\"76\":3}}],[\"push\",{\"1\":{\"16\":1}}],[\"pwa\",{\"1\":{\"17\":1}}],[\"posts\",{\"0\":{\"83\":1}}],[\"post\",{\"1\":{\"67\":1}}],[\"postinstall\",{\"1\":{\"11\":1}}],[\"powershell\",{\"1\":{\"11\":1}}],[\"passing\",{\"1\":{\"80\":1}}],[\"pascal\",{\"1\":{\"72\":1}}],[\"parameters\",{\"1\":{\"71\":1}}],[\"parameter\",{\"1\":{\"59\":2}}],[\"pages是发布分支\",{\"1\":{\"22\":1}}],[\"pages分支\",{\"0\":{\"22\":1}}],[\"pages\",{\"0\":{\"19\":1,\"21\":1},\"1\":{\"11\":1,\"21\":1,\"22\":1}}],[\"pages搭建\",{\"1\":{\"8\":1}}],[\"packages\",{\"1\":{\"11\":1}}],[\"package\",{\"1\":{\"11\":1,\"42\":1}}],[\"ps\",{\"1\":{\"11\":1}}],[\"pnpm\",{\"1\":{\"10\":1,\"11\":5}}],[\"准备运行环境\",{\"0\":{\"9\":1}}],[\"和基本数据类型\",{\"1\":{\"65\":1}}],[\"和>>>转换成的指令码运行起来会更高效些\",{\"1\":{\"44\":1}}],[\"和自减运算符\",{\"1\":{\"43\":1}}],[\"和其他\",{\"1\":{\"36\":1}}],[\"和\",{\"0\":{\"33\":1,\"38\":1,\"45\":1},\"1\":{\"8\":1,\"30\":1,\"33\":1,\"34\":1,\"36\":1,\"37\":5,\"38\":2,\"42\":1,\"43\":1,\"76\":4}}],[\"三分钟搭建一个博客网站\",{\"0\":{\"7\":1,\"8\":1}}],[\"幻灯片页\",{\"0\":{\"6\":1}}],[\"趋势\",{\"0\":{\"4\":1}}],[\"|\",{\"1\":{\"1\":1,\"11\":2,\"35\":1}}],[\"欢迎来到鱼塘\",{\"1\":{\"1\":1}}],[\"鱼塘\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
